{
    "sourceFile": "accountsmanagement/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 98,
            "patches": [
                {
                    "date": 1725013363852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725013373224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,101 +275,5 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-    class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n-\n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = BookManagement.objects.get(email=email)\n-                print(\"services\",book.services.service_name)\n-            except BookManagement.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            # Construct the verification URL\n-            site_url = 'https://example.com'  # Replace with your actual site URL\n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n-\n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book)\n-\n-            return Response({'detail': 'Email verification sent successfully'})\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-def sendBookingConfirmationEMail(email, verify_url, subject, book):\n-    context = {\n-        'verification_url': verify_url,\n-        'book': book,\n-    }\n-\n-    html_content = render_to_string('booking_confirmation.html', context)\n-\n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n-    \n-\n-class PasswordResetView(generics.GenericAPIView):\n-\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        # return \"123456\"\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n-    \n-    serializer_class = PasswordNumberSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            email_type = \"reset_password\"\n-            \n-            subject = 'LifeQuest OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendPasswordResetMail(email, otp,subject,email_type,user)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"password_reset_otp_{user.id}\"\n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\":\"OTP has been sent to your email address\"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-\n-def sendPasswordResetMail(email, otp, subject, email_type, user):\n-    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-    \n-    if email_type == \"reset_password\":  # Ensure this matches what is passed\n-        context = {\n-            'otp': otp,\n-            'user': user,\n-            'verification_url': 'https://example.com/verify'\n-        }\n-        \n-        password_html_contents = render_to_string('forget_password_get_otp.html', context)\n-    \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013524236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -275,5 +275,101 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-    \n\\ No newline at end of file\n+    class SendEmailForBookingVerification(APIView):\n+    serializer_class = EmailNumberSerializer\n+\n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = BookManagement.objects.get(email=email)\n+                print(\"services\",book.services.service_name)\n+            except BookManagement.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Construct the verification URL\n+            site_url = 'https://example.com'  # Replace with your actual site URL\n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+\n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            sendBookingConfirmationEMail(email, verify_url, subject, book)\n+\n+            return Response({'detail': 'Email verification sent successfully'})\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+def sendBookingConfirmationEMail(email, verify_url, subject, book):\n+    context = {\n+        'verification_url': verify_url,\n+        'book': book,\n+    }\n+\n+    html_content = render_to_string('booking_confirmation.html', context)\n+\n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+    \n+\n+class PasswordResetView(generics.GenericAPIView):\n+\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        # return \"123456\"\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n+    \n+    serializer_class = PasswordNumberSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            email_type = \"reset_password\"\n+            \n+            subject = 'LifeQuest OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendPasswordResetMail(email, otp,subject,email_type,user)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"password_reset_otp_{user.id}\"\n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\":\"OTP has been sent to your email address\"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+\n+def sendPasswordResetMail(email, otp, subject, email_type, user):\n+    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n+    \n+    if email_type == \"reset_password\":  # Ensure this matches what is passed\n+        context = {\n+            'otp': otp,\n+            'user': user,\n+            'verification_url': 'https://example.com/verify'\n+        }\n+        \n+        password_html_contents = render_to_string('forget_password_get_otp.html', context)\n+    \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013533578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,77 +299,77 @@\n \n             return Response({'detail': 'Email verification sent successfully'})\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-def sendBookingConfirmationEMail(email, verify_url, subject, book):\n-    context = {\n-        'verification_url': verify_url,\n-        'book': book,\n-    }\n+    def sendBookingConfirmationEMail(email, verify_url, subject, book):\n+        context = {\n+            'verification_url': verify_url,\n+            'book': book,\n+        }\n \n-    html_content = render_to_string('booking_confirmation.html', context)\n+        html_content = render_to_string('booking_confirmation.html', context)\n \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n+        email_from = settings.EMAIL_HOST_USER\n+        recipient_list = [email]\n+        plain_message = \"\"\n \n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n-    \n+        send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+        \n \n-class PasswordResetView(generics.GenericAPIView):\n+    class PasswordResetView(generics.GenericAPIView):\n \n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        # return \"123456\"\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n-    \n-    serializer_class = PasswordNumberSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n+        def generate_otp(self,user):\n+            # Generate a random 6-digit OTP\n+            # return \"123456\"\n+            user = str(user)\n+            return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n         \n-            otp = self.generate_otp(user.id)\n+        serializer_class = PasswordNumberSerializer\n+        def post(self, request):\n+            serializer = self.serializer_class(data=request.data)\n+            serializer.is_valid(raise_exception=True)\n+            email = serializer.data[\"email\"]\n+            user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+            if user:\n+            \n+                otp = self.generate_otp(user.id)\n \n-            email_type = \"reset_password\"\n+                email_type = \"reset_password\"\n+                \n+                subject = 'LifeQuest OTP'\n+                if '@' in email:\n+                    email = user.email\n+                    sendPasswordResetMail(email, otp,subject,email_type,user)\n+                else:\n+                    SendSms(contact=email,otp=otp,message=subject)\n             \n-            subject = 'LifeQuest OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendPasswordResetMail(email, otp,subject,email_type,user)\n\\ No newline at end of file\n+                cache_key = f\"password_reset_otp_{user.id}\"\n+                cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+                return response.Response(\n+                    {\n+                    \"message\":\"OTP has been sent to your email address\"\n+                    },\n+                    status=status.HTTP_200_OK,\n+                )\n             else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"password_reset_otp_{user.id}\"\n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n+                return response.Response(\n+                    {\"message\": \"User doesn't exists\"},\n+                    status=status.HTTP_400_BAD_REQUEST,\n+                )\n \n-            return response.Response(\n-                {\n-                \"message\":\"OTP has been sent to your email address\"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-\n-def sendPasswordResetMail(email, otp, subject, email_type, user):\n-    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-    \n-    if email_type == \"reset_password\":  # Ensure this matches what is passed\n-        context = {\n-            'otp': otp,\n-            'user': user,\n-            'verification_url': 'https://example.com/verify'\n-        }\n+    def sendPasswordResetMail(email, otp, subject, email_type, user):\n+        password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n         \n-        password_html_contents = render_to_string('forget_password_get_otp.html', context)\n-    \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n+        if email_type == \"reset_password\":  # Ensure this matches what is passed\n+            context = {\n+                'otp': otp,\n+                'user': user,\n+                'verification_url': 'https://example.com/verify'\n+            }\n+            \n+            password_html_contents = render_to_string('forget_password_get_otp.html', context)\n+        \n+        email_from = settings.EMAIL_HOST_USER\n+        recipient_list = [email]\n+        plain_message = \"\"\n+        send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013559975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,30 +276,30 @@\n             status=status.HTTP_200_OK,\n         )\n      \n     class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n+        serializer_class = EmailNumberSerializer\n \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = BookManagement.objects.get(email=email)\n-                print(\"services\",book.services.service_name)\n-            except BookManagement.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+        def post(self, request, *args, **kwargs):\n+            serializer = self.serializer_class(data=request.data)\n+            if serializer.is_valid():\n+                email = serializer.validated_data[\"email\"]\n+                try:\n+                    book = BookManagement.objects.get(email=email)\n+                    print(\"services\",book.services.service_name)\n+                except BookManagement.DoesNotExist:\n+                    return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n-            # Construct the verification URL\n-            site_url = 'https://example.com'  # Replace with your actual site URL\n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+                # Construct the verification URL\n+                site_url = 'https://example.com'  # Replace with your actual site URL\n+                verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book)\n+                # Send the confirmation email\n+                subject = 'Booking Verification Email'\n+                sendBookingConfirmationEMail(email, verify_url, subject, book)\n \n-            return Response({'detail': 'Email verification sent successfully'})\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+                return Response({'detail': 'Email verification sent successfully'})\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n     def sendBookingConfirmationEMail(email, verify_url, subject, book):\n         context = {\n             'verification_url': verify_url,\n"
                },
                {
                    "date": 1725013570473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,65 +299,65 @@\n \n                 return Response({'detail': 'Email verification sent successfully'})\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-    def sendBookingConfirmationEMail(email, verify_url, subject, book):\n-        context = {\n-            'verification_url': verify_url,\n-            'book': book,\n-        }\n+        def sendBookingConfirmationEMail(email, verify_url, subject, book):\n+            context = {\n+                'verification_url': verify_url,\n+                'book': book,\n+            }\n \n-        html_content = render_to_string('booking_confirmation.html', context)\n+            html_content = render_to_string('booking_confirmation.html', context)\n \n-        email_from = settings.EMAIL_HOST_USER\n-        recipient_list = [email]\n-        plain_message = \"\"\n+            email_from = settings.EMAIL_HOST_USER\n+            recipient_list = [email]\n+            plain_message = \"\"\n \n-        send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n-        \n+            send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+            \n \n-    class PasswordResetView(generics.GenericAPIView):\n+        class PasswordResetView(generics.GenericAPIView):\n \n-        def generate_otp(self,user):\n-            # Generate a random 6-digit OTP\n-            # return \"123456\"\n-            user = str(user)\n-            return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n-        \n-        serializer_class = PasswordNumberSerializer\n-        def post(self, request):\n-            serializer = self.serializer_class(data=request.data)\n-            serializer.is_valid(raise_exception=True)\n-            email = serializer.data[\"email\"]\n-            user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-            if user:\n+            def generate_otp(self,user):\n+                # Generate a random 6-digit OTP\n+                # return \"123456\"\n+                user = str(user)\n+                return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n             \n-                otp = self.generate_otp(user.id)\n+            serializer_class = PasswordNumberSerializer\n+            def post(self, request):\n+                serializer = self.serializer_class(data=request.data)\n+                serializer.is_valid(raise_exception=True)\n+                email = serializer.data[\"email\"]\n+                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+                if user:\n+                \n+                    otp = self.generate_otp(user.id)\n \n-                email_type = \"reset_password\"\n+                    email_type = \"reset_password\"\n+                    \n+                    subject = 'LifeQuest OTP'\n+                    if '@' in email:\n+                        email = user.email\n+                        sendPasswordResetMail(email, otp,subject,email_type,user)\n+                    else:\n+                        SendSms(contact=email,otp=otp,message=subject)\n                 \n-                subject = 'LifeQuest OTP'\n-                if '@' in email:\n-                    email = user.email\n-                    sendPasswordResetMail(email, otp,subject,email_type,user)\n+                    cache_key = f\"password_reset_otp_{user.id}\"\n+                    cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+                    return response.Response(\n+                        {\n+                        \"message\":\"OTP has been sent to your email address\"\n+                        },\n+                        status=status.HTTP_200_OK,\n+                    )\n                 else:\n-                    SendSms(contact=email,otp=otp,message=subject)\n-            \n-                cache_key = f\"password_reset_otp_{user.id}\"\n-                cache.set(cache_key, otp, timeout=otp_time_expired)\n+                    return response.Response(\n+                        {\"message\": \"User doesn't exists\"},\n+                        status=status.HTTP_400_BAD_REQUEST,\n+                    )\n \n-                return response.Response(\n-                    {\n-                    \"message\":\"OTP has been sent to your email address\"\n-                    },\n-                    status=status.HTTP_200_OK,\n-                )\n-            else:\n-                return response.Response(\n-                    {\"message\": \"User doesn't exists\"},\n-                    status=status.HTTP_400_BAD_REQUEST,\n-                )\n-\n     def sendPasswordResetMail(email, otp, subject, email_type, user):\n         password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n         \n         if email_type == \"reset_password\":  # Ensure this matches what is passed\n"
                },
                {
                    "date": 1725013653383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from django.shortcuts import render\n from rest_framework import generics, status, viewsets, response\n-from .serializers import EmailNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n+from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n from accounts.models import CustomUser\n from django.utils.http import urlsafe_base64_encode\n from django.utils.encoding import force_bytes\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n@@ -356,20 +356,20 @@\n                         {\"message\": \"User doesn't exists\"},\n                         status=status.HTTP_400_BAD_REQUEST,\n                     )\n \n-    def sendPasswordResetMail(email, otp, subject, email_type, user):\n-        password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-        \n-        if email_type == \"reset_password\":  # Ensure this matches what is passed\n-            context = {\n-                'otp': otp,\n-                'user': user,\n-                'verification_url': 'https://example.com/verify'\n-            }\n+        def sendPasswordResetMail(email, otp, subject, email_type, user):\n+            password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n             \n-            password_html_contents = render_to_string('forget_password_get_otp.html', context)\n-        \n-        email_from = settings.EMAIL_HOST_USER\n-        recipient_list = [email]\n\\ No newline at end of file\n-        plain_message = \"\"\n-        send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n+            if email_type == \"reset_password\":  # Ensure this matches what is passed\n+                context = {\n+                    'otp': otp,\n+                    'user': user,\n+                    'verification_url': 'https://example.com/verify'\n+                }\n+                \n+                password_html_contents = render_to_string('forget_password_get_otp.html', context)\n+            \n+            email_from = settings.EMAIL_HOST_USER\n+            recipient_list = [email]\n+            plain_message = \"\"\n+            send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013669342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,9 +198,9 @@\n         reset_verification = \"verification\"\n         sendMail(email,verify_url,subject,reset_verification)\n \n         return Response({\n-            'detail': 'Email verificatio'})\n+            'detail': 'Email verification'})\n \n def sendMail(email, reset_url,subject,reset_verification):\n     if reset_verification == \"verification\":\n         body = f\"\"\"<body>\n"
                },
                {
                    "date": 1725013719690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n from django.urls import reverse\n from django.conf import settings\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n+from django.template.loader import render_to_string\n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1725013725048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n from django.conf import settings\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n+from \n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1725013733633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.conf import settings\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n-from \n+from booking.models import B\n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1725013807816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.conf import settings\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n-from booking.models import B\n+from booking.models import DestinationBook\n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n@@ -285,9 +285,9 @@\n             serializer = self.serializer_class(data=request.data)\n             if serializer.is_valid():\n                 email = serializer.validated_data[\"email\"]\n                 try:\n-                    book = BookManagement.objects.get(email=email)\n+                    book = DestinationBook.objects.get(email=email)\n                     print(\"services\",book.services.service_name)\n                 except BookManagement.DoesNotExist:\n                     return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n"
                },
                {
                    "date": 1725013819181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n                 email = serializer.validated_data[\"email\"]\n                 try:\n                     book = DestinationBook.objects.get(email=email)\n                     print(\"services\",book.services.service_name)\n-                except BookManagement.DoesNotExist:\n+                except DestinationBook.DoesNotExist:\n                     return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n                 # Construct the verification URL\n                 site_url = 'https://example.com'  # Replace with your actual site URL\n"
                },
                {
                    "date": 1725013832535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -358,9 +358,9 @@\n                         {\"message\": \"User doesn't exists\"},\n                         status=status.HTTP_400_BAD_REQUEST,\n                     )\n \n-        def sendPasswordResetMail(email, otp, subject, email_type, user):\n+    def sendPasswordResetMail(email, otp, subject, email_type, user):\n             password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n             \n             if email_type == \"reset_password\":  # Ensure this matches what is passed\n                 context = {\n"
                },
                {
                    "date": 1725013838534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -358,9 +358,9 @@\n                         {\"message\": \"User doesn't exists\"},\n                         status=status.HTTP_400_BAD_REQUEST,\n                     )\n \n-    def sendPasswordResetMail(email, otp, subject, email_type, user):\n+def sendPasswordResetMail(email, otp, subject, email_type, user):\n             password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n             \n             if email_type == \"reset_password\":  # Ensure this matches what is passed\n                 context = {\n"
                },
                {
                    "date": 1725013844442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -359,11 +359,11 @@\n                         status=status.HTTP_400_BAD_REQUEST,\n                     )\n \n def sendPasswordResetMail(email, otp, subject, email_type, user):\n-            password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n+    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n             \n-            if email_type == \"reset_password\":  # Ensure this matches what is passed\n+        if email_type == \"reset_password\":  # Ensure this matches what is passed\n                 context = {\n                     'otp': otp,\n                     'user': user,\n                     'verification_url': 'https://example.com/verify'\n"
                },
                {
                    "date": 1725013850725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,8 +370,8 @@\n                 }\n                 \n                 password_html_contents = render_to_string('forget_password_get_otp.html', context)\n             \n-            email_from = settings.EMAIL_HOST_USER\n-            recipient_list = [email]\n+        email_from = settings.EMAIL_HOST_USER\n+        recipient_list = [email]\n             plain_message = \"\"\n             send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013859573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,9 +361,9 @@\n \n def sendPasswordResetMail(email, otp, subject, email_type, user):\n     password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n             \n-        if email_type == \"reset_password\":  # Ensure this matches what is passed\n+    if email_type == \"reset_password\":  # Ensure this matches what is passed\n                 context = {\n                     'otp': otp,\n                     'user': user,\n                     'verification_url': 'https://example.com/verify'\n@@ -372,6 +372,6 @@\n                 password_html_contents = render_to_string('forget_password_get_otp.html', context)\n             \n         email_from = settings.EMAIL_HOST_USER\n         recipient_list = [email]\n-            plain_message = \"\"\n-            send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n+        plain_message = \"\"\n+        send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013869058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,8 +370,8 @@\n                 }\n                 \n                 password_html_contents = render_to_string('forget_password_get_otp.html', context)\n             \n-        email_from = settings.EMAIL_HOST_USER\n-        recipient_list = [email]\n-        plain_message = \"\"\n-        send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725013885162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n                     otp = self.generate_otp(user.id)\n \n                     email_type = \"reset_password\"\n                     \n-                    subject = 'LifeQuest OTP'\n+                    subject = 'Everest Thrill O'\n                     if '@' in email:\n                         email = user.email\n                         sendPasswordResetMail(email, otp,subject,email_type,user)\n                     else:\n"
                },
                {
                    "date": 1725013892071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n                     otp = self.generate_otp(user.id)\n \n                     email_type = \"reset_password\"\n                     \n-                    subject = 'Everest Thrill O'\n+                    subject = 'Everest Thrill Password Reset OTP'\n                     if '@' in email:\n                         email = user.email\n                         sendPasswordResetMail(email, otp,subject,email_type,user)\n                     else:\n"
                },
                {
                    "date": 1725013903401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,9 +319,9 @@\n \n         class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n-                # Generate a random 6-digit OTP\n+                # Generate a random 5-digit OTP\n                 # return \"123456\"\n                 user = str(user)\n                 return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n             \n"
                },
                {
                    "date": 1725013931448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -320,9 +320,9 @@\n         class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n-                # return \"123456\"\n+                # return \"12345\"\n                 user = str(user)\n                 return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n             \n             serializer_class = PasswordNumberSerializer\n@@ -368,9 +368,9 @@\n                     'user': user,\n                     'verification_url': 'https://example.com/verify'\n                 }\n                 \n-                password_html_contents = render_to_string('forget_password_get_otp.html', context)\n+                password_html_contents = render_to_string('reset_password_otp.html', context)\n             \n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\"\n"
                },
                {
                    "date": 1725013988651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,23 +301,20 @@\n \n                 return Response({'detail': 'Email verification sent successfully'})\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-        def sendBookingConfirmationEMail(email, verify_url, subject, book):\n-            context = {\n-                'verification_url': verify_url,\n-                'book': book,\n-            }\n+def sendBookingConfirmationEMail(email, verify_url, subject, book):\n+    context = {\n+        'verification_url': verify_url,\n+        'book': book,\n+    \n+    html_content = render_to_string('booking_confirmation.html', context\n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+    \n \n-            html_content = render_to_string('booking_confirmation.html', context)\n-\n-            email_from = settings.EMAIL_HOST_USER\n-            recipient_list = [email]\n-            plain_message = \"\"\n-\n-            send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n-            \n-\n         class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725014009767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,8 +300,9 @@\n                 sendBookingConfirmationEMail(email, verify_url, subject, book)\n \n                 return Response({'detail': 'Email verification sent successfully'})\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+        \n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n"
                },
                {
                    "date": 1725014017212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n         'book': book,\n-    \n+    }\n     html_content = render_to_string('booking_confirmation.html', context\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\n"
                },
                {
                    "date": 1725014037826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n     context = {\n         'verification_url': verify_url,\n         'book': book,\n     }\n-    html_content = render_to_string('booking_confirmation.html', context\n+    html_content = render_to_string('booking_confirmation.html', context)\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n"
                },
                {
                    "date": 1725014049783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,13 +307,13 @@\n     context = {\n         'verification_url': verify_url,\n         'book': book,\n     }\n-    html_content = render_to_string('booking_confirmation.html', context)\n+    html_content = render_to_string('booking_confirmation.html', context\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content))\n     \n \n         class PasswordResetView(generics.GenericAPIView):\n \n"
                },
                {
                    "date": 1725014056295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n     html_content = render_to_string('booking_confirmation.html', context\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content))\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n     \n \n         class PasswordResetView(generics.GenericAPIView):\n \n"
                },
                {
                    "date": 1725014069944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,12 +307,12 @@\n     context = {\n         'verification_url': verify_url,\n         'book': book,\n     }\n-    html_content = render_to_string('booking_confirmation.html', context\n+    html_content = render_to_string('booking_confirmation.html', context)\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n-    plain_message = \"\n+    plain_message = \"\"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n     \n \n         class PasswordResetView(generics.GenericAPIView):\n"
                },
                {
                    "date": 1725014084063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n     plain_message = \"\"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n     \n \n-        class PasswordResetView(generics.GenericAPIView):\n+    class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n                 # return \"12345\"\n"
                },
                {
                    "date": 1725014120924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n                 # Send the confirmation email\n                 subject = 'Booking Verification Email'\n                 sendBookingConfirmationEMail(email, verify_url, subject, book)\n \n-                return Response({'detail': 'Email verification sent successfully'})\n+                return Response({'detail': 'Email for Booking confirmation verification sent successfully'})\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n         \n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n"
                },
                {
                    "date": 1725014390361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,375 @@\n+from django.shortcuts import render\n+from rest_framework import generics, status, viewsets, response\n+from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n+from accounts.models import CustomUser\n+from django.utils.http import urlsafe_base64_encode\n+from django.utils.encoding import force_bytes\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.urls import reverse\n+from django.conf import settings\n+from django.core.mail import send_mail\n+from django.contrib.auth.hashers import check_password\n+from django.template.loader import render_to_string\n+from booking.models import DestinationBook\n+\n+\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework_simplejwt.tokens import RefreshToken\n+from .sms_sender import SendSms,ContactMe\n+from django.db.models import Q\n+from django.core.cache import cache\n+\n+import random\n+import string\n+\n+otp_time_expired = 1200\n+site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n+\n+class EmailCheckView(generics.GenericAPIView):\n+\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return '987654'\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailNumberSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_password\"\n+            subject = 'lead-management OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(email, otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"password_reset_otp_{user.id}\"\n+        \n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": \"otp has been sent to your email address\"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+        \n+class EmailChangeGetOtpView(generics.GenericAPIView):\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return \"123456\"\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailChangeGetOtpSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_email\"\n+            subject = 'Pacific OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"email_reset_otp_{user.id}\"\n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+\n+class CustomPasswordResetView(generics.GenericAPIView):\n+    serializer_class = CustomPasswordResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n+        if serializer.validated_data.get('token_validate') == True:\n+            user.password = serializer.data.get('password')\n+            user.save()\n+            message = \"Password Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" password save \")\n+        else:\n+            message = \"Password Reset not Completed\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"password not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+\n+class EmailResetView(generics.GenericAPIView):\n+    serializer_class = EmailResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n+        if not check_password(serializer.data.get('password'),user.password):\n+            message = \"password does not match\"\n+            stat = status.HTTP_200_OK\n+        if serializer.validated_data.get('token_validate') == True:\n+            print(\"validate  data\")\n+            user.email = serializer.data.get('second_email')\n+            user.save()\n+            message = \"Email Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" Email Reset save \")\n+        else:\n+            message = \"Email Can Not reset\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"Email Reset not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+    \n+\n+class VerifyUserPasswordToken(generics.GenericAPIView):\n+    serializer_class = TokenValidationSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+        \n+        return response.Response(\n+            {\"message\": \"Your Token is Validate\",\n+             'data' : serializer.data,\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+\n+\n+class SendEmailVerificationLink(APIView):\n+    \n+    def post(self, request, *args, **kwargs):\n+        email = request.data.get('email')\n+        user = CustomUser.objects.filter(email=email).first()\n+\n+        try:\n+            user = CustomUser.objects.get(email=email)\n+        except CustomUser.DoesNotExist:\n+            return Response({\n+                'detail': 'User with this email does not exist.',\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n+        token = PasswordResetTokenGenerator().make_token(user)\n+\n+        # Send the token via email\n+        subject = 'Email Verification Token'\n+        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n+        subject = 'Email Verification Link '\n+        reset_verification = \"verification\"\n+        sendMail(email,verify_url,subject,reset_verification)\n+\n+        return Response({\n+            'detail': 'Email verification'})\n+\n+def sendMail(email, reset_url,subject,reset_verification):\n+    if reset_verification == \"verification\":\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n+                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    else:\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n+                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    html_contents = \"\"\"<!DOCTYPE html>\n+        <html lang=\"en\">\n+        <head>\n+            <meta charset=\"UTF-8\">\n+            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+            <title>Email Template</title>\n+            <style>\n+                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n+            </style>\n+        </head>\"\"\" + body\n+    \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n+\n+\n+class ContactmeView(generics.GenericAPIView):    \n+    serializer_class = ContactMeSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+\n+        email = serializer.data[\"email\"]\n+        subject = serializer.data.get('subject')\n+        full_name = serializer.data[\"full_name\"]\n+        message = serializer.data[\"message\"]\n+        phone = serializer.data.get(\"phone\")\n+        \n+        ContactMe(email,phone,full_name,subject,message)\n+           \n+        return response.Response(\n+            {\n+            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+     \n+    class SendEmailForBookingVerification(APIView):\n+        serializer_class = EmailNumberSerializer\n+\n+        def post(self, request, *args, **kwargs):\n+            serializer = self.serializer_class(data=request.data)\n+            if serializer.is_valid():\n+                email = serializer.validated_data[\"email\"]\n+                try:\n+                    book = DestinationBook.objects.get(email=email)\n+                    print(\"services\",book.services.service_name)\n+                except DestinationBook.DoesNotExist:\n+                    return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+                # Construct the verification URL\n+                site_url = 'https://example.com'  # Replace with your actual site URL\n+                verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+\n+                # Send the confirmation email\n+                subject = 'Booking Verification Email'\n+                sendBookingConfirmationEMail(email, verify_url, subject, book)\n+\n+                return Response({'detail': 'Email for Booking confirmation sent successfully'})\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+        \n+\n+def sendBookingConfirmationEMail(email, verify_url, subject, book):\n+    context = {\n+        'verification_url': verify_url,\n+        'book': book,\n+    }\n+    html_content = render_to_string('booking_confirmation.html', context)\n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+    \n+\n+    class PasswordResetView(generics.GenericAPIView):\n+\n+            def generate_otp(self,user):\n+                # Generate a random 5-digit OTP\n+                # return \"12345\"\n+                user = str(user)\n+                return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n+            \n+            serializer_class = PasswordNumberSerializer\n+            def post(self, request):\n+                serializer = self.serializer_class(data=request.data)\n+                serializer.is_valid(raise_exception=True)\n+                email = serializer.data[\"email\"]\n+                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+                if user:\n+                \n+                    otp = self.generate_otp(user.id)\n+\n+                    email_type = \"reset_password\"\n+                    \n+                    subject = 'Everest Thrill Password Reset OTP'\n+                    if '@' in email:\n+                        email = user.email\n+                        sendPasswordResetMail(email, otp,subject,email_type,user)\n+                    else:\n+                        SendSms(contact=email,otp=otp,message=subject)\n+                \n+                    cache_key = f\"password_reset_otp_{user.id}\"\n+                    cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+                    return response.Response(\n+                        {\n+                        \"message\":\"OTP has been sent to your email address\"\n+                        },\n+                        status=status.HTTP_200_OK,\n+                    )\n+                else:\n+                    return response.Response(\n+                        {\"message\": \"User doesn't exists\"},\n+                        status=status.HTTP_400_BAD_REQUEST,\n+                    )\n+\n+def sendPasswordResetMail(email, otp, subject, email_type, user):\n+    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n+            \n+    if email_type == \"reset_password\":  # Ensure this matches what is passed\n+                context = {\n+                    'otp': otp,\n+                    'user': user,\n+                    'verification_url': 'https://example.com/verify'\n+                }\n+                \n+                password_html_contents = render_to_string('reset_password_otp.html', context)\n+            \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725014589325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,418 +278,50 @@\n             status=status.HTTP_200_OK,\n         )\n      \n     class SendEmailForBookingVerification(APIView):\n-        serializer_class = EmailNumberSerializer\n-\n-        def post(self, request, *args, **kwargs):\n-            serializer = self.serializer_class(data=request.data)\n-            if serializer.is_valid():\n-                email = serializer.validated_data[\"email\"]\n-                try:\n-                    book = DestinationBook.objects.get(email=email)\n-                    print(\"services\",book.services.service_name)\n-                except DestinationBook.DoesNotExist:\n-                    return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-                # Construct the verification URL\n-                site_url = 'https://example.com'  # Replace with your actual site URL\n-                verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n-\n-                # Send the confirmation email\n-                subject = 'Booking Verification Email'\n-                sendBookingConfirmationEMail(email, verify_url, subject, book)\n-\n-                return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-        \n-\n-def sendBookingConfirmationEMail(email, verify_url, subject, book):\n-    context = {\n-        'verification_url': verify_url,\n-        'book': book,\n-    }\n-    html_content = render_to_string('booking_confirmation.html', context)\n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n-    \n-\n-    class PasswordResetView(generics.GenericAPIView):\n-\n-            def generate_otp(self,user):\n-                # Generate a random 5-digit OTP\n-                # return \"12345\"\n-                user = str(user)\n-                return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n-            \n-            serializer_class = PasswordNumberSerializer\n-            def post(self, request):\n-                serializer = self.serializer_class(data=request.data)\n-                serializer.is_valid(raise_exception=True)\n-                email = serializer.data[\"email\"]\n-                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-                if user:\n-                \n-                    otp = self.generate_otp(user.id)\n-\n-                    email_type = \"reset_password\"\n-                    \n-                    subject = 'Everest Thrill Password Reset OTP'\n-                    if '@' in email:\n-                        email = user.email\n-                        sendPasswordResetMail(email, otp,subject,email_type,user)\n-                    else:\n-                        SendSms(contact=email,otp=otp,message=subject)\n-                \n-                    cache_key = f\"password_reset_otp_{user.id}\"\n-                    cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-                    return response.Response(\n-                        {\n-                        \"message\":\"OTP has been sent to your email address\"\n-                        },\n-                        status=status.HTTP_200_OK,\n-                    )\n-                else:\n-                    return response.Response(\n-                        {\"message\": \"User doesn't exists\"},\n-                        status=status.HTTP_400_BAD_REQUEST,\n-                    )\n-\n-def sendPasswordResetMail(email, otp, subject, email_type, user):\n-    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-            \n-    if email_type == \"reset_password\":  # Ensure this matches what is passed\n-                context = {\n-                    'otp': otp,\n-                    'user': user,\n-                    'verification_url': 'https://example.com/verify'\n-                }\n-                \n-                password_html_contents = render_to_string('reset_password_otp.html', context)\n-            \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n-from django.shortcuts import render\n-from rest_framework import generics, status, viewsets, response\n-from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n-from accounts.models import CustomUser\n-from django.utils.http import urlsafe_base64_encode\n-from django.utils.encoding import force_bytes\n-from django.contrib.auth.tokens import PasswordResetTokenGenerator\n-from django.urls import reverse\n-from django.conf import settings\n-from django.core.mail import send_mail\n-from django.contrib.auth.hashers import check_password\n-from django.template.loader import render_to_string\n-from booking.models import DestinationBook\n-\n-\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework_simplejwt.tokens import RefreshToken\n-from .sms_sender import SendSms,ContactMe\n-from django.db.models import Q\n-from django.core.cache import cache\n-\n-import random\n-import string\n-\n-otp_time_expired = 1200\n-site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n-\n-class EmailCheckView(generics.GenericAPIView):\n-\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return '987654'\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n     serializer_class = EmailNumberSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n \n-            reset_verification = \"reset_password\"\n-            subject = 'lead-management OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(email, otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"password_reset_otp_{user.id}\"\n-        \n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": \"otp has been sent to your email address\"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-        \n-class EmailChangeGetOtpView(generics.GenericAPIView):\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return \"123456\"\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailChangeGetOtpSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_email\"\n-            subject = 'Pacific OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"email_reset_otp_{user.id}\"\n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-\n-class CustomPasswordResetView(generics.GenericAPIView):\n-    serializer_class = CustomPasswordResetSerializer\n-    \n     def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n-        if serializer.validated_data.get('token_validate') == True:\n-            user.password = serializer.data.get('password')\n-            user.save()\n-            message = \"Password Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" password save \")\n-        else:\n-            message = \"Password Reset not Completed\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"password not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-\n-class EmailResetView(generics.GenericAPIView):\n-    serializer_class = EmailResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n-        if not check_password(serializer.data.get('password'),user.password):\n-            message = \"password does not match\"\n-            stat = status.HTTP_200_OK\n-        if serializer.validated_data.get('token_validate') == True:\n-            print(\"validate  data\")\n-            user.email = serializer.data.get('second_email')\n-            user.save()\n-            message = \"Email Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" Email Reset save \")\n-        else:\n-            message = \"Email Can Not reset\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"Email Reset not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-    \n-\n-class VerifyUserPasswordToken(generics.GenericAPIView):\n-    serializer_class = TokenValidationSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-        \n-        return response.Response(\n-            {\"message\": \"Your Token is Validate\",\n-             'data' : serializer.data,\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-\n-\n-class SendEmailVerificationLink(APIView):\n-    \n-    def post(self, request, *args, **kwargs):\n-        email = request.data.get('email')\n-        user = CustomUser.objects.filter(email=email).first()\n-\n-        try:\n-            user = CustomUser.objects.get(email=email)\n-        except CustomUser.DoesNotExist:\n-            return Response({\n-                'detail': 'User with this email does not exist.',\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n-        token = PasswordResetTokenGenerator().make_token(user)\n-\n-        # Send the token via email\n-        subject = 'Email Verification Token'\n-        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n-        subject = 'Email Verification Link '\n-        reset_verification = \"verification\"\n-        sendMail(email,verify_url,subject,reset_verification)\n-\n-        return Response({\n-            'detail': 'Email verification'})\n-\n-def sendMail(email, reset_url,subject,reset_verification):\n-    if reset_verification == \"verification\":\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n-                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    else:\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n-                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    html_contents = \"\"\"<!DOCTYPE html>\n-        <html lang=\"en\">\n-        <head>\n-            <meta charset=\"UTF-8\">\n-            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-            <title>Email Template</title>\n-            <style>\n-                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n-            </style>\n-        </head>\"\"\" + body\n-    \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n-\n-\n-class ContactmeView(generics.GenericAPIView):    \n-    serializer_class = ContactMeSerializer\n-    def post(self, request):\n         serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = DestinationBook.objects.get(email=email)\n+                print(\"services\", book.services.service_name)  # Assuming `services` is a ForeignKey\n \n-        email = serializer.data[\"email\"]\n-        subject = serializer.data.get('subject')\n-        full_name = serializer.data[\"full_name\"]\n-        message = serializer.data[\"message\"]\n-        phone = serializer.data.get(\"phone\")\n-        \n-        ContactMe(email,phone,full_name,subject,message)\n-           \n-        return response.Response(\n-            {\n-            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-     \n-    class SendEmailForBookingVerification(APIView):\n-        serializer_class = EmailNumberSerializer\n+            except DestinationBook.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        def post(self, request, *args, **kwargs):\n-            serializer = self.serializer_class(data=request.data)\n-            if serializer.is_valid():\n-                email = serializer.validated_data[\"email\"]\n-                try:\n-                    book = DestinationBook.objects.get(email=email)\n-                    print(\"services\",book.services.service_name)\n-                except DestinationBook.DoesNotExist:\n-                    return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+            # Construct the verification URL\n+            site_url = 'https://example.com'  # Replace with your actual site URL\n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-                # Construct the verification URL\n-                site_url = 'https://example.com'  # Replace with your actual site URL\n-                verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            sendBookingConfirmationEMail(email, verify_url, subject, book)\n \n-                # Send the confirmation email\n-                subject = 'Booking Verification Email'\n-                sendBookingConfirmationEMail(email, verify_url, subject, book)\n-\n-                return Response({'detail': 'Email for Booking confirmation verification sent successfully'})\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n-        'book': book,\n+        'recipient_name': 'Admin',  # Or the actual name of the admin or recipient\n+        'contact': book.phone_number,  # Assuming `phone_number` is a field in `DestinationBook`\n+        'activity': book.activity.name,  # Assuming `activity` is a ForeignKey to an `Activity` model\n+        'package': book.package.name,  # Assuming `package` is a ForeignKey to a `Package` model\n+        'destination': book.destination.destination_title,  # Assuming `destination` is a ForeignKey to a `Destination` model\n+        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  # Format date as required\n+        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  # Format date as required\n+        'preferred_service_type': book.service_type,  # Assuming `service_type` is a field in `DestinationBook`\n     }\n-    html_content = render_to_string('booking_confirmation.html', context)\n+    html_content = render_to_string('booking_notification_email.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n-    \n \n     class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n"
                },
                {
                    "date": 1725014602572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,32 +278,32 @@\n             status=status.HTTP_200_OK,\n         )\n      \n     class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n+        serializer_class = EmailNumberSerializer\n \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = DestinationBook.objects.get(email=email)\n-                print(\"services\", book.services.service_name)  # Assuming `services` is a ForeignKey\n+        def post(self, request, *args, **kwargs):\n+            serializer = self.serializer_class(data=request.data)\n+            if serializer.is_valid():\n+                email = serializer.validated_data[\"email\"]\n+                try:\n+                    book = DestinationBook.objects.get(email=email)\n+                    print(\"services\", book.services.service_name)  # Assuming `services` is a ForeignKey\n \n-            except DestinationBook.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+                except DestinationBook.DoesNotExist:\n+                    return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n-            # Construct the verification URL\n-            site_url = 'https://example.com'  # Replace with your actual site URL\n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+                # Construct the verification URL\n+                site_url = 'https://example.com'  # Replace with your actual site URL\n+                verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book)\n+                # Send the confirmation email\n+                subject = 'Booking Verification Email'\n+                sendBookingConfirmationEMail(email, verify_url, subject, book)\n \n-            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-        \n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+                return Response({'detail': 'Email for Booking confirmation sent successfully'})\n+            \n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n"
                },
                {
                    "date": 1725014612043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n-        'recipient_name': 'Admin',  # Or the actual name of the admin or recipient\n+        'recipient_name': 'Admin',  \n         'contact': book.phone_number,  # Assuming `phone_number` is a field in `DestinationBook`\n         'activity': book.activity.name,  # Assuming `activity` is a ForeignKey to an `Activity` model\n         'package': book.package.name,  # Assuming `package` is a ForeignKey to a `Package` model\n         'destination': book.destination.destination_title,  # Assuming `destination` is a ForeignKey to a `Destination` model\n"
                },
                {
                    "date": 1725014617569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,10 +307,10 @@\n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n         'recipient_name': 'Admin',  \n-        'contact': book.phone_number,  # Assuming `phone_number` is a field in `DestinationBook`\n-        'activity': book.activity.name,  # Assuming `activity` is a ForeignKey to an `Activity` model\n+        'contact': book.phone_number, \n+        'activity': book.activity.name,  \n         'package': book.package.name,  # Assuming `package` is a ForeignKey to a `Package` model\n         'destination': book.destination.destination_title,  # Assuming `destination` is a ForeignKey to a `Destination` model\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  # Format date as required\n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  # Format date as required\n"
                },
                {
                    "date": 1725014623576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,10 +309,10 @@\n         'verification_url': verify_url,\n         'recipient_name': 'Admin',  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n-        'package': book.package.name,  # Assuming `package` is a ForeignKey to a `Package` model\n-        'destination': book.destination.destination_title,  # Assuming `destination` is a ForeignKey to a `Destination` model\n+        'package': book.package.name,  \n+        'destination': book.destination.destination_title,  \n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  # Format date as required\n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  # Format date as required\n         'preferred_service_type': book.service_type,  # Assuming `service_type` is a field in `DestinationBook`\n     }\n"
                },
                {
                    "date": 1725014629055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,10 +311,10 @@\n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n-        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  # Format date as required\n-        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  # Format date as required\n+        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n+        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type,  # Assuming `service_type` is a field in `DestinationBook`\n     }\n     html_content = render_to_string('booking_notification_email.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n"
                },
                {
                    "date": 1725014650215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.service_type,  # Assuming `service_type` is a field in `DestinationBook`\n+        'preferred_service_type': book.service_type, \n     }\n     html_content = render_to_string('booking_notification_email.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n"
                },
                {
                    "date": 1725014678773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n-        'recipient_name': 'Admin',  \n+        'recipient_name': 'full_name',  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n"
                },
                {
                    "date": 1725014684896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n-        'recipient_name': 'full_name',  \n+        'recipient_name': 'book.full_name',  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n"
                },
                {
                    "date": 1725167712753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n             if serializer.is_valid():\n                 email = serializer.validated_data[\"email\"]\n                 try:\n                     book = DestinationBook.objects.get(email=email)\n-                    print(\"services\", book.services.service_name)  # Assuming `services` is a ForeignKey\n+                    print(\"services\", book.services.service_name) \n \n                 except DestinationBook.DoesNotExist:\n                     return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n@@ -306,9 +306,9 @@\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n         'verification_url': verify_url,\n-        'recipient_name': 'book.full_name',  \n+        'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n"
                },
                {
                    "date": 1725167873626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,9 +305,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book):\n     context = {\n-        'verification_url': verify_url,\n+        # 'verification_url': verify_url,\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n"
                },
                {
                    "date": 1725167959924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -321,9 +321,9 @@\n     recipient_list = [email]\n     plain_message = \"\"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n \n-    class PasswordResetView(generics.GenericAPIView):\n+class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n                 # return \"12345\"\n"
                },
                {
                    "date": 1725168074610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-    class SendEmailForBookingVerification(APIView):\n+class SendEmailForBookingVerification(APIView):\n         serializer_class = EmailNumberSerializer\n \n         def post(self, request, *args, **kwargs):\n             serializer = self.serializer_class(data=request.data)\n"
                },
                {
                    "date": 1725173751843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -313,9 +313,9 @@\n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.service_type, \n+        'preferred_service_type': book.serservice_type, \n     }\n     html_content = render_to_string('booking_notification_email.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n"
                },
                {
                    "date": 1725173809138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,9 @@\n             if serializer.is_valid():\n                 email = serializer.validated_data[\"email\"]\n                 try:\n                     book = DestinationBook.objects.get(email=email)\n-                    print(\"services\", book.services.service_name) \n+                    \n \n                 except DestinationBook.DoesNotExist:\n                     return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n@@ -313,9 +313,9 @@\n         'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.serservice_type, \n+        'preferred_service_type': book.service_type, \n     }\n     html_content = render_to_string('booking_notification_email.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n"
                },
                {
                    "date": 1725173869208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,9 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n-    html_content = render_to_string('booking_notification_email.html', context)  # Template path\n+    html_content = render_to_string('booking_confirmation.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n"
                },
                {
                    "date": 1725177368918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n                 # return \"12345\"\n                 user = str(user)\n-                return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n+                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n             \n             serializer_class = PasswordNumberSerializer\n             def post(self, request):\n                 serializer = self.serializer_class(data=request.data)\n"
                },
                {
                    "date": 1725251965883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -278,36 +278,35 @@\n             status=status.HTTP_200_OK,\n         )\n      \n class SendEmailForBookingVerification(APIView):\n-        serializer_class = EmailNumberSerializer\n+    serializer_class = EmailNumberSerializer\n \n-        def post(self, request, *args, **kwargs):\n-            serializer = self.serializer_class(data=request.data)\n-            if serializer.is_valid():\n-                email = serializer.validated_data[\"email\"]\n-                try:\n-                    book = DestinationBook.objects.get(email=email)\n-                    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = DestinationBook.objects.get(email=email)\n \n-                except DestinationBook.DoesNotExist:\n-                    return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+            except DestinationBook.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n-                # Construct the verification URL\n-                site_url = 'https://example.com'  # Replace with your actual site URL\n-                verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+            # Construct the verification URL\n+            site_url = 'https://example.com'  # Replace with your actual site URL\n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-                # Send the confirmation email\n-                subject = 'Booking Verification Email'\n-                sendBookingConfirmationEMail(email, verify_url, subject, book)\n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            admin_email = 'admin@example.com'  # Replace with actual admin email\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email)\n \n-                return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-            \n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n+        \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-def sendBookingConfirmationEMail(email, verify_url, subject, book):\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email):\n     context = {\n-        # 'verification_url': verify_url,\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n@@ -317,12 +316,23 @@\n         'preferred_service_type': book.service_type, \n     }\n     html_content = render_to_string('booking_confirmation.html', context)  # Template path\n     email_from = settings.EMAIL_HOST_USER\n+\n+    # Send email to the customer\n     recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n+    send_mail(subject, '', email_from, recipient_list, html_message=html_content)\n \n+    # Send email to the admin\n+    admin_subject = f\"New Booking Verification for {book.full_name}\"\n+    admin_context = context.copy()\n+    admin_context['verification_url'] = verify_url\n+    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)  # Admin template path\n+\n+    admin_recipient_list = [admin_email]\n+    send_mail(admin_subject, '', email_from, admin_recipient_list, html_message=admin_html_content)\n+\n+\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725253461547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-class SendEmailForBookingVerification(APIView):\n+zclass SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n         serializer = self.serializer_class(data=request.data)\n"
                },
                {
                    "date": 1725253705162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-zclass SendEmailForBookingVerification(APIView):\n+class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n         serializer = self.serializer_class(data=request.data)\n@@ -315,24 +315,27 @@\n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n     html_content = render_to_string('booking_confirmation.html', context)  # Template path\n-    email_from = settings.EMAIL_HOST_USER\n \n+    # Specify the custom \"from\" email address\n+    from_email = 'Everest Thrills <noreply@everestthrills.com>'\n+\n     # Send email to the customer\n     recipient_list = [email]\n-    send_mail(subject, '', email_from, recipient_list, html_message=html_content)\n+    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n     # Send email to the admin\n     admin_subject = f\"New Booking Verification for {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)  # Admin template path\n \n     admin_recipient_list = [admin_email]\n-    send_mail(admin_subject, '', email_from, admin_recipient_list, html_message=admin_html_content)\n+    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n \n+\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725253755945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n from booking.models import DestinationBook\n+from accounts.models\n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1725253790682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n from booking.models import DestinationBook\n-from accounts.models\n+from accounts.models import CustomUser\n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n@@ -278,8 +278,10 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n+from django.contrib.auth.models import User\n+\n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n@@ -295,11 +297,18 @@\n             # Construct the verification URL\n             site_url = 'https://example.com'  # Replace with your actual site URL\n             verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n+            # Fetch the admin email from the User model\n+            admin_user = User.objects.filter(is_superuser=True).first()  # Assuming the admin is a superuser\n+            if admin_user:\n+                admin_email = admin_user.email\n+                print(f\"Admin email to send from: {admin_email}\")  # Debug statement\n+            else:\n+                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n             # Send the confirmation email\n             subject = 'Booking Verification Email'\n-            admin_email = 'admin@example.com'  # Replace with actual admin email\n             sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email)\n \n             return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n@@ -317,10 +326,10 @@\n         'preferred_service_type': book.service_type, \n     }\n     html_content = render_to_string('booking_confirmation.html', context)  # Template path\n \n-    # Specify the custom \"from\" email address\n-    from_email = 'Everest Thrills <noreply@everestthrills.com>'\n+    # Use the admin's email as the \"from\" email address\n+    from_email = f'Everest Thrills <{admin_email}>'\n \n     # Send email to the customer\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n@@ -335,8 +344,9 @@\n     send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n \n \n+\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725253807124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n             except DestinationBook.DoesNotExist:\n                 return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n             # Construct the verification URL\n-            site_url = 'https://example.com'  # Replace with your actual site URL\n+            site_url = 'https://example.com'  \n             verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()  # Assuming the admin is a superuser\n"
                },
                {
                    "date": 1725253819422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n             site_url = 'https://example.com'  \n             verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n             # Fetch the admin email from the User model\n-            admin_user = User.objects.filter(is_superuser=True).first()  # Assuming the admin is a superuser\n+            admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n                 admin_email = admin_user.email\n                 print(f\"Admin email to send from: {admin_email}\")  # Debug statement\n             else:\n"
                },
                {
                    "date": 1725254191459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,9 +301,9 @@\n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n                 admin_email = admin_user.email\n-                print(f\"Admin email to send from: {admin_email}\")  # Debug statement\n+                print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n             # Send the confirmation email\n@@ -327,9 +327,9 @@\n     }\n     html_content = render_to_string('booking_confirmation.html', context)  # Template path\n \n     # Use the admin's email as the \"from\" email address\n-    from_email = f'Everest Thrills <{admin_email}>'\n+    from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n     # Send email to the customer\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n"
                },
                {
                    "date": 1725254204172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,9 +337,9 @@\n     # Send email to the admin\n     admin_subject = f\"New Booking Verification for {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n-    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)  # Admin template path\n+    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n     admin_recipient_list = [admin_email]\n     send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n"
                },
                {
                    "date": 1725254272288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,8 +300,9 @@\n \n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n+                admin_name = \n                 admin_email = admin_user.email\n                 print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                },
                {
                    "date": 1725254278786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n \n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n-                admin_name = \n+                admin_name = admin_user\n                 admin_email = admin_user.email\n                 print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                },
                {
                    "date": 1725254284447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n \n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n-                admin_name = admin_user\n+                admin_name = admin_user.full_name\n                 admin_email = admin_user.email\n                 print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                },
                {
                    "date": 1725254293321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n \n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n-                admin_name = admin_user.full_name\n+                admin_name = admin_user.get_full_name\n                 admin_email = admin_user.email\n                 print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                },
                {
                    "date": 1725254308635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n             # Send the confirmation email\n             subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email)\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n \n             return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1725254315259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,9 +314,9 @@\n             return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email):\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n"
                },
                {
                    "date": 1725254320980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,8 +316,9 @@\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n+        'admin'\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n"
                },
                {
                    "date": 1725254328437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n-        'admin'\n+        'admin_name': \n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n"
                },
                {
                    "date": 1725254333653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n-        'admin_name': \n+        'admin_name': admin_name\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n"
                },
                {
                    "date": 1725254354109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,9 +316,9 @@\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n-        'admin_name': admin_name\n+        'admin_name': admin_name,\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n@@ -326,8 +326,9 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n+    print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  # Template path\n \n     # Use the admin's email as the \"from\" email address\n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n"
                },
                {
                    "date": 1725254362266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n     print(context)\n-    html_content = render_to_string('booking_confirmation.html', context)  # Template path\n+    html_content = render_to_string('booking_confirmation.html', context)  \n \n     # Use the admin's email as the \"from\" email address\n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n"
                },
                {
                    "date": 1725254395617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,9 +300,9 @@\n \n             # Fetch the admin email from the User model\n             admin_user = User.objects.filter(is_superuser=True).first()\n             if admin_user:\n-                admin_name = admin_user.get_full_name\n+                admin_name = admin_user.first_name\n                 admin_email = admin_user.email\n                 print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                },
                {
                    "date": 1725254412824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,9 +329,9 @@\n     }\n     print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n-    # Use the admin's email as the \"from\" email address\n+    \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n     # Send email to the customer\n     recipient_list = [email]\n"
                },
                {
                    "date": 1725254581603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,17 +329,16 @@\n     }\n     print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n-    \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n     # Send email to the customer\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n     # Send email to the admin\n-    admin_subject = f\"New Booking Verification for {book.full_name}\"\n+    admin_subject = f\"New Trip Booking Verification for {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n"
                },
                {
                    "date": 1725254588017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n     # Send email to the admin\n-    admin_subject = f\"New Trip Booking Verification for {book.full_name}\"\n+    admin_subject = f\"New Trip Booking Notification for {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n"
                },
                {
                    "date": 1725254593254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n     # Send email to the admin\n-    admin_subject = f\"New Trip Booking Notification for {book.full_name}\"\n+    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n"
                },
                {
                    "date": 1725254849458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n from django.core.mail import send_mail\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n from booking.models import DestinationBook\n-from accounts.models import CustomUser\n \n \n from rest_framework.views import APIView\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1725254863428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,407 @@\n+from django.shortcuts import render\n+from rest_framework import generics, status, viewsets, response\n+from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n+from accounts.models import CustomUser\n+from django.utils.http import urlsafe_base64_encode\n+from django.utils.encoding import force_bytes\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.urls import reverse\n+from django.conf import settings\n+from django.core.mail import send_mail\n+from django.contrib.auth.hashers import check_password\n+from django.template.loader import render_to_string\n+from booking.models import DestinationBook\n+\n+\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework_simplejwt.tokens import RefreshToken\n+from .sms_sender import SendSms,ContactMe\n+from django.db.models import Q\n+from django.core.cache import cache\n+\n+import random\n+import string\n+\n+otp_time_expired = 1200\n+site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n+\n+class EmailCheckView(generics.GenericAPIView):\n+\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return '987654'\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailNumberSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_password\"\n+            subject = 'lead-management OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(email, otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"password_reset_otp_{user.id}\"\n+        \n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": \"otp has been sent to your email address\"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+        \n+class EmailChangeGetOtpView(generics.GenericAPIView):\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return \"123456\"\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailChangeGetOtpSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_email\"\n+            subject = 'Pacific OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"email_reset_otp_{user.id}\"\n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+\n+class CustomPasswordResetView(generics.GenericAPIView):\n+    serializer_class = CustomPasswordResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n+        if serializer.validated_data.get('token_validate') == True:\n+            user.password = serializer.data.get('password')\n+            user.save()\n+            message = \"Password Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" password save \")\n+        else:\n+            message = \"Password Reset not Completed\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"password not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+\n+class EmailResetView(generics.GenericAPIView):\n+    serializer_class = EmailResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n+        if not check_password(serializer.data.get('password'),user.password):\n+            message = \"password does not match\"\n+            stat = status.HTTP_200_OK\n+        if serializer.validated_data.get('token_validate') == True:\n+            print(\"validate  data\")\n+            user.email = serializer.data.get('second_email')\n+            user.save()\n+            message = \"Email Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" Email Reset save \")\n+        else:\n+            message = \"Email Can Not reset\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"Email Reset not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+    \n+\n+class VerifyUserPasswordToken(generics.GenericAPIView):\n+    serializer_class = TokenValidationSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+        \n+        return response.Response(\n+            {\"message\": \"Your Token is Validate\",\n+             'data' : serializer.data,\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+\n+\n+class SendEmailVerificationLink(APIView):\n+    \n+    def post(self, request, *args, **kwargs):\n+        email = request.data.get('email')\n+        user = CustomUser.objects.filter(email=email).first()\n+\n+        try:\n+            user = CustomUser.objects.get(email=email)\n+        except CustomUser.DoesNotExist:\n+            return Response({\n+                'detail': 'User with this email does not exist.',\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n+        token = PasswordResetTokenGenerator().make_token(user)\n+\n+        # Send the token via email\n+        subject = 'Email Verification Token'\n+        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n+        subject = 'Email Verification Link '\n+        reset_verification = \"verification\"\n+        sendMail(email,verify_url,subject,reset_verification)\n+\n+        return Response({\n+            'detail': 'Email verification'})\n+\n+def sendMail(email, reset_url,subject,reset_verification):\n+    if reset_verification == \"verification\":\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n+                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    else:\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n+                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    html_contents = \"\"\"<!DOCTYPE html>\n+        <html lang=\"en\">\n+        <head>\n+            <meta charset=\"UTF-8\">\n+            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+            <title>Email Template</title>\n+            <style>\n+                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n+            </style>\n+        </head>\"\"\" + body\n+    \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n+\n+\n+class ContactmeView(generics.GenericAPIView):    \n+    serializer_class = ContactMeSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+\n+        email = serializer.data[\"email\"]\n+        subject = serializer.data.get('subject')\n+        full_name = serializer.data[\"full_name\"]\n+        message = serializer.data[\"message\"]\n+        phone = serializer.data.get(\"phone\")\n+        \n+        ContactMe(email,phone,full_name,subject,message)\n+           \n+        return response.Response(\n+            {\n+            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+     \n+from django.contrib.auth.models import User\n+\n+class SendEmailForBookingVerification(APIView):\n+    serializer_class = EmailNumberSerializer\n+\n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = DestinationBook.objects.get(email=email)\n+\n+            except DestinationBook.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Construct the verification URL\n+            site_url = 'https://example.com'  \n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+\n+            # Fetch the admin email from the User model\n+            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+            if admin_user:\n+                admin_name = admin_user.first_name\n+                admin_email = admin_user.email\n+                print(f\"Admin email to send from: {admin_email}\")  \n+            else:\n+                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n+\n+            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n+        \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n+    context = {\n+        'admin_name': admin_name,\n+        'recipient_name': book.full_name,  \n+        'contact': book.phone_number, \n+        'activity': book.activity.name,  \n+        'package': book.package.name,  \n+        'destination': book.destination.destination_title,  \n+        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n+        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n+        'preferred_service_type': book.service_type, \n+    }\n+    print(context)\n+    html_content = render_to_string('booking_confirmation.html', context)  \n+\n+    from_email = f'Everest Thrills <noreply@everestthrills.com>'\n+\n+    # Send email to the customer\n+    recipient_list = [email]\n+    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n+\n+    # Send email to the admin\n+    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n+    admin_context = context.copy()\n+    admin_context['verification_url'] = verify_url\n+    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n+\n+    admin_recipient_list = [admin_email]\n+    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n+\n+\n+\n+\n+class PasswordResetView(generics.GenericAPIView):\n+\n+            def generate_otp(self,user):\n+                # Generate a random 5-digit OTP\n+                # return \"12345\"\n+                user = str(user)\n+                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+            \n+            serializer_class = PasswordNumberSerializer\n+            def post(self, request):\n+                serializer = self.serializer_class(data=request.data)\n+                serializer.is_valid(raise_exception=True)\n+                email = serializer.data[\"email\"]\n+                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+                if user:\n+                \n+                    otp = self.generate_otp(user.id)\n+\n+                    email_type = \"reset_password\"\n+                    \n+                    subject = 'Everest Thrill Password Reset OTP'\n+                    if '@' in email:\n+                        email = user.email\n+                        sendPasswordResetMail(email, otp,subject,email_type,user)\n+                    else:\n+                        SendSms(contact=email,otp=otp,message=subject)\n+                \n+                    cache_key = f\"password_reset_otp_{user.id}\"\n+                    cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+                    return response.Response(\n+                        {\n+                        \"message\":\"OTP has been sent to your email address\"\n+                        },\n+                        status=status.HTTP_200_OK,\n+                    )\n+                else:\n+                    return response.Response(\n+                        {\"message\": \"User doesn't exists\"},\n+                        status=status.HTTP_400_BAD_REQUEST,\n+                    )\n+\n+def sendPasswordResetMail(email, otp, subject, email_type, user):\n+    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n+            \n+    if email_type == \"reset_password\":  # Ensure this matches what is passed\n+                context = {\n+                    'otp': otp,\n+                    'user': user,\n+                    'verification_url': 'https://example.com/verify'\n+                }\n+                \n+                password_html_contents = render_to_string('reset_password_otp.html', context)\n+            \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725254995994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,8 +279,10 @@\n         )\n      \n from django.contrib.auth.models import User\n \n+from django.contrib.auth.models import User  # Or import CustomUser if you're using a custom user model\n+\n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n@@ -296,28 +298,27 @@\n             # Construct the verification URL\n             site_url = 'https://example.com'  \n             verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-            # Fetch the admin email from the User model\n-            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n-            if admin_user:\n-                admin_name = admin_user.first_name\n-                admin_email = admin_user.email\n-                print(f\"Admin email to send from: {admin_email}\")  \n+            # Fetch all admin emails from the User model\n+            admin_users = CustomUser.objects.filter(is_superuser=True)\n+            if admin_users.exists():\n+                admin_emails = [user.email for user in admin_users]\n+                admin_names = [user.first_name for user in admin_users]\n+                print(f\"Admin emails to send from: {admin_emails}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n             # Send the confirmation email\n             subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_emails, admin_names)\n \n             return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_emails, admin_names):\n     context = {\n-        'admin_name': admin_name,\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n@@ -334,427 +335,21 @@\n     # Send email to the customer\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n-    # Send email to the admin\n+    # Send email to all admins\n     admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n-    admin_recipient_list = [admin_email]\n+    admin_recipient_list = admin_emails  # Send email to all admin emails\n     send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n \n \n \n-class PasswordResetView(generics.GenericAPIView):\n \n-            def generate_otp(self,user):\n-                # Generate a random 5-digit OTP\n-                # return \"12345\"\n-                user = str(user)\n-                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-            \n-            serializer_class = PasswordNumberSerializer\n-            def post(self, request):\n-                serializer = self.serializer_class(data=request.data)\n-                serializer.is_valid(raise_exception=True)\n-                email = serializer.data[\"email\"]\n-                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-                if user:\n-                \n-                    otp = self.generate_otp(user.id)\n-\n-                    email_type = \"reset_password\"\n-                    \n-                    subject = 'Everest Thrill Password Reset OTP'\n-                    if '@' in email:\n-                        email = user.email\n-                        sendPasswordResetMail(email, otp,subject,email_type,user)\n-                    else:\n-                        SendSms(contact=email,otp=otp,message=subject)\n-                \n-                    cache_key = f\"password_reset_otp_{user.id}\"\n-                    cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-                    return response.Response(\n-                        {\n-                        \"message\":\"OTP has been sent to your email address\"\n-                        },\n-                        status=status.HTTP_200_OK,\n-                    )\n-                else:\n-                    return response.Response(\n-                        {\"message\": \"User doesn't exists\"},\n-                        status=status.HTTP_400_BAD_REQUEST,\n-                    )\n-\n-def sendPasswordResetMail(email, otp, subject, email_type, user):\n-    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-            \n-    if email_type == \"reset_password\":  # Ensure this matches what is passed\n-                context = {\n-                    'otp': otp,\n-                    'user': user,\n-                    'verification_url': 'https://example.com/verify'\n-                }\n-                \n-                password_html_contents = render_to_string('reset_password_otp.html', context)\n-            \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n-from django.shortcuts import render\n-from rest_framework import generics, status, viewsets, response\n-from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n-from accounts.models import CustomUser\n-from django.utils.http import urlsafe_base64_encode\n-from django.utils.encoding import force_bytes\n-from django.contrib.auth.tokens import PasswordResetTokenGenerator\n-from django.urls import reverse\n-from django.conf import settings\n-from django.core.mail import send_mail\n-from django.contrib.auth.hashers import check_password\n-from django.template.loader import render_to_string\n-from booking.models import DestinationBook\n-\n-\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework_simplejwt.tokens import RefreshToken\n-from .sms_sender import SendSms,ContactMe\n-from django.db.models import Q\n-from django.core.cache import cache\n-\n-import random\n-import string\n-\n-otp_time_expired = 1200\n-site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n-\n-class EmailCheckView(generics.GenericAPIView):\n-\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return '987654'\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailNumberSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_password\"\n-            subject = 'lead-management OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(email, otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"password_reset_otp_{user.id}\"\n-        \n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": \"otp has been sent to your email address\"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-        \n-class EmailChangeGetOtpView(generics.GenericAPIView):\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return \"123456\"\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailChangeGetOtpSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_email\"\n-            subject = 'Pacific OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"email_reset_otp_{user.id}\"\n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-\n-class CustomPasswordResetView(generics.GenericAPIView):\n-    serializer_class = CustomPasswordResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n-        if serializer.validated_data.get('token_validate') == True:\n-            user.password = serializer.data.get('password')\n-            user.save()\n-            message = \"Password Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" password save \")\n-        else:\n-            message = \"Password Reset not Completed\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"password not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-\n-class EmailResetView(generics.GenericAPIView):\n-    serializer_class = EmailResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n-        if not check_password(serializer.data.get('password'),user.password):\n-            message = \"password does not match\"\n-            stat = status.HTTP_200_OK\n-        if serializer.validated_data.get('token_validate') == True:\n-            print(\"validate  data\")\n-            user.email = serializer.data.get('second_email')\n-            user.save()\n-            message = \"Email Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" Email Reset save \")\n-        else:\n-            message = \"Email Can Not reset\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"Email Reset not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-    \n-\n-class VerifyUserPasswordToken(generics.GenericAPIView):\n-    serializer_class = TokenValidationSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-        \n-        return response.Response(\n-            {\"message\": \"Your Token is Validate\",\n-             'data' : serializer.data,\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-\n-\n-class SendEmailVerificationLink(APIView):\n-    \n-    def post(self, request, *args, **kwargs):\n-        email = request.data.get('email')\n-        user = CustomUser.objects.filter(email=email).first()\n-\n-        try:\n-            user = CustomUser.objects.get(email=email)\n-        except CustomUser.DoesNotExist:\n-            return Response({\n-                'detail': 'User with this email does not exist.',\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n-        token = PasswordResetTokenGenerator().make_token(user)\n-\n-        # Send the token via email\n-        subject = 'Email Verification Token'\n-        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n-        subject = 'Email Verification Link '\n-        reset_verification = \"verification\"\n-        sendMail(email,verify_url,subject,reset_verification)\n-\n-        return Response({\n-            'detail': 'Email verification'})\n-\n-def sendMail(email, reset_url,subject,reset_verification):\n-    if reset_verification == \"verification\":\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n-                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    else:\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n-                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    html_contents = \"\"\"<!DOCTYPE html>\n-        <html lang=\"en\">\n-        <head>\n-            <meta charset=\"UTF-8\">\n-            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-            <title>Email Template</title>\n-            <style>\n-                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n-            </style>\n-        </head>\"\"\" + body\n-    \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n-\n-\n-class ContactmeView(generics.GenericAPIView):    \n-    serializer_class = ContactMeSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-\n-        email = serializer.data[\"email\"]\n-        subject = serializer.data.get('subject')\n-        full_name = serializer.data[\"full_name\"]\n-        message = serializer.data[\"message\"]\n-        phone = serializer.data.get(\"phone\")\n-        \n-        ContactMe(email,phone,full_name,subject,message)\n-           \n-        return response.Response(\n-            {\n-            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-     \n-from django.contrib.auth.models import User\n-\n-class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n-\n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = DestinationBook.objects.get(email=email)\n-\n-            except DestinationBook.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            # Construct the verification URL\n-            site_url = 'https://example.com'  \n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n-\n-            # Fetch the admin email from the User model\n-            admin_user = User.objects.filter(is_superuser=True).first()\n-            if admin_user:\n-                admin_name = admin_user.first_name\n-                admin_email = admin_user.email\n-                print(f\"Admin email to send from: {admin_email}\")  \n-            else:\n-                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n-\n-            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-        \n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n-    context = {\n-        'admin_name': admin_name,\n-        'recipient_name': book.full_name,  \n-        'contact': book.phone_number, \n-        'activity': book.activity.name,  \n-        'package': book.package.name,  \n-        'destination': book.destination.destination_title,  \n-        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n-        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.service_type, \n-    }\n-    print(context)\n-    html_content = render_to_string('booking_confirmation.html', context)  \n-\n-    from_email = f'Everest Thrills <noreply@everestthrills.com>'\n-\n-    # Send email to the customer\n-    recipient_list = [email]\n-    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n-\n-    # Send email to the admin\n-    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n-    admin_context = context.copy()\n-    admin_context['verification_url'] = verify_url\n-    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n-\n-    admin_recipient_list = [admin_email]\n-    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n-\n-\n-\n-\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725255010972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,12 +276,9 @@\n             \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n             },\n             status=status.HTTP_200_OK,\n         )\n-     \n-from django.contrib.auth.models import User\n \n-from django.contrib.auth.models import User  # Or import CustomUser if you're using a custom user model\n \n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n"
                },
                {
                    "date": 1725255045317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         \n             otp = self.generate_otp(user.id)\n \n             reset_verification = \"reset_password\"\n-            subject = 'lead-management OTP'\n+            subject = 'Evere OTP'\n             if '@' in email:\n                 email = user.email\n                 sendMail(email, otp,subject,reset_verification)\n             else:\n"
                },
                {
                    "date": 1725255089348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         \n             otp = self.generate_otp(user.id)\n \n             reset_verification = \"reset_password\"\n-            subject = 'Evere OTP'\n+            subject = 'Everest Thrills OTP'\n             if '@' in email:\n                 email = user.email\n                 sendMail(email, otp,subject,reset_verification)\n             else:\n@@ -323,9 +323,8 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n-    print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n"
                },
                {
                    "date": 1725255117028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,8 +323,9 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n+\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n"
                },
                {
                    "date": 1725255123599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         \n             otp = self.generate_otp(user.id)\n \n             reset_verification = \"reset_password\"\n-            subject = 'Everest Thrills OTP'\n+            subject = 'Everest OTP'\n             if '@' in email:\n                 email = user.email\n                 sendMail(email, otp,subject,reset_verification)\n             else:\n@@ -323,9 +323,9 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n-\n+    print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n"
                },
                {
                    "date": 1725255130705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         \n             otp = self.generate_otp(user.id)\n \n             reset_verification = \"reset_password\"\n-            subject = 'Everest OTP'\n+            subject = 'Evere OTP'\n             if '@' in email:\n                 email = user.email\n                 sendMail(email, otp,subject,reset_verification)\n             else:\n"
                },
                {
                    "date": 1725255136468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         \n             otp = self.generate_otp(user.id)\n \n             reset_verification = \"reset_password\"\n-            subject = 'Evere OTP'\n+            subject = 'lead-management OTP'\n             if '@' in email:\n                 email = user.email\n                 sendMail(email, otp,subject,reset_verification)\n             else:\n@@ -276,10 +276,11 @@\n             \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n             },\n             status=status.HTTP_200_OK,\n         )\n+     \n+from django.contrib.auth.models import User\n \n-\n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n@@ -295,27 +296,28 @@\n             # Construct the verification URL\n             site_url = 'https://example.com'  \n             verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-            # Fetch all admin emails from the User model\n-            admin_users = CustomUser.objects.filter(is_superuser=True)\n-            if admin_users.exists():\n-                admin_emails = [user.email for user in admin_users]\n-                admin_names = [user.first_name for user in admin_users]\n-                print(f\"Admin emails to send from: {admin_emails}\")  \n+            # Fetch the admin email from the User model\n+            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+            if admin_user:\n+                admin_name = admin_user.first_name\n+                admin_email = admin_user.email\n+                print(f\"Admin email to send from: {admin_email}\")  \n             else:\n                 return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n             # Send the confirmation email\n             subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_emails, admin_names)\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n \n             return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_emails, admin_names):\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n+        'admin_name': admin_name,\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n         'activity': book.activity.name,  \n         'package': book.package.name,  \n@@ -332,21 +334,20 @@\n     # Send email to the customer\n     recipient_list = [email]\n     send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n \n-    # Send email to all admins\n+    # Send email to the admin\n     admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n     admin_context = context.copy()\n     admin_context['verification_url'] = verify_url\n     admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n \n-    admin_recipient_list = admin_emails  # Send email to all admin emails\n+    admin_recipient_list = [admin_email]\n     send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n \n \n \n-\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725255177579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,11 +276,10 @@\n             \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n             },\n             status=status.HTTP_200_OK,\n         )\n-     \n-from django.contrib.auth.models import User\n \n+\n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1725255196009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,9 +324,8 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n-    print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n"
                },
                {
                    "date": 1725255265507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,10 +276,11 @@\n             \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n             },\n             status=status.HTTP_200_OK,\n         )\n+     \n+from django.contrib.auth.models import User\n \n-\n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n@@ -324,8 +325,9 @@\n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n     }\n+    print(context)\n     html_content = render_to_string('booking_confirmation.html', context)  \n \n     from_email = f'Everest Thrills <noreply@everestthrills.com>'\n \n"
                },
                {
                    "date": 1725255276419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,10 +277,8 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-from django.contrib.auth.models import User\n-\n class SendEmailForBookingVerification(APIView):\n     serializer_class = EmailNumberSerializer\n \n     def post(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1725255312018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,405 @@\n+from django.shortcuts import render\n+from rest_framework import generics, status, viewsets, response\n+from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n+from accounts.models import CustomUser\n+from django.utils.http import urlsafe_base64_encode\n+from django.utils.encoding import force_bytes\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.urls import reverse\n+from django.conf import settings\n+from django.core.mail import send_mail\n+from django.contrib.auth.hashers import check_password\n+from django.template.loader import render_to_string\n+from booking.models import DestinationBook\n+\n+\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework_simplejwt.tokens import RefreshToken\n+from .sms_sender import SendSms,ContactMe\n+from django.db.models import Q\n+from django.core.cache import cache\n+\n+import random\n+import string\n+\n+otp_time_expired = 1200\n+site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n+\n+class EmailCheckView(generics.GenericAPIView):\n+\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return '987654'\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailNumberSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_password\"\n+            subject = 'lead-management OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(email, otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"password_reset_otp_{user.id}\"\n+        \n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": \"otp has been sent to your email address\"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+        \n+class EmailChangeGetOtpView(generics.GenericAPIView):\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return \"123456\"\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailChangeGetOtpSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_email\"\n+            subject = 'Pacific OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"email_reset_otp_{user.id}\"\n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+\n+class CustomPasswordResetView(generics.GenericAPIView):\n+    serializer_class = CustomPasswordResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n+        if serializer.validated_data.get('token_validate') == True:\n+            user.password = serializer.data.get('password')\n+            user.save()\n+            message = \"Password Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" password save \")\n+        else:\n+            message = \"Password Reset not Completed\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"password not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+\n+class EmailResetView(generics.GenericAPIView):\n+    serializer_class = EmailResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n+        if not check_password(serializer.data.get('password'),user.password):\n+            message = \"password does not match\"\n+            stat = status.HTTP_200_OK\n+        if serializer.validated_data.get('token_validate') == True:\n+            print(\"validate  data\")\n+            user.email = serializer.data.get('second_email')\n+            user.save()\n+            message = \"Email Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" Email Reset save \")\n+        else:\n+            message = \"Email Can Not reset\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"Email Reset not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+    \n+\n+class VerifyUserPasswordToken(generics.GenericAPIView):\n+    serializer_class = TokenValidationSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+        \n+        return response.Response(\n+            {\"message\": \"Your Token is Validate\",\n+             'data' : serializer.data,\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+\n+\n+class SendEmailVerificationLink(APIView):\n+    \n+    def post(self, request, *args, **kwargs):\n+        email = request.data.get('email')\n+        user = CustomUser.objects.filter(email=email).first()\n+\n+        try:\n+            user = CustomUser.objects.get(email=email)\n+        except CustomUser.DoesNotExist:\n+            return Response({\n+                'detail': 'User with this email does not exist.',\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n+        token = PasswordResetTokenGenerator().make_token(user)\n+\n+        # Send the token via email\n+        subject = 'Email Verification Token'\n+        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n+        subject = 'Email Verification Link '\n+        reset_verification = \"verification\"\n+        sendMail(email,verify_url,subject,reset_verification)\n+\n+        return Response({\n+            'detail': 'Email verification'})\n+\n+def sendMail(email, reset_url,subject,reset_verification):\n+    if reset_verification == \"verification\":\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n+                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    else:\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n+                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    html_contents = \"\"\"<!DOCTYPE html>\n+        <html lang=\"en\">\n+        <head>\n+            <meta charset=\"UTF-8\">\n+            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+            <title>Email Template</title>\n+            <style>\n+                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n+            </style>\n+        </head>\"\"\" + body\n+    \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n+\n+\n+class ContactmeView(generics.GenericAPIView):    \n+    serializer_class = ContactMeSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+\n+        email = serializer.data[\"email\"]\n+        subject = serializer.data.get('subject')\n+        full_name = serializer.data[\"full_name\"]\n+        message = serializer.data[\"message\"]\n+        phone = serializer.data.get(\"phone\")\n+        \n+        ContactMe(email,phone,full_name,subject,message)\n+           \n+        return response.Response(\n+            {\n+            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+     \n+class SendEmailForBookingVerification(APIView):\n+    serializer_class = EmailNumberSerializer\n+\n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = DestinationBook.objects.get(email=email)\n+\n+            except DestinationBook.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Construct the verification URL\n+            site_url = 'https://example.com'  \n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+\n+            # Fetch the admin email from the User model\n+            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+            if admin_user:\n+                admin_name = admin_user.first_name\n+                admin_email = admin_user.email\n+                print(f\"Admin email to send from: {admin_email}\")  \n+            else:\n+                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n+\n+            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n+        \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n+    context = {\n+        'admin_name': admin_name,\n+        'recipient_name': book.full_name,  \n+        'contact': book.phone_number, \n+        'activity': book.activity.name,  \n+        'package': book.package.name,  \n+        'destination': book.destination.destination_title,  \n+        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n+        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n+        'preferred_service_type': book.service_type, \n+    }\n+    print(context)\n+    html_content = render_to_string('booking_confirmation.html', context)  \n+\n+    from_email = f'Everest Thrills <{admin_email}>'\n+\n+    # Send email to the customer\n+    recipient_list = [email]\n+    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n+\n+    # Send email to the admin\n+    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n+    admin_context = context.copy()\n+    admin_context['verification_url'] = verify_url\n+    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n+\n+    admin_recipient_list = [admin_email]\n+    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n+\n+\n+\n+\n+class PasswordResetView(generics.GenericAPIView):\n+\n+            def generate_otp(self,user):\n+                # Generate a random 5-digit OTP\n+                # return \"12345\"\n+                user = str(user)\n+                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+            \n+            serializer_class = PasswordNumberSerializer\n+            def post(self, request):\n+                serializer = self.serializer_class(data=request.data)\n+                serializer.is_valid(raise_exception=True)\n+                email = serializer.data[\"email\"]\n+                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+                if user:\n+                \n+                    otp = self.generate_otp(user.id)\n+\n+                    email_type = \"reset_password\"\n+                    \n+                    subject = 'Everest Thrill Password Reset OTP'\n+                    if '@' in email:\n+                        email = user.email\n+                        sendPasswordResetMail(email, otp,subject,email_type,user)\n+                    else:\n+                        SendSms(contact=email,otp=otp,message=subject)\n+                \n+                    cache_key = f\"password_reset_otp_{user.id}\"\n+                    cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+                    return response.Response(\n+                        {\n+                        \"message\":\"OTP has been sent to your email address\"\n+                        },\n+                        status=status.HTTP_200_OK,\n+                    )\n+                else:\n+                    return response.Response(\n+                        {\"message\": \"User doesn't exists\"},\n+                        status=status.HTTP_400_BAD_REQUEST,\n+                    )\n+\n+def sendPasswordResetMail(email, otp, subject, email_type, user):\n+    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n+            \n+    if email_type == \"reset_password\":  # Ensure this matches what is passed\n+                context = {\n+                    'otp': otp,\n+                    'user': user,\n+                    'verification_url': 'https://example.com/verify'\n+                }\n+                \n+                password_html_contents = render_to_string('reset_password_otp.html', context)\n+            \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725255312267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,405 @@\n+from django.shortcuts import render\n+from rest_framework import generics, status, viewsets, response\n+from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n+from accounts.models import CustomUser\n+from django.utils.http import urlsafe_base64_encode\n+from django.utils.encoding import force_bytes\n+from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from django.urls import reverse\n+from django.conf import settings\n+from django.core.mail import send_mail\n+from django.contrib.auth.hashers import check_password\n+from django.template.loader import render_to_string\n+from booking.models import DestinationBook\n+\n+\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework_simplejwt.tokens import RefreshToken\n+from .sms_sender import SendSms,ContactMe\n+from django.db.models import Q\n+from django.core.cache import cache\n+\n+import random\n+import string\n+\n+otp_time_expired = 1200\n+site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n+\n+class EmailCheckView(generics.GenericAPIView):\n+\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return '987654'\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailNumberSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_password\"\n+            subject = 'lead-management OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(email, otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"password_reset_otp_{user.id}\"\n+        \n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": \"otp has been sent to your email address\"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+        \n+class EmailChangeGetOtpView(generics.GenericAPIView):\n+    def generate_otp(self,user):\n+        # Generate a random 6-digit OTP\n+        return \"123456\"\n+        user = str(user)\n+        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+    \n+    serializer_class = EmailChangeGetOtpSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        email = serializer.data[\"email\"]\n+        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+        if user:\n+        \n+            otp = self.generate_otp(user.id)\n+\n+            reset_verification = \"reset_email\"\n+            subject = 'Pacific OTP'\n+            if '@' in email:\n+                email = user.email\n+                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n+            else:\n+                SendSms(contact=email,otp=otp,message=subject)\n+          \n+            cache_key = f\"email_reset_otp_{user.id}\"\n+            cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+            return response.Response(\n+                {\n+                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n+                },\n+                status=status.HTTP_200_OK,\n+            )\n+        else:\n+            return response.Response(\n+                {\"message\": \"User doesn't exists\"},\n+                status=status.HTTP_400_BAD_REQUEST,\n+            )\n+\n+class CustomPasswordResetView(generics.GenericAPIView):\n+    serializer_class = CustomPasswordResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n+        if serializer.validated_data.get('token_validate') == True:\n+            user.password = serializer.data.get('password')\n+            user.save()\n+            message = \"Password Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" password save \")\n+        else:\n+            message = \"Password Reset not Completed\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"password not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+\n+class EmailResetView(generics.GenericAPIView):\n+    serializer_class = EmailResetSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+     \n+        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n+        if not check_password(serializer.data.get('password'),user.password):\n+            message = \"password does not match\"\n+            stat = status.HTTP_200_OK\n+        if serializer.validated_data.get('token_validate') == True:\n+            print(\"validate  data\")\n+            user.email = serializer.data.get('second_email')\n+            user.save()\n+            message = \"Email Reset Complete\"\n+            stat = status.HTTP_200_OK\n+            print(\" Email Reset save \")\n+        else:\n+            message = \"Email Can Not reset\"\n+            stat = status.HTTP_400_BAD_REQUEST\n+            print(\"Email Reset not save\")\n+\n+        return response.Response(\n+            {\"message\": message},\n+            status=stat,\n+        )\n+    \n+\n+class VerifyUserPasswordToken(generics.GenericAPIView):\n+    serializer_class = TokenValidationSerializer\n+    \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n+        serializer.is_valid(raise_exception=True)\n+        \n+        return response.Response(\n+            {\"message\": \"Your Token is Validate\",\n+             'data' : serializer.data,\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+\n+\n+class SendEmailVerificationLink(APIView):\n+    \n+    def post(self, request, *args, **kwargs):\n+        email = request.data.get('email')\n+        user = CustomUser.objects.filter(email=email).first()\n+\n+        try:\n+            user = CustomUser.objects.get(email=email)\n+        except CustomUser.DoesNotExist:\n+            return Response({\n+                'detail': 'User with this email does not exist.',\n+            }, status=status.HTTP_400_BAD_REQUEST)\n+\n+        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n+        token = PasswordResetTokenGenerator().make_token(user)\n+\n+        # Send the token via email\n+        subject = 'Email Verification Token'\n+        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n+        subject = 'Email Verification Link '\n+        reset_verification = \"verification\"\n+        sendMail(email,verify_url,subject,reset_verification)\n+\n+        return Response({\n+            'detail': 'Email verification'})\n+\n+def sendMail(email, reset_url,subject,reset_verification):\n+    if reset_verification == \"verification\":\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n+                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    else:\n+        body = f\"\"\"<body>\n+            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n+                <tr>\n+                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n+                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n+                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n+                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n+                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n+                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n+                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n+                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n+                    </td>\n+                </tr>\n+            </table>\n+        </body>\n+        </html>\"\"\"\n+    html_contents = \"\"\"<!DOCTYPE html>\n+        <html lang=\"en\">\n+        <head>\n+            <meta charset=\"UTF-8\">\n+            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+            <title>Email Template</title>\n+            <style>\n+                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n+            </style>\n+        </head>\"\"\" + body\n+    \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n+\n+\n+class ContactmeView(generics.GenericAPIView):    \n+    serializer_class = ContactMeSerializer\n+    def post(self, request):\n+        serializer = self.serializer_class(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+\n+        email = serializer.data[\"email\"]\n+        subject = serializer.data.get('subject')\n+        full_name = serializer.data[\"full_name\"]\n+        message = serializer.data[\"message\"]\n+        phone = serializer.data.get(\"phone\")\n+        \n+        ContactMe(email,phone,full_name,subject,message)\n+           \n+        return response.Response(\n+            {\n+            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n+            },\n+            status=status.HTTP_200_OK,\n+        )\n+     \n+class SendEmailForBookingVerification(APIView):\n+    serializer_class = EmailNumberSerializer\n+\n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = DestinationBook.objects.get(email=email)\n+\n+            except DestinationBook.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            # Construct the verification URL\n+            site_url = 'https://example.com'  \n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n+\n+            # Fetch the admin email from the User model\n+            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+            if admin_user:\n+                admin_name = admin_user.first_name\n+                admin_email = admin_user.email\n+                print(f\"Admin email to send from: {admin_email}\")  \n+            else:\n+                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n+\n+            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n+        \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n+    context = {\n+        'admin_name': admin_name,\n+        'recipient_name': book.full_name,  \n+        'contact': book.phone_number, \n+        'activity': book.activity.name,  \n+        'package': book.package.name,  \n+        'destination': book.destination.destination_title,  \n+        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n+        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n+        'preferred_service_type': book.service_type, \n+    }\n+    print(context)\n+    html_content = render_to_string('booking_confirmation.html', context)  \n+\n+    from_email = f'Everest Thrills <{admin_email}>'\n+\n+    # Send email to the customer\n+    recipient_list = [email]\n+    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n+\n+    # Send email to the admin\n+    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n+    admin_context = context.copy()\n+    admin_context['verification_url'] = verify_url\n+    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n+\n+    admin_recipient_list = [admin_email]\n+    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n+\n+\n+\n+\n+class PasswordResetView(generics.GenericAPIView):\n+\n+            def generate_otp(self,user):\n+                # Generate a random 5-digit OTP\n+                # return \"12345\"\n+                user = str(user)\n+                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n+            \n+            serializer_class = PasswordNumberSerializer\n+            def post(self, request):\n+                serializer = self.serializer_class(data=request.data)\n+                serializer.is_valid(raise_exception=True)\n+                email = serializer.data[\"email\"]\n+                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n+                if user:\n+                \n+                    otp = self.generate_otp(user.id)\n+\n+                    email_type = \"reset_password\"\n+                    \n+                    subject = 'Everest Thrill Password Reset OTP'\n+                    if '@' in email:\n+                        email = user.email\n+                        sendPasswordResetMail(email, otp,subject,email_type,user)\n+                    else:\n+                        SendSms(contact=email,otp=otp,message=subject)\n+                \n+                    cache_key = f\"password_reset_otp_{user.id}\"\n+                    cache.set(cache_key, otp, timeout=otp_time_expired)\n+\n+                    return response.Response(\n+                        {\n+                        \"message\":\"OTP has been sent to your email address\"\n+                        },\n+                        status=status.HTTP_200_OK,\n+                    )\n+                else:\n+                    return response.Response(\n+                        {\"message\": \"User doesn't exists\"},\n+                        status=status.HTTP_400_BAD_REQUEST,\n+                    )\n+\n+def sendPasswordResetMail(email, otp, subject, email_type, user):\n+    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n+            \n+    if email_type == \"reset_password\":  # Ensure this matches what is passed\n+                context = {\n+                    'otp': otp,\n+                    'user': user,\n+                    'verification_url': 'https://example.com/verify'\n+                }\n+                \n+                password_html_contents = render_to_string('reset_password_otp.html', context)\n+            \n+    email_from = settings.EMAIL_HOST_USER\n+    recipient_list = [email]\n+    plain_message = \"\"\n+    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725256072343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n \n             return Response({'detail': 'Email for Booking confirmation sent successfully'})\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n+@receiver(post_save, sender=DestinationBook)\n def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n     context = {\n         'admin_name': admin_name,\n         'recipient_name': book.full_name,  \n@@ -401,815 +401,5 @@\n             \n     email_from = settings.EMAIL_HOST_USER\n     recipient_list = [email]\n     plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n-from django.shortcuts import render\n-from rest_framework import generics, status, viewsets, response\n-from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n-from accounts.models import CustomUser\n-from django.utils.http import urlsafe_base64_encode\n-from django.utils.encoding import force_bytes\n-from django.contrib.auth.tokens import PasswordResetTokenGenerator\n-from django.urls import reverse\n-from django.conf import settings\n-from django.core.mail import send_mail\n-from django.contrib.auth.hashers import check_password\n-from django.template.loader import render_to_string\n-from booking.models import DestinationBook\n-\n-\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework_simplejwt.tokens import RefreshToken\n-from .sms_sender import SendSms,ContactMe\n-from django.db.models import Q\n-from django.core.cache import cache\n-\n-import random\n-import string\n-\n-otp_time_expired = 1200\n-site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n-\n-class EmailCheckView(generics.GenericAPIView):\n-\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return '987654'\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailNumberSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_password\"\n-            subject = 'lead-management OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(email, otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"password_reset_otp_{user.id}\"\n-        \n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": \"otp has been sent to your email address\"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-        \n-class EmailChangeGetOtpView(generics.GenericAPIView):\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return \"123456\"\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailChangeGetOtpSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_email\"\n-            subject = 'Pacific OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"email_reset_otp_{user.id}\"\n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-\n-class CustomPasswordResetView(generics.GenericAPIView):\n-    serializer_class = CustomPasswordResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n-        if serializer.validated_data.get('token_validate') == True:\n-            user.password = serializer.data.get('password')\n-            user.save()\n-            message = \"Password Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" password save \")\n-        else:\n-            message = \"Password Reset not Completed\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"password not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-\n-class EmailResetView(generics.GenericAPIView):\n-    serializer_class = EmailResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n-        if not check_password(serializer.data.get('password'),user.password):\n-            message = \"password does not match\"\n-            stat = status.HTTP_200_OK\n-        if serializer.validated_data.get('token_validate') == True:\n-            print(\"validate  data\")\n-            user.email = serializer.data.get('second_email')\n-            user.save()\n-            message = \"Email Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" Email Reset save \")\n-        else:\n-            message = \"Email Can Not reset\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"Email Reset not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-    \n-\n-class VerifyUserPasswordToken(generics.GenericAPIView):\n-    serializer_class = TokenValidationSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-        \n-        return response.Response(\n-            {\"message\": \"Your Token is Validate\",\n-             'data' : serializer.data,\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-\n-\n-class SendEmailVerificationLink(APIView):\n-    \n-    def post(self, request, *args, **kwargs):\n-        email = request.data.get('email')\n-        user = CustomUser.objects.filter(email=email).first()\n-\n-        try:\n-            user = CustomUser.objects.get(email=email)\n-        except CustomUser.DoesNotExist:\n-            return Response({\n-                'detail': 'User with this email does not exist.',\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n-        token = PasswordResetTokenGenerator().make_token(user)\n-\n-        # Send the token via email\n-        subject = 'Email Verification Token'\n-        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n-        subject = 'Email Verification Link '\n-        reset_verification = \"verification\"\n-        sendMail(email,verify_url,subject,reset_verification)\n-\n-        return Response({\n-            'detail': 'Email verification'})\n-\n-def sendMail(email, reset_url,subject,reset_verification):\n-    if reset_verification == \"verification\":\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n-                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    else:\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n-                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    html_contents = \"\"\"<!DOCTYPE html>\n-        <html lang=\"en\">\n-        <head>\n-            <meta charset=\"UTF-8\">\n-            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-            <title>Email Template</title>\n-            <style>\n-                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n-            </style>\n-        </head>\"\"\" + body\n-    \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n-\n-\n-class ContactmeView(generics.GenericAPIView):    \n-    serializer_class = ContactMeSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-\n-        email = serializer.data[\"email\"]\n-        subject = serializer.data.get('subject')\n-        full_name = serializer.data[\"full_name\"]\n-        message = serializer.data[\"message\"]\n-        phone = serializer.data.get(\"phone\")\n-        \n-        ContactMe(email,phone,full_name,subject,message)\n-           \n-        return response.Response(\n-            {\n-            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-     \n-class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n-\n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = DestinationBook.objects.get(email=email)\n-\n-            except DestinationBook.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            # Construct the verification URL\n-            site_url = 'https://example.com'  \n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n-\n-            # Fetch the admin email from the User model\n-            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n-            if admin_user:\n-                admin_name = admin_user.first_name\n-                admin_email = admin_user.email\n-                print(f\"Admin email to send from: {admin_email}\")  \n-            else:\n-                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n-\n-            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-        \n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n-    context = {\n-        'admin_name': admin_name,\n-        'recipient_name': book.full_name,  \n-        'contact': book.phone_number, \n-        'activity': book.activity.name,  \n-        'package': book.package.name,  \n-        'destination': book.destination.destination_title,  \n-        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n-        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.service_type, \n-    }\n-    print(context)\n-    html_content = render_to_string('booking_confirmation.html', context)  \n-\n-    from_email = f'Everest Thrills <{admin_email}>'\n-\n-    # Send email to the customer\n-    recipient_list = [email]\n-    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n-\n-    # Send email to the admin\n-    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n-    admin_context = context.copy()\n-    admin_context['verification_url'] = verify_url\n-    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n-\n-    admin_recipient_list = [admin_email]\n-    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n-\n-\n-\n-\n-class PasswordResetView(generics.GenericAPIView):\n-\n-            def generate_otp(self,user):\n-                # Generate a random 5-digit OTP\n-                # return \"12345\"\n-                user = str(user)\n-                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-            \n-            serializer_class = PasswordNumberSerializer\n-            def post(self, request):\n-                serializer = self.serializer_class(data=request.data)\n-                serializer.is_valid(raise_exception=True)\n-                email = serializer.data[\"email\"]\n-                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-                if user:\n-                \n-                    otp = self.generate_otp(user.id)\n-\n-                    email_type = \"reset_password\"\n-                    \n-                    subject = 'Everest Thrill Password Reset OTP'\n-                    if '@' in email:\n-                        email = user.email\n-                        sendPasswordResetMail(email, otp,subject,email_type,user)\n-                    else:\n-                        SendSms(contact=email,otp=otp,message=subject)\n-                \n-                    cache_key = f\"password_reset_otp_{user.id}\"\n-                    cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-                    return response.Response(\n-                        {\n-                        \"message\":\"OTP has been sent to your email address\"\n-                        },\n-                        status=status.HTTP_200_OK,\n-                    )\n-                else:\n-                    return response.Response(\n-                        {\"message\": \"User doesn't exists\"},\n-                        status=status.HTTP_400_BAD_REQUEST,\n-                    )\n-\n-def sendPasswordResetMail(email, otp, subject, email_type, user):\n-    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-            \n-    if email_type == \"reset_password\":  # Ensure this matches what is passed\n-                context = {\n-                    'otp': otp,\n-                    'user': user,\n-                    'verification_url': 'https://example.com/verify'\n-                }\n-                \n-                password_html_contents = render_to_string('reset_password_otp.html', context)\n-            \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n-from django.shortcuts import render\n-from rest_framework import generics, status, viewsets, response\n-from .serializers import EmailNumberSerializer,PasswordNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\n-from accounts.models import CustomUser\n-from django.utils.http import urlsafe_base64_encode\n-from django.utils.encoding import force_bytes\n-from django.contrib.auth.tokens import PasswordResetTokenGenerator\n-from django.urls import reverse\n-from django.conf import settings\n-from django.core.mail import send_mail\n-from django.contrib.auth.hashers import check_password\n-from django.template.loader import render_to_string\n-from booking.models import DestinationBook\n-\n-\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework_simplejwt.tokens import RefreshToken\n-from .sms_sender import SendSms,ContactMe\n-from django.db.models import Q\n-from django.core.cache import cache\n-\n-import random\n-import string\n-\n-otp_time_expired = 1200\n-site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n-\n-class EmailCheckView(generics.GenericAPIView):\n-\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return '987654'\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailNumberSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_password\"\n-            subject = 'lead-management OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(email, otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"password_reset_otp_{user.id}\"\n-        \n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": \"otp has been sent to your email address\"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-        \n-class EmailChangeGetOtpView(generics.GenericAPIView):\n-    def generate_otp(self,user):\n-        # Generate a random 6-digit OTP\n-        return \"123456\"\n-        user = str(user)\n-        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-    \n-    serializer_class = EmailChangeGetOtpSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        email = serializer.data[\"email\"]\n-        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-        if user:\n-        \n-            otp = self.generate_otp(user.id)\n-\n-            reset_verification = \"reset_email\"\n-            subject = 'Pacific OTP'\n-            if '@' in email:\n-                email = user.email\n-                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n-            else:\n-                SendSms(contact=email,otp=otp,message=subject)\n-          \n-            cache_key = f\"email_reset_otp_{user.id}\"\n-            cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-            return response.Response(\n-                {\n-                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n-                },\n-                status=status.HTTP_200_OK,\n-            )\n-        else:\n-            return response.Response(\n-                {\"message\": \"User doesn't exists\"},\n-                status=status.HTTP_400_BAD_REQUEST,\n-            )\n-\n-class CustomPasswordResetView(generics.GenericAPIView):\n-    serializer_class = CustomPasswordResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n-        if serializer.validated_data.get('token_validate') == True:\n-            user.password = serializer.data.get('password')\n-            user.save()\n-            message = \"Password Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" password save \")\n-        else:\n-            message = \"Password Reset not Completed\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"password not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-\n-class EmailResetView(generics.GenericAPIView):\n-    serializer_class = EmailResetSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-     \n-        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n-        if not check_password(serializer.data.get('password'),user.password):\n-            message = \"password does not match\"\n-            stat = status.HTTP_200_OK\n-        if serializer.validated_data.get('token_validate') == True:\n-            print(\"validate  data\")\n-            user.email = serializer.data.get('second_email')\n-            user.save()\n-            message = \"Email Reset Complete\"\n-            stat = status.HTTP_200_OK\n-            print(\" Email Reset save \")\n-        else:\n-            message = \"Email Can Not reset\"\n-            stat = status.HTTP_400_BAD_REQUEST\n-            print(\"Email Reset not save\")\n-\n-        return response.Response(\n-            {\"message\": message},\n-            status=stat,\n-        )\n-    \n-\n-class VerifyUserPasswordToken(generics.GenericAPIView):\n-    serializer_class = TokenValidationSerializer\n-    \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n-        serializer.is_valid(raise_exception=True)\n-        \n-        return response.Response(\n-            {\"message\": \"Your Token is Validate\",\n-             'data' : serializer.data,\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-\n-\n-class SendEmailVerificationLink(APIView):\n-    \n-    def post(self, request, *args, **kwargs):\n-        email = request.data.get('email')\n-        user = CustomUser.objects.filter(email=email).first()\n-\n-        try:\n-            user = CustomUser.objects.get(email=email)\n-        except CustomUser.DoesNotExist:\n-            return Response({\n-                'detail': 'User with this email does not exist.',\n-            }, status=status.HTTP_400_BAD_REQUEST)\n-\n-        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n-        token = PasswordResetTokenGenerator().make_token(user)\n-\n-        # Send the token via email\n-        subject = 'Email Verification Token'\n-        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n-        subject = 'Email Verification Link '\n-        reset_verification = \"verification\"\n-        sendMail(email,verify_url,subject,reset_verification)\n-\n-        return Response({\n-            'detail': 'Email verification'})\n-\n-def sendMail(email, reset_url,subject,reset_verification):\n-    if reset_verification == \"verification\":\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n-                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    else:\n-        body = f\"\"\"<body>\n-            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n-                <tr>\n-                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n-                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n-                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n-                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n-                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n-                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n-                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n-                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n-                    </td>\n-                </tr>\n-            </table>\n-        </body>\n-        </html>\"\"\"\n-    html_contents = \"\"\"<!DOCTYPE html>\n-        <html lang=\"en\">\n-        <head>\n-            <meta charset=\"UTF-8\">\n-            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n-            <title>Email Template</title>\n-            <style>\n-                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n-            </style>\n-        </head>\"\"\" + body\n-    \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n-    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n-\n-\n-class ContactmeView(generics.GenericAPIView):    \n-    serializer_class = ContactMeSerializer\n-    def post(self, request):\n-        serializer = self.serializer_class(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-\n-        email = serializer.data[\"email\"]\n-        subject = serializer.data.get('subject')\n-        full_name = serializer.data[\"full_name\"]\n-        message = serializer.data[\"message\"]\n-        phone = serializer.data.get(\"phone\")\n-        \n-        ContactMe(email,phone,full_name,subject,message)\n-           \n-        return response.Response(\n-            {\n-            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n-            },\n-            status=status.HTTP_200_OK,\n-        )\n-     \n-class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n-\n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = DestinationBook.objects.get(email=email)\n-\n-            except DestinationBook.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-            # Construct the verification URL\n-            site_url = 'https://example.com'  \n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n-\n-            # Fetch the admin email from the User model\n-            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n-            if admin_user:\n-                admin_name = admin_user.first_name\n-                admin_email = admin_user.email\n-                print(f\"Admin email to send from: {admin_email}\")  \n-            else:\n-                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n-\n-            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-        \n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n-    context = {\n-        'admin_name': admin_name,\n-        'recipient_name': book.full_name,  \n-        'contact': book.phone_number, \n-        'activity': book.activity.name,  \n-        'package': book.package.name,  \n-        'destination': book.destination.destination_title,  \n-        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n-        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.service_type, \n-    }\n-    print(context)\n-    html_content = render_to_string('booking_confirmation.html', context)  \n-\n-    from_email = f'Everest Thrills <noreply@everestthrills.com>'\n-\n-    # Send email to the customer\n-    recipient_list = [email]\n-    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n-\n-    # Send email to the admin\n-    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n-    admin_context = context.copy()\n-    admin_context['verification_url'] = verify_url\n-    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n-\n-    admin_recipient_list = [admin_email]\n-    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n-\n-\n-\n-\n-class PasswordResetView(generics.GenericAPIView):\n-\n-            def generate_otp(self,user):\n-                # Generate a random 5-digit OTP\n-                # return \"12345\"\n-                user = str(user)\n-                return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n-            \n-            serializer_class = PasswordNumberSerializer\n-            def post(self, request):\n-                serializer = self.serializer_class(data=request.data)\n-                serializer.is_valid(raise_exception=True)\n-                email = serializer.data[\"email\"]\n-                user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n-                if user:\n-                \n-                    otp = self.generate_otp(user.id)\n-\n-                    email_type = \"reset_password\"\n-                    \n-                    subject = 'Everest Thrill Password Reset OTP'\n-                    if '@' in email:\n-                        email = user.email\n-                        sendPasswordResetMail(email, otp,subject,email_type,user)\n-                    else:\n-                        SendSms(contact=email,otp=otp,message=subject)\n-                \n-                    cache_key = f\"password_reset_otp_{user.id}\"\n-                    cache.set(cache_key, otp, timeout=otp_time_expired)\n-\n-                    return response.Response(\n-                        {\n-                        \"message\":\"OTP has been sent to your email address\"\n-                        },\n-                        status=status.HTTP_200_OK,\n-                    )\n-                else:\n-                    return response.Response(\n-                        {\"message\": \"User doesn't exists\"},\n-                        status=status.HTTP_400_BAD_REQUEST,\n-                    )\n-\n-def sendPasswordResetMail(email, otp, subject, email_type, user):\n-    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n-            \n-    if email_type == \"reset_password\":  # Ensure this matches what is passed\n-                context = {\n-                    'otp': otp,\n-                    'user': user,\n-                    'verification_url': 'https://example.com/verify'\n-                }\n-                \n-                password_html_contents = render_to_string('reset_password_otp.html', context)\n-            \n-    email_from = settings.EMAIL_HOST_USER\n-    recipient_list = [email]\n-    plain_message = \"\"\n     send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725256089674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,17 @@\n from django.contrib.auth.hashers import check_password\n from django.template.loader import render_to_string\n from booking.models import DestinationBook\n \n+from django.db.models.signals import post_save\n+from django.dispatch import receiver\n+from django.core.mail import send_mail\n+from django.template.loader import render_to_string\n+from django.utils.http import urlsafe_base64_encode\n+from django.utils.encoding import force_bytes\n \n+\n+\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from rest_framework_simplejwt.tokens import RefreshToken\n"
                },
                {
                    "date": 1725256098438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,8 @@\n \n from django.db.models.signals import post_save\n from django.dispatch import receiver\n from django.core.mail import send_mail\n-from django.template.loader import render_to_string\n-from django.utils.http import urlsafe_base64_encode\n-from django.utils.encoding import force_bytes\n \n \n \n from rest_framework.views import APIView\n"
                },
                {
                    "date": 1725256290622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,8 @@\n \n from django.db.models.signals import post_save\n from django.dispatch import receiver\n from django.core.mail import send_mail\n-\n-\n-\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from rest_framework_simplejwt.tokens import RefreshToken\n@@ -282,75 +279,13 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n-class SendEmailForBookingVerification(APIView):\n-    serializer_class = EmailNumberSerializer\n \n-    def post(self, request, *args, **kwargs):\n-        serializer = self.serializer_class(data=request.data)\n-        if serializer.is_valid():\n-            email = serializer.validated_data[\"email\"]\n-            try:\n-                book = DestinationBook.objects.get(email=email)\n \n-            except DestinationBook.DoesNotExist:\n-                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n-            # Construct the verification URL\n-            site_url = 'https://example.com'  \n-            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n-            # Fetch the admin email from the User model\n-            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n-            if admin_user:\n-                admin_name = admin_user.first_name\n-                admin_email = admin_user.email\n-                print(f\"Admin email to send from: {admin_email}\")  \n-            else:\n-                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n-            # Send the confirmation email\n-            subject = 'Booking Verification Email'\n-            sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name)\n-\n-            return Response({'detail': 'Email for Booking confirmation sent successfully'})\n-        \n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-@receiver(post_save, sender=DestinationBook)\n-def sendBookingConfirmationEMail(email, verify_url, subject, book, admin_email,admin_name):\n-    context = {\n-        'admin_name': admin_name,\n-        'recipient_name': book.full_name,  \n-        'contact': book.phone_number, \n-        'activity': book.activity.name,  \n-        'package': book.package.name,  \n-        'destination': book.destination.destination_title,  \n-        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n-        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n-        'preferred_service_type': book.service_type, \n-    }\n-    print(context)\n-    html_content = render_to_string('booking_confirmation.html', context)  \n-\n-    from_email = f'Everest Thrills <{admin_email}>'\n-\n-    # Send email to the customer\n-    recipient_list = [email]\n-    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n-\n-    # Send email to the admin\n-    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n-    admin_context = context.copy()\n-    admin_context['verification_url'] = verify_url\n-    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n-\n-    admin_recipient_list = [admin_email]\n-    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n-\n-\n-\n-\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1725256298057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,13 +279,91 @@\n             },\n             status=status.HTTP_200_OK,\n         )\n      \n+class SendEmailForBookingVerification(APIView):\n+    serializer_class = EmailNumberSerializer\n \n+    def post(self, request, *args, **kwargs):\n+        serializer = self.serializer_class(data=request.data)\n+        if serializer.is_valid():\n+            email = serializer.validated_data[\"email\"]\n+            try:\n+                book = DestinationBook.objects.get(email=email)\n+            except DestinationBook.DoesNotExist:\n+                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n \n+            # Construct the verification URL\n+            site_url = 'https://example.com'  \n+            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n \n+            # Fetch the admin email from the User model\n+            admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+            if admin_user:\n+                admin_name = admin_user.first_name\n+                admin_email = admin_user.email\n+            else:\n+                return Response({'detail': 'Admin email not found.'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n+            # Send the confirmation email\n+            subject = 'Booking Verification Email'\n+            send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name)\n \n+            return Response({'detail': 'Email for Booking confirmation sent successfully'}, status=status.HTTP_200_OK)\n+        \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+def send_booking_confirmation_email(email, verify_url, subject, book, admin_email, admin_name):\n+    context = {\n+        'admin_name': admin_name,\n+        'recipient_name': book.full_name,  \n+        'contact': book.phone_number, \n+        'activity': book.activity.name,  \n+        'package': book.package.name,  \n+        'destination': book.destination.destination_title,  \n+        'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n+        'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n+        'preferred_service_type': book.service_type, \n+    }\n+\n+    html_content = render_to_string('booking_confirmation.html', context)\n+    from_email = f'Everest Thrills <{admin_email}>'\n+\n+    # Send email to the customer\n+    recipient_list = [email]\n+    send_mail(subject, '', from_email, recipient_list, html_message=html_content)\n+\n+    # Send email to the admin\n+    admin_subject = f\"New Trip Booking Notification - {book.full_name}\"\n+    admin_context = context.copy()\n+    admin_context['verification_url'] = verify_url\n+    admin_html_content = render_to_string('admin_booking_notification.html', admin_context)\n+\n+    admin_recipient_list = [admin_email]\n+    send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n+\n+@receiver(post_save, sender=DestinationBook)\n+def booking_created_handler(sender, instance, created, **kwargs):\n+    if created:\n+        # Construct the verification URL\n+        site_url = 'https://example.com'  \n+        verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(instance.pk))}\"\n+\n+        # Fetch the admin email from the User model\n+        admin_user = CustomUser.objects.filter(is_superuser=True).first()\n+        if admin_user:\n+            admin_name = admin_user.first_name\n+            admin_email = admin_user.email\n+        else:\n+            raise ValueError(\"Admin email not found.\")\n+\n+        # Send the confirmation email\n+        subject = 'Booking Verification Email'\n+        send_booking_confirmation_email(instance.email, verify_url, subject, instance, admin_email, admin_name)\n+\n+\n+\n+\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1726033278687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n class EmailCheckView(generics.GenericAPIView):\n \n     def generate_otp(self,user):\n         # Generate a random 6-digit OTP\n-        return '987654'\n+        \n         user = str(user)\n         return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n     \n     serializer_class = EmailNumberSerializer\n@@ -340,30 +340,9 @@\n \n     admin_recipient_list = [admin_email]\n     send_mail(admin_subject, '', from_email, admin_recipient_list, html_message=admin_html_content)\n \n-@receiver(post_save, sender=DestinationBook)\n-def booking_created_handler(sender, instance, created, **kwargs):\n-    if created:\n-        # Construct the verification URL\n-        site_url = 'https://example.com'  \n-        verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(instance.pk))}\"\n \n-        # Fetch the admin email from the User model\n-        admin_user = CustomUser.objects.filter(is_superuser=True).first()\n-        if admin_user:\n-            admin_name = admin_user.first_name\n-            admin_email = admin_user.email\n-        else:\n-            raise ValueError(\"Admin email not found.\")\n-\n-        # Send the confirmation email\n-        subject = 'Booking Verification Email'\n-        send_booking_confirmation_email(instance.email, verify_url, subject, instance, admin_email, admin_name)\n-\n-\n-\n-\n class PasswordResetView(generics.GenericAPIView):\n \n             def generate_otp(self,user):\n                 # Generate a random 5-digit OTP\n"
                },
                {
                    "date": 1726033310287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,15 @@\n \n import random\n import string\n \n-otp_time_expired = 1200\n+otp_time_expired = 600\n site_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n \n class EmailCheckView(generics.GenericAPIView):\n \n     def generate_otp(self,user):\n         # Generate a random 6-digit OTP\n-        \n         user = str(user)\n         return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n     \n     serializer_class = EmailNumberSerializer\n"
                },
                {
                    "date": 1726493366852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,10 +315,10 @@\n     context = {\n         'admin_name': admin_name,\n         'recipient_name': book.full_name,  \n         'contact': book.phone_number, \n-        'activity': book.activity.name,  \n-        'package': book.package.name,  \n+        # 'activity': book.activity.name,  \n+        # 'package': book.package.name,  \n         'destination': book.destination.destination_title,  \n         'arrival_date': book.arrival_date.strftime('%d/%m/%Y'),  \n         'departure_date': book.departure_date.strftime('%d/%m/%Y'),  \n         'preferred_service_type': book.service_type, \n"
                }
            ],
            "date": 1725013363852,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\nfrom rest_framework import generics, status, viewsets, response\nfrom .serializers import EmailNumberSerializer, CustomPasswordResetSerializer, TokenValidationSerializer,ContactMeSerializer,EmailResetSerializer,EmailChangeGetOtpSerializer\nfrom accounts.models import CustomUser\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.utils.encoding import force_bytes\nfrom django.contrib.auth.tokens import PasswordResetTokenGenerator\nfrom django.urls import reverse\nfrom django.conf import settings\nfrom django.core.mail import send_mail\nfrom django.contrib.auth.hashers import check_password\n\n\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom .sms_sender import SendSms,ContactMe\nfrom django.db.models import Q\nfrom django.core.cache import cache\n\nimport random\nimport string\n\notp_time_expired = 1200\nsite_f  = \"https://lims.dftqc.gov.np\" #http://localhost:4200\"#\"https://dev-lims.netlify.app\"#\"https://lims.dftqc.gov.np\"\n\nclass EmailCheckView(generics.GenericAPIView):\n\n    def generate_otp(self,user):\n        # Generate a random 6-digit OTP\n        return '987654'\n        user = str(user)\n        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n    \n    serializer_class = EmailNumberSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.data[\"email\"]\n        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n        if user:\n        \n            otp = self.generate_otp(user.id)\n\n            reset_verification = \"reset_password\"\n            subject = 'lead-management OTP'\n            if '@' in email:\n                email = user.email\n                sendMail(email, otp,subject,reset_verification)\n            else:\n                SendSms(contact=email,otp=otp,message=subject)\n          \n            cache_key = f\"password_reset_otp_{user.id}\"\n        \n            cache.set(cache_key, otp, timeout=otp_time_expired)\n\n            return response.Response(\n                {\n                \"message\": \"otp has been sent to your email address\"\n                },\n                status=status.HTTP_200_OK,\n            )\n        else:\n            return response.Response(\n                {\"message\": \"User doesn't exists\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n        \nclass EmailChangeGetOtpView(generics.GenericAPIView):\n    def generate_otp(self,user):\n        # Generate a random 6-digit OTP\n        return \"123456\"\n        user = str(user)\n        return user[0]+''.join(random.choices(string.digits, k=4)) + user[-1]\n    \n    serializer_class = EmailChangeGetOtpSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.data[\"email\"]\n        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n        if user:\n        \n            otp = self.generate_otp(user.id)\n\n            reset_verification = \"reset_email\"\n            subject = 'Pacific OTP'\n            if '@' in email:\n                email = user.email\n                sendMail(serializer.data[\"second_email\"], otp,subject,reset_verification)\n            else:\n                SendSms(contact=email,otp=otp,message=subject)\n          \n            cache_key = f\"email_reset_otp_{user.id}\"\n            cache.set(cache_key, otp, timeout=otp_time_expired)\n\n            return response.Response(\n                {\n                \"message\": f\"otp has been sent to your email address {serializer.data['second_email']} \"\n                },\n                status=status.HTTP_200_OK,\n            )\n        else:\n            return response.Response(\n                {\"message\": \"User doesn't exists\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n\nclass CustomPasswordResetView(generics.GenericAPIView):\n    serializer_class = CustomPasswordResetSerializer\n    \n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n        serializer.is_valid(raise_exception=True)\n     \n        user = CustomUser.objects.get(Q(email = serializer.data.get('email')) | Q(phone = serializer.data.get('email')))\n        if serializer.validated_data.get('token_validate') == True:\n            user.password = serializer.data.get('password')\n            user.save()\n            message = \"Password Reset Complete\"\n            stat = status.HTTP_200_OK\n            print(\" password save \")\n        else:\n            message = \"Password Reset not Completed\"\n            stat = status.HTTP_400_BAD_REQUEST\n            print(\"password not save\")\n\n        return response.Response(\n            {\"message\": message},\n            status=stat,\n        )\n\nclass EmailResetView(generics.GenericAPIView):\n    serializer_class = EmailResetSerializer\n    \n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n        serializer.is_valid(raise_exception=True)\n     \n        user = CustomUser.objects.get(Q(email = serializer.data.get('email')))\n        if not check_password(serializer.data.get('password'),user.password):\n            message = \"password does not match\"\n            stat = status.HTTP_200_OK\n        if serializer.validated_data.get('token_validate') == True:\n            print(\"validate  data\")\n            user.email = serializer.data.get('second_email')\n            user.save()\n            message = \"Email Reset Complete\"\n            stat = status.HTTP_200_OK\n            print(\" Email Reset save \")\n        else:\n            message = \"Email Can Not reset\"\n            stat = status.HTTP_400_BAD_REQUEST\n            print(\"Email Reset not save\")\n\n        return response.Response(\n            {\"message\": message},\n            status=stat,\n        )\n    \n\nclass VerifyUserPasswordToken(generics.GenericAPIView):\n    serializer_class = TokenValidationSerializer\n    \n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data, context={\"kwargs\":kwargs})\n        serializer.is_valid(raise_exception=True)\n        \n        return response.Response(\n            {\"message\": \"Your Token is Validate\",\n             'data' : serializer.data,\n            },\n            status=status.HTTP_200_OK,\n        )\n\n\nclass SendEmailVerificationLink(APIView):\n    \n    def post(self, request, *args, **kwargs):\n        email = request.data.get('email')\n        user = CustomUser.objects.filter(email=email).first()\n\n        try:\n            user = CustomUser.objects.get(email=email)\n        except CustomUser.DoesNotExist:\n            return Response({\n                'detail': 'User with this email does not exist.',\n            }, status=status.HTTP_400_BAD_REQUEST)\n\n        encoded_pk = urlsafe_base64_encode(force_bytes(user.pk))\n        token = PasswordResetTokenGenerator().make_token(user)\n\n        # Send the token via email\n        subject = 'Email Verification Token'\n        verify_url = f\"{site_f}/user-verification-success?pk={encoded_pk}&token={token}\"\n        subject = 'Email Verification Link '\n        reset_verification = \"verification\"\n        sendMail(email,verify_url,subject,reset_verification)\n\n        return Response({\n            'detail': 'Email verificatio'})\n\ndef sendMail(email, reset_url,subject,reset_verification):\n    if reset_verification == \"verification\":\n        body = f\"\"\"<body>\n            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n                <tr>\n                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please verify your account</p>\n                        <p style=\"text-align: center; font-weight: 400;\">Click the button below to verify your account.</p>\n                        <a href=\"{reset_url}\" style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">Verify Your Account</a>\n                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np/</a> for any enquiries.</p>\n                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span>+977 97798000000</p>\n                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Fax:</span>+97798000000 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> info@lead-management.com</p>\n                    </td>\n                </tr>\n            </table>\n        </body>\n        </html>\"\"\"\n    else:\n        body = f\"\"\"<body>\n            <table align=\"center\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" width=\"100%\" style=\"max-width: 600px; font-family: Poppins; background: whitesmoke; padding: 20px; border-radius: 6px;\">\n                <tr>\n                    <td align=\"center\" bgcolor=\"#FFFFFF\" style=\"padding: 20px;\">\n                        <img src=\"https://lead-management.com.np/assets/logo-Ds_vvW8g.png\" alt=\"\" width=\"132\" style=\"display: block; margin: 0 auto;\">\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">lead-management</p>\n                        <p style=\"color: #0B53A7; font-weight: 600; font-size: 18px; margin-top: 20px;\">Please change your Password</p>\n                        <p style=\"text-align: center; font-weight: 400;\">Your OTP code to reset password is</p>\n                        <span style=\"text-decoration: none; background: #0B53A7; color: #FFFFFF; padding: 10px 20px; border-radius: 3px; display: inline-block; margin-top: 15px;\">{reset_url}</span>\n                        <p style=\"text-align: center; margin-top: 20px;\">Please visit <a href=\"https://lead-management.com.np/\" style=\"text-decoration: none; color: #0B53A7; font-weight: 600;\">https://lead-management.com.np</a> for any enquiries.</p>\n                        <p style=\"margin: 0; text-align: center;\"><span style=\"font-weight: 600;\">Tel:</span> 01-5244366</p>\n                        <p style=\"margin: 0; text-align: center; text-decoration: none;\"><span style=\"font-weight: 600;\">Phone:</span> +977 9802348565 <span style=\"font-weight: 600; margin-left: 10px;\">E-mail:</span> support@lead-management.com</p>\n                    </td>\n                </tr>\n            </table>\n        </body>\n        </html>\"\"\"\n    html_contents = \"\"\"<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>Email Template</title>\n            <style>\n                @import url(\"https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n            </style>\n        </head>\"\"\" + body\n    \n    email_from = settings.EMAIL_HOST_USER\n    recipient_list = [email]\n    plain_message = \"\"\n    send_mail(subject, plain_message, email_from, recipient_list,html_message=html_contents)\n\n\nclass ContactmeView(generics.GenericAPIView):    \n    serializer_class = ContactMeSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n\n        email = serializer.data[\"email\"]\n        subject = serializer.data.get('subject')\n        full_name = serializer.data[\"full_name\"]\n        message = serializer.data[\"message\"]\n        phone = serializer.data.get(\"phone\")\n        \n        ContactMe(email,phone,full_name,subject,message)\n           \n        return response.Response(\n            {\n            \"message\": \"Email has sent to lead-management Owner, please kindly wait for response\"\n            },\n            status=status.HTTP_200_OK,\n        )\n     \n    class SendEmailForBookingVerification(APIView):\n    serializer_class = EmailNumberSerializer\n\n    def post(self, request, *args, **kwargs):\n        serializer = self.serializer_class(data=request.data)\n        if serializer.is_valid():\n            email = serializer.validated_data[\"email\"]\n            try:\n                book = BookManagement.objects.get(email=email)\n                print(\"services\",book.services.service_name)\n            except BookManagement.DoesNotExist:\n                return Response({'detail': 'Booking details with this email do not exist.'}, status=status.HTTP_400_BAD_REQUEST)\n\n            # Construct the verification URL\n            site_url = 'https://example.com'  # Replace with your actual site URL\n            verify_url = f\"{site_url}/user-verification-success?pk={urlsafe_base64_encode(force_bytes(book.pk))}\"\n\n            # Send the confirmation email\n            subject = 'Booking Verification Email'\n            sendBookingConfirmationEMail(email, verify_url, subject, book)\n\n            return Response({'detail': 'Email verification sent successfully'})\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\ndef sendBookingConfirmationEMail(email, verify_url, subject, book):\n    context = {\n        'verification_url': verify_url,\n        'book': book,\n    }\n\n    html_content = render_to_string('booking_confirmation.html', context)\n\n    email_from = settings.EMAIL_HOST_USER\n    recipient_list = [email]\n    plain_message = \"\"\n\n    send_mail(subject, plain_message, email_from, recipient_list, html_message=html_content)\n    \n\nclass PasswordResetView(generics.GenericAPIView):\n\n    def generate_otp(self,user):\n        # Generate a random 6-digit OTP\n        # return \"123456\"\n        user = str(user)\n        return user[0]+''.join(random.choices(string.digits, k=3)) + user[-1]\n    \n    serializer_class = PasswordNumberSerializer\n    def post(self, request):\n        serializer = self.serializer_class(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        email = serializer.data[\"email\"]\n        user = CustomUser.objects.filter(Q(email=email) | Q(phone = email)).first()\n        if user:\n        \n            otp = self.generate_otp(user.id)\n\n            email_type = \"reset_password\"\n            \n            subject = 'LifeQuest OTP'\n            if '@' in email:\n                email = user.email\n                sendPasswordResetMail(email, otp,subject,email_type,user)\n            else:\n                SendSms(contact=email,otp=otp,message=subject)\n          \n            cache_key = f\"password_reset_otp_{user.id}\"\n            cache.set(cache_key, otp, timeout=otp_time_expired)\n\n            return response.Response(\n                {\n                \"message\":\"OTP has been sent to your email address\"\n                },\n                status=status.HTTP_200_OK,\n            )\n        else:\n            return response.Response(\n                {\"message\": \"User doesn't exists\"},\n                status=status.HTTP_400_BAD_REQUEST,\n            )\n\ndef sendPasswordResetMail(email, otp, subject, email_type, user):\n    password_html_contents = \"\"  # Initialize to avoid UnboundLocalError\n    \n    if email_type == \"reset_password\":  # Ensure this matches what is passed\n        context = {\n            'otp': otp,\n            'user': user,\n            'verification_url': 'https://example.com/verify'\n        }\n        \n        password_html_contents = render_to_string('forget_password_get_otp.html', context)\n    \n    email_from = settings.EMAIL_HOST_USER\n    recipient_list = [email]\n    plain_message = \"\"\n    send_mail(subject, plain_message, email_from, recipient_list, html_message=password_html_contents)"
        }
    ]
}