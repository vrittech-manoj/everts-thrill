{
    "sourceFile": "blog/viewsets/blog_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 70,
            "patches": [
                {
                    "date": 1724906885229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724906893146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from ..models import Blog\n-from ..serializers.blog_serializers import BlogReadSerializers,BlogWriteSerializers\n+from ..serializers.blog_serializers import BlogListSerializers,BlogWriteSerializers\n from ..utilities.importbase import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n"
                },
                {
                    "date": 1724906903216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers,BlogWriteSerializers\n+from ..serializers.blog_serializers import BlogListSerializers,BlogWriteSerializers,BlogRetrieveSerializers\n from ..utilities.importbase import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n"
                },
                {
                    "date": 1724906967120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,27 @@\n from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers,BlogWriteSerializers,BlogRetrieveSerializers\n+from ..serializers.blog_serializers import BlogListSerializer, BlogWriteSerializer, BlogRetrieveSerializer\n from ..utilities.importbase import *\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n+    serializer_class = BlogListSerializer\n     permission_classes = [AdminViewSetsPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset  = Blog.objects.all().order_by(\"title\")\n+    queryset = Blog.objects.all().order_by(\"title\")\n     \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n-    ordering_fields = ['id','title']\n+    ordering_fields = ['id', 'title']\n \n     filterset_fields = {\n         'title': ['exact'],\n     }\n\\ No newline at end of file\n \n-\n     def get_serializer_class(self):\n-        if self.action in ['create','update','partial_update']:\n-            return BlogWriteSerializers\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializer\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializer\n         return super().get_serializer_class()\n-    \n"
                },
                {
                    "date": 1724906974161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializer\n+    serializer_class = BlogListSerializers\n     permission_classes = [AdminViewSetsPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Blog.objects.all().order_by(\"title\")\n     \n@@ -23,5 +23,5 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializer\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializer\n-        return super().get_serializer_class()\n\\ No newline at end of file\n+        return super().get_serializer_class()\n"
                },
                {
                    "date": 1724906980784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializer, BlogWriteSerializer, BlogRetrieveSerializer\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n from ..utilities.importbase import *\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n@@ -20,8 +20,8 @@\n     }\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializer\n+            return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializer\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1724907806610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,15 @@\n \n     filterset_fields = {\n         'title': ['exact'],\n     }\n+    \n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n-            return BlogRetrieveSerializer\n+            return BlogRetrieveSerializers\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1724907849696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [AdminViewSetsPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().order_by(\"title\")\n+    queryset = Blog.objects.all()#.order_by(\"title\")\n     \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title']\n"
                },
                {
                    "date": 1724915832486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     queryset = Blog.objects.all()#.order_by(\"title\")\n     \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n-    ordering_fields = ['id', 'title']\n+    ordering_fields = ['id', 'title','created_date']\n \n     filterset_fields = {\n         'title': ['exact'],\n     }\n"
                },
                {
                    "date": 1724915840053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from ..utilities.importbase import *\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    permission_classes = [AdminViewSetsPermission]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Blog.objects.all().order_by(\"title\")\n+    \n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title','created_date']\n+\n+    filterset_fields = {\n+        'title': ['exact'],\n+    }\n+    \n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return super().get_serializer_class()\n"
                },
                {
                    "date": 1724916222239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from ..utilities.importbase import *\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    permission_classes = [AdminViewSetsPermission]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Blog.objects.all().order_by(\"created_date\")\n+    \n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title','created_date']\n+\n+    filterset_fields = {\n+        'title': ['exact'],\n+    }\n+    \n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return super().get_serializer_class()\n"
                },
                {
                    "date": 1724916232920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,66 +28,4 @@\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return super().get_serializer_class()\n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from ..utilities.importbase import *\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().order_by(\"title\")\n-    \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title','created_date']\n-\n-    filterset_fields = {\n-        'title': ['exact'],\n-    }\n-    \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return super().get_serializer_class()\n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from ..utilities.importbase import *\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all()#.order_by(\"title\")\n-    \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title','created_date']\n-\n-    filterset_fields = {\n-        'title': ['exact'],\n-    }\n-    \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return super().get_serializer_class()\n"
                },
                {
                    "date": 1724916251473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n     ordering_fields = ['id', 'title','created_date']\n \n     filterset_fields = {\n         'title': ['exact'],\n+        'title': ['exact'],\n     }\n     \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1724916256602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     ordering_fields = ['id', 'title','created_date']\n \n     filterset_fields = {\n         'title': ['exact'],\n-        'title': ['exact'],\n+        'is_popular': ['exact'],\n     }\n     \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1725171710815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,30 +3,29 @@\n from ..utilities.importbase import *\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]\n+    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n     pagination_class = MyPageNumberPagination\n-    queryset = Blog.objects.all().order_by(\"created_date\")\n-    \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n-    ordering_fields = ['id', 'title','created_date']\n+    ordering_fields = ['id', 'title', 'created_date']\n+    queryset = Blog.objects.all().order_by(\"created_date\")  # Admin sees all blogs\n \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n     }\n-    \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n-        return super().get_serializer_class()\n+        return BlogListSerializers  # Default to BlogListSerializers for other actions\n+\n+    def perform_create(self, serializer):\n+        # Set the user to the currently logged-in user on create\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725171718545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default to BlogListSerializers for other actions\n+        return BlogListSerializers  #\n \n     def perform_create(self, serializer):\n-        # Set the user to the currently logged-in user on create\n         serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725171725192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    queryset = Blog.objects.all().order_by(\"created_date\")  # Admin sees all blogs\n+    queryset = Blog.objects.all().order_by(\"created_date\") \n \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725171916557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n+    permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n"
                },
                {
                    "date": 1725172246300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,20 +11,31 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    queryset = Blog.objects.all().order_by(\"created_date\") \n-\n+    \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n     }\n \n+    def get_queryset(self):\n+        queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # Check if 'is_popular' filter is present in the query parameters\n+        is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        if is_popular_filter is not None:\n+            # Filter the queryset to only include popular blogs\n+            queryset = queryset.filter(is_popular=True)\n+        \n+        return queryset\n+\n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n-        return BlogListSerializers  #\n+        return BlogListSerializers  # Default serializer\n \n     def perform_create(self, serializer):\n         serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725261949975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,6 +36,7 @@\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return BlogListSerializers  # Default serializer\n \n-    def perform_create(self, serializer):\n-        serializer.save(user=self.request.user)\n+def perform_create(self, serializer):\n+    user = self.request.user\n+    serializer.save(user=user.username)\n"
                },
                {
                    "date": 1725261956232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,7 +36,7 @@\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return BlogListSerializers  # Default serializer\n \n-def perform_create(self, serializer):\n-    user = self.request.user\n-    serializer.save(user=user.username)\n+    def perform_create(self, serializer):\n+        user = self.request.user\n+        serializer.save(user=user.username)\n"
                },
                {
                    "date": 1725340806267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from ..utilities.importbase import *\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework.permissions import IsAuthenticated\n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    permission_classes = [AdminViewSetsPermission] \n+    pagination_class = MyPageNumberPagination\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title', 'created_date']\n+    \n+    filterset_fields = {\n+        'title': ['exact'],\n+        'is_popular': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # Check if 'is_popular' filter is present in the query parameters\n+        is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        if is_popular_filter is not None:\n+            # Filter the queryset to only include popular blogs\n+            queryset = queryset.filter(is_popular=True)\n+        \n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return BlogListSerializers  # Default serializer\n+\n+   def perform_create(self, serializer):\n+    custom_user = self.request.user\n+    serializer.save(user=custom_user.username)\n+\n"
                },
                {
                    "date": 1725340865959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,50 +36,8 @@\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return BlogListSerializers  # Default serializer\n \n-   def perform_create(self, serializer):\n-    custom_user = self.request.user\n-    serializer.save(user=custom_user.username)\n+    # def perform_create(self, serializer):\n+    #     custom_user = self.request.user\n+    #     serializer.save(user=custom_user.username)\n \n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from ..utilities.importbase import *\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from rest_framework.permissions import IsAuthenticated\n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    permission_classes = [AdminViewSetsPermission] \n-    pagination_class = MyPageNumberPagination\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title', 'created_date']\n-    \n-    filterset_fields = {\n-        'title': ['exact'],\n-        'is_popular': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = Blog.objects.all().order_by(\"created_date\")\n-        \n-        # Check if 'is_popular' filter is present in the query parameters\n-        is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        if is_popular_filter is not None:\n-            # Filter the queryset to only include popular blogs\n-            queryset = queryset.filter(is_popular=True)\n-        \n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n-\n-    def perform_create(self, serializer):\n-        user = self.request.user\n-        serializer.save(user=user.username)\n"
                },
                {
                    "date": 1725526611570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n+    loo\n     \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725526618024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    loo\n+    lookup_field = slug'\n     \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725526633748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = slug'\n+    lookup_field = 'slug\"\n     \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725526639055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = 'slug\"\n+    lookup_field = \"slug\"\n     \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725527084285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = \"slug\"\n+    lookup_field = slug\"\n     \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725527210472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = slug\"\n+    lookup_field = \"slug\"\n     \n     filterset_fields = {\n         'title': ['exact'],\n         'is_popular': ['exact'],\n"
                },
                {
                    "date": 1725589760158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,16 +20,8 @@\n     }\n \n     def get_queryset(self):\n         queryset = Blog.objects.all().order_by(\"created_date\")\n-        \n-        # Check if 'is_popular' filter is present in the query parameters\n-        is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        if is_popular_filter is not None:\n-            # Filter the queryset to only include popular blogs\n-            queryset = queryset.filter(is_popular=True)\n-        \n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1725589859538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n+    \n     permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n"
                },
                {
                    "date": 1725589893959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    \n+    serializer_class = HeroSectionListSerializers\n     permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n"
                },
                {
                    "date": 1725589901618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = HeroSectionListSerializers\n+    serializer_class = BlogListSerializers\n     permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n"
                },
                {
                    "date": 1725589908572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n+        return BlogListSerializers  \n \n     # def perform_create(self, serializer):\n     #     custom_user = self.request.user\n     #     serializer.save(user=custom_user.username)\n"
                },
                {
                    "date": 1725590601803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n-        return BlogListSerializers  \n+        return BlogListSerializers  # Default serializer\n \n     # def perform_create(self, serializer):\n     #     custom_user = self.request.user\n     #     serializer.save(user=custom_user.username)\n"
                },
                {
                    "date": 1725590612831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n+    serializer_class\n     permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n@@ -21,8 +21,16 @@\n     }\n \n     def get_queryset(self):\n         queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # Check if 'is_popular' filter is present in the query parameters\n+        is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        if is_popular_filter is not None:\n+            # Filter the queryset to only include popular blogs\n+            queryset = queryset.filter(is_popular=True)\n+        \n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1725590618786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class\n+    serializer_class = BlogListSerializers\n     permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n"
                },
                {
                    "date": 1725591680392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,14 @@\n from ..models import Blog\n from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from ..utilities.importbase import *\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission] \n+    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n@@ -38,8 +37,7 @@\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return BlogListSerializers  # Default serializer\n \n-    # def perform_create(self, serializer):\n-    #     custom_user = self.request.user\n-    #     serializer.save(user=custom_user.username)\n-\n+    def perform_create(self, serializer):\n+        # Here, we are using the logged-in user and setting the `user` field properly\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725591688452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n \n+\n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n     pagination_class = MyPageNumberPagination\n"
                },
                {
                    "date": 1725591696431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n+from utilities.\n \n-\n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n     pagination_class = MyPageNumberPagination\n"
                },
                {
                    "date": 1725591706419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework.permissions import IsAuthenticated\n+from utilities.pagination import \n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n+    pagination_class = MyPageNumberPagination\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title', 'created_date']\n+    lookup_field = \"slug\"\n+    \n+    filterset_fields = {\n+        'title': ['exact'],\n+        'is_popular': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # Check if 'is_popular' filter is present in the query parameters\n+        is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        if is_popular_filter is not None:\n+            # Filter the queryset to only include popular blogs\n+            queryset = queryset.filter(is_popular=True)\n+        \n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return BlogListSerializers  # Default serializer\n+\n+    def perform_create(self, serializer):\n+        # Here, we are using the logged-in user and setting the `user` field properly\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725591712253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework.permissions import IsAuthenticated\n+from utilities.pagination import *\n+from \n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n+    pagination_class = MyPageNumberPagination\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title', 'created_date']\n+    lookup_field = \"slug\"\n+    \n+    filterset_fields = {\n+        'title': ['exact'],\n+        'is_popular': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # Check if 'is_popular' filter is present in the query parameters\n+        is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        if is_popular_filter is not None:\n+            # Filter the queryset to only include popular blogs\n+            queryset = queryset.filter(is_popular=True)\n+        \n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return BlogListSerializers  # Default serializer\n+\n+    def perform_create(self, serializer):\n+        # Here, we are using the logged-in user and setting the `user` field properly\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725591718249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n from utilities.pagination import *\n-from \n+from utilities\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n@@ -42,92 +42,4 @@\n \n     def perform_create(self, serializer):\n         # Here, we are using the logged-in user and setting the `user` field properly\n         serializer.save(user=self.request.user)\n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from rest_framework.permissions import IsAuthenticated\n-from utilities.pagination import \n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n-    pagination_class = MyPageNumberPagination\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = \"slug\"\n-    \n-    filterset_fields = {\n-        'title': ['exact'],\n-        'is_popular': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = Blog.objects.all().order_by(\"created_date\")\n-        \n-        # Check if 'is_popular' filter is present in the query parameters\n-        is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        if is_popular_filter is not None:\n-            # Filter the queryset to only include popular blogs\n-            queryset = queryset.filter(is_popular=True)\n-        \n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n-\n-    def perform_create(self, serializer):\n-        # Here, we are using the logged-in user and setting the `user` field properly\n-        serializer.save(user=self.request.user)\n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from rest_framework.permissions import IsAuthenticated\n-from utilities.\n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n-    pagination_class = MyPageNumberPagination\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = \"slug\"\n-    \n-    filterset_fields = {\n-        'title': ['exact'],\n-        'is_popular': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = Blog.objects.all().order_by(\"created_date\")\n-        \n-        # Check if 'is_popular' filter is present in the query parameters\n-        is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        if is_popular_filter is not None:\n-            # Filter the queryset to only include popular blogs\n-            queryset = queryset.filter(is_popular=True)\n-        \n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n-\n-    def perform_create(self, serializer):\n-        # Here, we are using the logged-in user and setting the `user` field properly\n-        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725591724519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n from utilities.pagination import *\n-from utilities\n+from utilities.importbase import \n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n"
                },
                {
                    "date": 1725591730263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,10 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n from utilities.pagination import *\n-from utilities.importbase import \n+from utilities.importbase import *\n+from \n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n"
                },
                {
                    "date": 1725591743195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n from utilities.pagination import *\n from utilities.importbase import *\n-from \n+from utilities. import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n     permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n"
                },
                {
                    "date": 1725591766618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,13 +5,13 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n from utilities.pagination import *\n from utilities.importbase import *\n-from utilities. import *\n+from utilities.permission import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n-    permission_classes = [IsAuthenticated]  # Ensure the user is authenticated\n+    permission_classes = [AdminViewSetsPermission]  # Ensure the user is authenticated\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n"
                },
                {
                    "date": 1725591773796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from utilities.permission import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]  # Ensure the user is authenticated\n+    permission_classes = [AdminViewSetsPermission\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n"
                },
                {
                    "date": 1725591785910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n-from utilities.pagination import *\n+from .utilities.pagination import *\n from utilities.importbase import *\n from utilities.permission import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission\n+    permission_classes = [AdminViewSetsPermission]\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title']\n     ordering_fields = ['id', 'title', 'created_date']\n"
                },
                {
                    "date": 1725591794671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n-from .utilities.pagination import *\n+from utilities.pagination import *\n from utilities.importbase import *\n from utilities.permission import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1725591800411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n-from utilities.pagination import *\n+from ...utilities.pagination import *\n from utilities.importbase import *\n from utilities.permission import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1725591811782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n from rest_framework import viewsets\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n from rest_framework.permissions import IsAuthenticated\n-from ...utilities.pagination import *\n-from utilities.importbase import *\n+from ..utilities.pagination import *\n+from ..utilities.importbase import *\n from utilities.permission import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     serializer_class = BlogListSerializers\n"
                },
                {
                    "date": 1725591950290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework.permissions import IsAuthenticated\n+from ..utilities.pagination import *\n+from ..utilities.importbase import *\n+from ..utilities.permission import *\n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    permission_classes = [AdminViewSetsPermission]\n+    pagination_class = MyPageNumberPagination\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title', 'created_date']\n+    lookup_field = \"slug\"\n+    \n+    filterset_fields = {\n+        'title': ['exact'],\n+        'is_popular': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # Check if 'is_popular' filter is present in the query parameters\n+        is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        if is_popular_filter is not None:\n+            # Filter the queryset to only include popular blogs\n+            queryset = queryset.filter(is_popular=True)\n+        \n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return BlogListSerializers  # Default serializer\n+\n+    def perform_create(self, serializer):\n+        # Here, we are using the logged-in user and setting the `user` field properly\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725592493439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+from ..models import Blog\n+from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n+from rest_framework import viewsets\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from rest_framework.permissions import IsAuthenticated\n+from ..utilities.pagination import *\n+from ..utilities.importbase import *\n+from ..utilities.permission import *\n+\n+class BlogViewSets(viewsets.ModelViewSet):\n+    serializer_class = BlogListSerializers\n+    permission_classes = [AdminViewSetsPermission]\n+    pagination_class = MyPageNumberPagination\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title', 'created_date']\n+    lookup_field = \"slug\"\n+    \n+    filterset_fields = {\n+        'title': ['exact'],\n+        'is_popular': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = Blog.objects.all().order_by(\"created_date\")\n+        \n+        # # Check if 'is_popular' filter is present in the query parameters\n+        # is_popular_filter = self.request.query_params.get('is_popular')\n+        \n+        # if is_popular_filter is not None:\n+        #     # Filter the queryset to only include popular blogs\n+        #     queryset = queryset.filter(is_popular=True)\n+        \n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return BlogWriteSerializers\n+        elif self.action == 'retrieve':\n+            return BlogRetrieveSerializers\n+        return BlogListSerializers  # Default serializer\n+\n+    def perform_create(self, serializer):\n+        # Here, we are using the logged-in user and setting the `user` field properly\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725592503862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,99 +40,7 @@\n         elif self.action == 'retrieve':\n             return BlogRetrieveSerializers\n         return BlogListSerializers  # Default serializer\n \n-    def perform_create(self, serializer):\n-        # Here, we are using the logged-in user and setting the `user` field properly\n-        serializer.save(user=self.request.user)\n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from rest_framework.permissions import IsAuthenticated\n-from ..utilities.pagination import *\n-from ..utilities.importbase import *\n-from ..utilities.permission import *\n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]\n-    pagination_class = MyPageNumberPagination\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = \"slug\"\n-    \n-    filterset_fields = {\n-        'title': ['exact'],\n-        'is_popular': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = Blog.objects.all().order_by(\"created_date\")\n-        \n-        # Check if 'is_popular' filter is present in the query parameters\n-        is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        if is_popular_filter is not None:\n-            # Filter the queryset to only include popular blogs\n-            queryset = queryset.filter(is_popular=True)\n-        \n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n-\n-    def perform_create(self, serializer):\n-        # Here, we are using the logged-in user and setting the `user` field properly\n-        serializer.save(user=self.request.user)\n-from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from rest_framework import viewsets\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from rest_framework.permissions import IsAuthenticated\n-from ..utilities.pagination import *\n-from ..utilities.importbase import *\n-from utilities.permission import *\n-\n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]\n-    pagination_class = MyPageNumberPagination\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = \"slug\"\n-    \n-    filterset_fields = {\n-        'title': ['exact'],\n-        'is_popular': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = Blog.objects.all().order_by(\"created_date\")\n-        \n-        # Check if 'is_popular' filter is present in the query parameters\n-        is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        if is_popular_filter is not None:\n-            # Filter the queryset to only include popular blogs\n-            queryset = queryset.filter(is_popular=True)\n-        \n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n-        elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n-\n-    def perform_create(self, serializer):\n-        # Here, we are using the logged-in user and setting the `user` field properly\n-        serializer.save(user=self.request.user)\n+    # def perform_create(self, serializer):\n+    #     # Here, we are using the logged-in user and setting the `user` field properly\n+    #     serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725592537579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'is_popular': ['exact'],\n     }\n \n     def get_queryset(self):\n-        queryset = Blog.objects.all().order_by(\"created_date\")\n+        queryset = Blog.objects.all()\n         \n         # # Check if 'is_popular' filter is present in the query parameters\n         # is_popular_filter = self.request.query_params.get('is_popular')\n         \n"
                },
                {
                    "date": 1725592549052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         # if is_popular_filter is not None:\n         #     # Filter the queryset to only include popular blogs\n         #     queryset = queryset.filter(is_popular=True)\n         \n-        return queryset\n+        \n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializers\n"
                },
                {
                    "date": 1725592554363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = Blog.objects.all()\n+    return queryset\n         \n         # # Check if 'is_popular' filter is present in the query parameters\n         # is_popular_filter = self.request.query_params.get('is_popular')\n         \n"
                },
                {
                    "date": 1725592803527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,29 @@\n+from rest_framework import viewsets\n from ..models import Blog\n-from ..serializers.blog_serializers import BlogListSerializers, BlogWriteSerializers, BlogRetrieveSerializers\n-from rest_framework import viewsets\n+from ..serializers.blog_serializers import BlogListSerializer, BlogWriteSerializer, BlogRetrieveSerializer\n+from rest_framework.permissions import IsAuthenticated\n+from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from rest_framework.permissions import IsAuthenticated\n-from ..utilities.pagination import *\n-from ..utilities.importbase import *\n-from ..utilities.permission import *\n \n-class BlogViewSets(viewsets.ModelViewSet):\n-    serializer_class = BlogListSerializers\n-    permission_classes = [AdminViewSetsPermission]\n-    pagination_class = MyPageNumberPagination\n+class BlogViewSet(viewsets.ModelViewSet):\n+    queryset = Blog.objects.all().order_by('-created_date')\n+    permission_classes = [IsAuthenticated]  # Ensures only authenticated users can access\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title']\n-    ordering_fields = ['id', 'title', 'created_date']\n-    lookup_field = \"slug\"\n-    \n-    filterset_fields = {\n-        'title': ['exact'],\n-        'is_popular': ['exact'],\n-    }\n+    search_fields = ['title', 'description']\n+    ordering_fields = ['created_date', 'title']\n \n     def get_queryset(self):\n-        queryset = Blog.objects.all()\n-    return queryset\n-        \n-        # # Check if 'is_popular' filter is present in the query parameters\n-        # is_popular_filter = self.request.query_params.get('is_popular')\n-        \n-        # if is_popular_filter is not None:\n-        #     # Filter the queryset to only include popular blogs\n-        #     queryset = queryset.filter(is_popular=True)\n-        \n-        \n+        return Blog.objects.all()\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n-            return BlogWriteSerializers\n+            return BlogWriteSerializer\n         elif self.action == 'retrieve':\n-            return BlogRetrieveSerializers\n-        return BlogListSerializers  # Default serializer\n+            return BlogRetrieveSerializer\n+        return BlogListSerializer\n \n-    # def perform_create(self, serializer):\n-    #     # Here, we are using the logged-in user and setting the `user` field properly\n-    #     serializer.save(user=self.request.user)\n+    def perform_create(self, serializer):\n+        serializer.save(user=self.request.user)\n+\n+    def perform_update(self, serializer):\n+        serializer.save(user=self.request.user)\n"
                },
                {
                    "date": 1725592813424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n \n class BlogViewSet(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n-    permission_classes = [IsAuthenticated]  # Ensures only authenticated users can access\n+    permission_classes = [IsAuthenticated]  \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description']\n     ordering_fields = ['created_date', 'title']\n \n"
                },
                {
                    "date": 1725592834020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from ..serializers.blog_serializers import BlogListSerializer, BlogWriteSerializer, BlogRetrieveSerializer\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n+from ..utilities.permission impo\n \n class BlogViewSet(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n     permission_classes = [IsAuthenticated]  \n"
                },
                {
                    "date": 1725592843250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n from ..serializers.blog_serializers import BlogListSerializer, BlogWriteSerializer, BlogRetrieveSerializer\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..utilities.permission impo\n+from ..utilities.permission import AdminViewSetsPermission\n \n class BlogViewSet(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n-    permission_classes = [IsAuthenticated]  \n+    permission_classes = [AdminViewSetsPermission]  \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description']\n     ordering_fields = ['created_date', 'title']\n \n"
                },
                {
                    "date": 1725592879438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..utilities.permission import AdminViewSetsPermission\n \n-class BlogViewSet(viewsets.ModelViewSet):\n+class BlogViewSets(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n     permission_classes = [AdminViewSetsPermission]  \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description']\n"
                },
                {
                    "date": 1725593571017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n     ordering_fields = ['created_date', 'title']\n \n     def get_queryset(self):\n         return Blog.objects.all()\n+    \n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return BlogWriteSerializer\n"
                },
                {
                    "date": 1725593577659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,14 @@\n     permission_classes = [AdminViewSetsPermission]  \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description']\n     ordering_fields = ['created_date', 'title']\n+    lookup_field = \"slug\"\n+    \n+    filterset_fields = {\n+        'title': ['exact'],\n+        'is_popular': ['exact'],\n+    }\n \n     def get_queryset(self):\n         return Blog.objects.all()\n     \n"
                },
                {
                    "date": 1725594181022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n from ..utilities.permission import AdminViewSetsPermission\n \n class BlogViewSets(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n-    permission_classes = [AdminViewSetsPermission]  \n+    permission_classes = [AdminViewSetsPermission] \n+    pagination_class = MyPageNumberPagination \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['title', 'description']\n     ordering_fields = ['created_date', 'title']\n     lookup_field = \"slug\"\n"
                },
                {
                    "date": 1725594188102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..utilities.permission import AdminViewSetsPermission\n+from ..utilities.\n \n class BlogViewSets(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n     permission_classes = [AdminViewSetsPermission] \n"
                },
                {
                    "date": 1725594193880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from rest_framework.permissions import IsAuthenticated\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..utilities.permission import AdminViewSetsPermission\n-from ..utilities.\n+from ..utilities.pagination import *\n \n class BlogViewSets(viewsets.ModelViewSet):\n     queryset = Blog.objects.all().order_by('-created_date')\n     permission_classes = [AdminViewSetsPermission] \n"
                },
                {
                    "date": 1725594233469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n     queryset = Blog.objects.all().order_by('-created_date')\n     permission_classes = [AdminViewSetsPermission] \n     pagination_class = MyPageNumberPagination \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['title', 'description']\n-    ordering_fields = ['created_date', 'title']\n+    search_fields = ['title']\n+    ordering_fields = ['id', 'title', 'created_date']\n     lookup_field = \"slug\"\n     \n     filterset_fields = {\n         'title': ['exact'],\n"
                },
                {
                    "date": 1725594260621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         'is_popular': ['exact'],\n     }\n \n     def get_queryset(self):\n-        return Blog.objects.all()\n+        return Blog.objects.all().order_by(\"created_date\")\n     \n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1725594281666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         'is_popular': ['exact'],\n     }\n \n     def get_queryset(self):\n-        return Blog.objects.all().order_by(\"created_date\")\n+        return Blog.objects\n     \n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                }
            ],
            "date": 1724906885229,
            "name": "Commit-0",
            "content": "from ..models import Blog\nfrom ..serializers.blog_serializers import BlogReadSerializers,BlogWriteSerializers\nfrom ..utilities.importbase import *\n\nclass BlogViewSets(viewsets.ModelViewSet):\n    serializer_class = BlogListSerializers\n    permission_classes = [AdminViewSetsPermission]\n    pagination_class = MyPageNumberPagination\n    queryset  = Blog.objects.all().order_by(\"title\")\n    \n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['title']\n    ordering_fields = ['id','title']\n\n    filterset_fields = {\n        'title': ['exact'],\n    }\n\n\n    def get_serializer_class(self):\n        if self.action in ['create','update','partial_update']:\n            return BlogWriteSerializers\n        return super().get_serializer_class()\n    "
        }
    ]
}