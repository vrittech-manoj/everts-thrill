{
    "sourceFile": "blog/serializers/blog_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 93,
            "patches": [
                {
                    "date": 1724906557875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724906574684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,14 @@\n from rest_framework import serializers\n from ..models import Blog\n+from accounts.models\n \n+class BookingAirlinesSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Airlines\n+        fields = '__all__'\n+        \n \n-\n class BlogReadSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n"
                },
                {
                    "date": 1724906579788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from rest_framework import serializers\n from ..models import Blog\n-from accounts.models\n+from accounts.models import CustomUser\n \n class BookingAirlinesSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Airlines\n"
                },
                {
                    "date": 1724906584959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BookingAirlinesSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Airlines\n+        fields = '__all__'\n+        \n+\n+class BlogReadSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724906595866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n from rest_framework import serializers\n from ..models import Blog\n from accounts.models import CustomUser\n \n-class BookingAirlinesSerializers(serializers.ModelSerializer):\n+class Serializers(serializers.ModelSerializer):\n     class Meta:\n-        model = Airlines\n+        model = CustomUser\n         fields = '__all__'\n         \n \n class BlogReadSerializers(serializers.ModelSerializer):\n@@ -15,24 +15,5 @@\n \n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n-        fields = '__all__'\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BookingAirlinesSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Airlines\n-        fields = '__all__'\n-        \n-\n-class BlogReadSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724906604970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import serializers\n from ..models import Blog\n from accounts.models import CustomUser\n \n-class Serializers(serializers.ModelSerializer):\n+class BlogUserSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n         fields = '__all__'\n         \n"
                },
                {
                    "date": 1724906757952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,27 @@\n from rest_framework import serializers\n-from ..models import Blog\n+from .models import Blog\n from accounts.models import CustomUser\n \n-class BlogUserSerializers(serializers.ModelSerializer):\n+class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = '__all__'\n-        \n+        fields = ['id', 'username', 'email']\n \n-class BlogReadSerializers(serializers.ModelSerializer):\n+class BlogListSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+    \n     class Meta:\n         model = Blog\n\\ No newline at end of file\n-        fields = '__all__'\n+        exclude = ['public_id', 'created_date', 'updated_date']\n \n-class BlogWriteSerializers(serializers.ModelSerializer):\n+class BlogRetrieveSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n     class Meta:\n         model = Blog\n-        fields = '__all__'\n+        exclude = ['public_id', 'created_date', 'updated_date']\n+\n+class BlogWriteSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        exclude = ['public_id', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1724906765053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from .models import Blog\n+from ..models import Blog\n from accounts.models import CustomUser\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -23,5 +23,5 @@\n \n class BlogWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n-        exclude = ['public_id', 'created_date', 'updated_date']\n\\ No newline at end of file\n+        exclude = ['public_id', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1724906813258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['id', 'username', 'email']\n+        fields = ['full_name', 'username', 'email']\n \n class BlogListSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n     \n"
                },
                {
                    "date": 1724906819061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', 'username', 'email']\n+        fields = ['full_name', 'username', 'image']\n \n class BlogListSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n     \n"
                },
                {
                    "date": 1724906824572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', 'username', 'image']\n+        fields = ['full_name', '', 'image']\n \n class BlogListSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n     \n"
                },
                {
                    "date": 1724906836227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,18 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', '', 'image']\n+        fields = ['full_name', 'image']\n \n class BlogListSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n         exclude = ['public_id', 'created_date', 'updated_date']\n \n-class BlogRetrieveSerializer(serializers.ModelSerializer):\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n"
                },
                {
                    "date": 1725165690208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,22 +6,21 @@\n     class Meta:\n         model = CustomUser\n         fields = ['full_name', 'image']\n \n-class BlogListSerializer(serializers.ModelSerializer):\n+class BlogListSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n-        exclude = ['public_id', 'created_date', 'updated_date']\n-\n+        \n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n         exclude = ['public_id', 'created_date', 'updated_date']\n \n-class BlogWriteSerializer(serializers.ModelSerializer):\n+class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         exclude = ['public_id', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1725165697437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n-        exclude = ['public_id', 'created_date', 'updated_date']\n+       \n \n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n-        exclude = ['public_id', 'created_date', 'updated_date']\n+\n"
                },
                {
                    "date": 1725166099167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n+        fields = ['full_name', 'image']\n         \n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1725166126506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n-        fields = ['full_name', 'image']\n+        fields = '['full_name', 'image']'\n         \n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1725166166469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n-        fields = '['full_name', 'image']'\n+        fields = \n         \n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1725166173199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n-        fields = \n+        fields = __all__\n         \n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1725166182242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,15 +11,16 @@\n     user = BlogUserSerializer(read_only=True)\n     \n     class Meta:\n         model = Blog\n-        fields = __all__\n+        fields = '__all__'\n         \n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n+        fields = '__all__'\n        \n \n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1725166200623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,5 +24,6 @@\n \n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n+        fields = '__all__'\n \n"
                },
                {
                    "date": 1725171567103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,25 @@\n     \n     class Meta:\n         model = Blog\n         fields = '__all__'\n-        \n+\n class BlogRetrieveSerializers(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n         fields = '__all__'\n-       \n \n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n+        read_only_fields = ['user']  # Make user field read-only\n \n+    def create(self, validated_data):\n+        validated_data['user'] = self.context['request'].user  # Set the user to the logged-in user\n+        return super().create(validated_data)\n+\n+    def update(self, instance, validated_data):\n+        validated_data['user'] = self.context['request'].user  # Ensure the user is the logged-in user during update\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725171572996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,6 @@\n         validated_data['user'] = self.context['request'].user  # Set the user to the logged-in user\n         return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n-        validated_data['user'] = self.context['request'].user  # Ensure the user is the logged-in user during update\n+        validated_data['user'] = self.context['request'].user  \n         return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725171578048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         fields = '__all__'\n         read_only_fields = ['user']  # Make user field read-only\n \n     def create(self, validated_data):\n-        validated_data['user'] = self.context['request'].user  # Set the user to the logged-in user\n+        validated_data['user'] = self.context['request'].user  \n         return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n         validated_data['user'] = self.context['request'].user  \n"
                },
                {
                    "date": 1725171584138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n-        read_only_fields = ['user']  # Make user field read-only\n+        read_only_fields = ['user']  \n \n     def create(self, validated_data):\n         validated_data['user'] = self.context['request'].user  \n         return super().create(validated_data)\n"
                },
                {
                    "date": 1725261918855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,14 @@\n         fields = '__all__'\n         read_only_fields = ['user']  \n \n     def create(self, validated_data):\n-        validated_data['user'] = self.context['request'].user  \n-        return super().create(validated_data)\n+    user = self.context['request'].user\n+    # validated_data['user'] = user \n+    validated_data['username'] = user.get_full_name() or user.username \n+    return super().create(validated_data)\n \n-    def update(self, instance, validated_data):\n-        validated_data['user'] = self.context['request'].user  \n-        return super().update(instance, validated_data)\n+def update(self, instance, validated_data):\n+    user = self.context['request'].user\n+    # validated_data['user'] = user \n+    validated_data['username'] = user.get_full_name() or user.username  \n+    return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725261929757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,14 @@\n         fields = '__all__'\n         read_only_fields = ['user']  \n \n     def create(self, validated_data):\n-    user = self.context['request'].user\n-    # validated_data['user'] = user \n-    validated_data['username'] = user.get_full_name() or user.username \n-    return super().create(validated_data)\n+        user = self.context['request'].user\n+        # validated_data['user'] = user \n+        validated_data['username'] = user.get_full_name() or user.username \n+        return super().create(validated_data)\n \n-def update(self, instance, validated_data):\n+    def update(self, instance, validated_data):\n     user = self.context['request'].user\n     # validated_data['user'] = user \n     validated_data['username'] = user.get_full_name() or user.username  \n     return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341015004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,14 @@\n         fields = '__all__'\n         read_only_fields = ['user']  \n \n     def create(self, validated_data):\n-        user = self.context['request'].user\n-        # validated_data['user'] = user \n-        validated_data['username'] = user.get_full_name() or user.username \n+        user = self.context['request'].user  # Get the logged-in user (CustomUser instance)\n+        validated_data['user'] = user  # Assign the CustomUser instance to the 'user' field\n+        validated_data['username'] = user.get_full_name() or user.username  # Assign the full name or username\n         return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n-    user = self.context['request'].user\n\\ No newline at end of file\n-    # validated_data['user'] = user \n-    validated_data['username'] = user.get_full_name() or user.username  \n-    return super().update(instance, validated_data)\n+        user = self.context['request'].user  # Get the logged-in user (CustomUser instance)\n+        validated_data['user'] = user  # Assign the CustomUser instance to the 'user' field\n+        validated_data['username'] = user.get_full_name() or user.username  # Assign the full name or username\n+        return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341075300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,14 @@\n         fields = '__all__'\n         read_only_fields = ['user']  \n \n     def create(self, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user (CustomUser instance)\n-        validated_data['user'] = user  # Assign the CustomUser instance to the 'user' field\n-        validated_data['username'] = user.get_full_name() or user.username  # Assign the full name or username\n+        user = self.context['request'].user  # This should be the CustomUser instance\n+        validated_data['user'] = user  # Assign the CustomUser instance, not a string\n+        validated_data['username'] = user.get_full_name() or user.username\n         return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user (CustomUser instance)\n-        validated_data['user'] = user  # Assign the CustomUser instance to the 'user' field\n-        validated_data['username'] = user.get_full_name() or user.username  # Assign the full name or username\n+        user = self.context['request'].user  # This should be the CustomUser instance\n+        validated_data['user'] = user  # Assign the CustomUser instance, not a string\n+        validated_data['username'] = user.get_full_name() or user.username\n         return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341134597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n     def create(self, validated_data):\n         user = self.context['request'].user  # This should be the CustomUser instance\n         validated_data['user'] = user  # Assign the CustomUser instance, not a string\n-        validated_data['username'] = user.get_full_name() or user.username\n+        validated_data['first_name'] = user.get_full_name() or user.username\n         return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # This should be the CustomUser instance\n"
                },
                {
                    "date": 1725341232042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,15 @@\n         fields = '__all__'\n         read_only_fields = ['user']  \n \n     def create(self, validated_data):\n-        user = self.context['request'].user  # This should be the CustomUser instance\n-        validated_data['user'] = user  # Assign the CustomUser instance, not a string\n-        validated_data['first_name'] = user.get_full_name() or user.username\n-        return super().create(validated_data)\n+        user = self.context['request'].user  # Get the logged-in user\n+        full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n-    def update(self, instance, validated_data):\n-        user = self.context['request'].user  # This should be the CustomUser instance\n-        validated_data['user'] = user  # Assign the CustomUser instance, not a string\n\\ No newline at end of file\n-        validated_data['username'] = user.get_full_name() or user.username\n-        return super().update(instance, validated_data)\n+        # Create the blog name using the full name\n+        blog_name = f\"{full_name}'s Blog\"\n+\n+        # Set the blog name in validated_data\n+        validated_data['name'] = blog_name\n+\n+        # Proceed with creating the Blog instance\n+        return super().create(validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341402736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']\n+\n+class BlogListSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+    \n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+        read_only_fields = ['user']  \n+\n+    def create(self, validated_data):\n+        user = self.context['request'].user  # Get the logged-in user\n+        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+\n+        # Set the full name in the created_by field\n+        validated_data['created_by'] = full_name\n+\n+        # Set the user field\n+        validated_data['user'] = user\n+\n+        # Create the Blog instance\n+        return super().create(validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341410727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n-        read_only_fields = ['user']  \n+        read_only_fields = ['created_by']  \n \n     def create(self, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n@@ -37,46 +37,5 @@\n         # Set the user field\n         validated_data['user'] = user\n \n         # Create the Blog instance\n-        return super().create(validated_data)\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']\n-\n-class BlogListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-    \n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-        read_only_fields = ['user']  \n-\n-    def create(self, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user\n-        full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-        # Create the blog name using the full name\n-        blog_name = f\"{full_name}'s Blog\"\n-\n-        # Set the blog name in validated_data\n-        validated_data['name'] = blog_name\n-\n-        # Proceed with creating the Blog instance\n         return super().create(validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725341416478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n-        read_only_fields = ['created_by']  \n+        read_only_fields = ['created_by',user]  \n \n     def create(self, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725341422235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n class BlogWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n-        read_only_fields = ['created_by',user]  \n+        read_only_fields = ['created_by','user']  \n \n     def create(self, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725341967298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,5 +37,6 @@\n         # Set the user field\n         validated_data['user'] = user\n \n         # Create the Blog instance\n-        return super().create(validated_data)\n\\ No newline at end of file\n+        return super().create(validated_data)\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725342469137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,5 +38,17 @@\n         validated_data['user'] = user\n \n         # Create the Blog instance\n         return super().create(validated_data)\n-    \n\\ No newline at end of file\n+    \n+    def update(self, instance, validated_data):\n+        user = self.context['request'].user  # Get the logged-in user\n+        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+\n+        # Update the created_by field with the full name of the logged-in user\n+        validated_data['created_by'] = full_name\n+\n+        # Update the user field\n+        validated_data['user'] = user\n+\n+        # Update the Blog instance\n+        return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725590238847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n         validated_data['created_by'] = full_name\n \n         # Set the user field\n         validated_data['user'] = user\n+        \n \n         # Create the Blog instance\n         return super().create(validated_data)\n     \n"
                },
                {
                    "date": 1725590244036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         validated_data['created_by'] = full_name\n \n         # Set the user field\n         validated_data['user'] = user\n-        \n+        blog_instance = Blog.objects.create(**validated_data)\n \n         # Create the Blog instance\n         return super().create(validated_data)\n     \n"
                },
                {
                    "date": 1725590326665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n \n         # Create the Blog instance\n-        return super().create(validated_data)\n+        blog_instance = Blog.objects.create(**validated_data)\n+        return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725590340015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,8 @@\n         # Set the user field\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n \n-        # Create the Blog instance\n-        blog_instance = Blog.objects.create(**validated_data)\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725590346455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n         # Set the user field\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n-\n+        blog_instance\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725590378814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \n         # Set the user field\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n-        blog_instance\n+        blog_instance.save()\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725590456343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,8 @@\n \n         # Set the user field\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n-        blog_instance.save()\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725590463927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n \n         # Set the full name in the created_by field\n         validated_data['created_by'] = full_name\n \n-        # Set the user field\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n         return blog_instance\n     \n"
                },
                {
                    "date": 1725590495956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n         # Set the full name in the created_by field\n         validated_data['created_by'] = full_name\n-\n         validated_data['user'] = user\n         blog_instance = Blog.objects.create(**validated_data)\n         return blog_instance\n     \n"
                },
                {
                    "date": 1725591092285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n \n         # Set the full name in the created_by field\n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n+        print\n         blog_instance = Blog.objects.create(**validated_data)\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1725591675038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']\n+\n+\n+class BlogListSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+    \n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+        # Remove created_by and user from read_only_fields as you are setting them manually\n+        read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n+\n+    def create(self, validated_data):\n+        user = self.context['request'].user  # Get the logged-in user\n+        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+\n+        # Set the full name in the created_by field\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+\n+        # Create the Blog instance\n+        blog_instance = Blog.objects.create(**validated_data)\n+        return blog_instance\n+    \n+    def update(self, instance, validated_data):\n+        user = self.context['request'].user  # Get the logged-in user\n+        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+\n+        # Update the created_by field with the full name of the logged-in user\n+        validated_data['created_by'] = full_name\n+\n+        # Update the user field\n+        validated_data['user'] = user\n+\n+        # Update the Blog instance\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725591903070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n         validated_data['user'] = user\n \n         # Create the Blog instance\n         blog_instance = Blog.objects.create(**validated_data)\n+        print()\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n@@ -54,56 +55,4 @@\n         validated_data['user'] = user\n \n         # Update the Blog instance\n         return super().update(instance, validated_data)\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']\n-\n-class BlogListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-    \n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-        read_only_fields = ['created_by','user']  \n-\n-    def create(self, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user\n-        full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-        # Set the full name in the created_by field\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-        print\n-        blog_instance = Blog.objects.create(**validated_data)\n-        return blog_instance\n-    \n-    def update(self, instance, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user\n-        full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-        # Update the created_by field with the full name of the logged-in user\n-        validated_data['created_by'] = full_name\n-\n-        # Update the user field\n-        validated_data['user'] = user\n-\n-        # Update the Blog instance\n-        return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725591909294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         validated_data['user'] = user\n \n         # Create the Blog instance\n         blog_instance = Blog.objects.create(**validated_data)\n-        print()\n+        print(**validated_data)\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592016741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         validated_data['user'] = user\n \n         # Create the Blog instance\n         blog_instance = Blog.objects.create(**validated_data)\n-        print(**validated_data)\n+        print(validated_data)\n         return blog_instance\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592083084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,20 @@\n         # Remove created_by and user from read_only_fields as you are setting them manually\n         read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n \n     def create(self, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user\n-        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+    user = self.context['request'].user  # Get the logged-in user\n+    full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n-        # Set the full name in the created_by field\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n+    # Set the full name in the created_by field\n+    validated_data['created_by'] = full_name\n+    validated_data['user'] = user\n \n-        # Create the Blog instance\n-        blog_instance = Blog.objects.create(**validated_data)\n-        print(validated_data)\n-        return blog_instance\n+    # Create the Blog instance\n+    blog_instance = Blog(**validated_data)\n+    blog_instance.save()  # Make sure to call save() to commit to the database\n+    return blog_instance\n+\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725592089021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,19 +31,19 @@\n         # Remove created_by and user from read_only_fields as you are setting them manually\n         read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n \n     def create(self, validated_data):\n-    user = self.context['request'].user  # Get the logged-in user\n-    full_name = user.full_name or user.username  # Get the full name or fallback to username\n+        user = self.context['request'].user  # Get the logged-in user\n+        full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n-    # Set the full name in the created_by field\n-    validated_data['created_by'] = full_name\n-    validated_data['user'] = user\n+        # Set the full name in the created_by field\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n \n-    # Create the Blog instance\n-    blog_instance = Blog(**validated_data)\n-    blog_instance.save()  # Make sure to call save() to commit to the database\n-    return blog_instance\n+        # Create the Blog instance\n+        blog_instance = Blog(**validated_data)\n+        blog_instance.save()  # Make sure to call save() to commit to the database\n+        return blog_instance\n \n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592214899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,21 +30,26 @@\n         fields = '__all__'\n         # Remove created_by and user from read_only_fields as you are setting them manually\n         read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n \n+    class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+        read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n+\n     def create(self, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n         # Set the full name in the created_by field\n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n \n-        # Create the Blog instance\n+        # Explicitly call save to ensure the data is committed to the database\n         blog_instance = Blog(**validated_data)\n-        blog_instance.save()  # Make sure to call save() to commit to the database\n+        blog_instance.save()  # Ensure you are calling save() to commit the object\n         return blog_instance\n-\n     \n     def update(self, instance, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725592225355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,12 @@\n         # Remove created_by and user from read_only_fields as you are setting them manually\n         read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n \n     class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-        read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n+        class Meta:\n+            model = Blog\n+            fields = '__all__'\n+            read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n \n     def create(self, validated_data):\n         user = self.context['request'].user  # Get the logged-in user\n         full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725592233814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,29 +36,29 @@\n             model = Blog\n             fields = '__all__'\n             read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n \n-    def create(self, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user\n-        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+        def create(self, validated_data):\n+            user = self.context['request'].user  # Get the logged-in user\n+            full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n-        # Set the full name in the created_by field\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n+            # Set the full name in the created_by field\n+            validated_data['created_by'] = full_name\n+            validated_data['user'] = user\n \n-        # Explicitly call save to ensure the data is committed to the database\n-        blog_instance = Blog(**validated_data)\n-        blog_instance.save()  # Ensure you are calling save() to commit the object\n-        return blog_instance\n+            # Explicitly call save to ensure the data is committed to the database\n+            blog_instance = Blog(**validated_data)\n+            blog_instance.save()  # Ensure you are calling save() to commit the object\n+            return blog_instance\n     \n-    def update(self, instance, validated_data):\n-        user = self.context['request'].user  # Get the logged-in user\n-        full_name = user.full_name or user.username  # Get the full name or fallback to username\n+        def update(self, instance, validated_data):\n+            user = self.context['request'].user  # Get the logged-in user\n+            full_name = user.full_name or user.username  # Get the full name or fallback to username\n \n-        # Update the created_by field with the full name of the logged-in user\n-        validated_data['created_by'] = full_name\n+            # Update the created_by field with the full name of the logged-in user\n+            validated_data['created_by'] = full_name\n \n-        # Update the user field\n-        validated_data['user'] = user\n+            # Update the user field\n+            validated_data['user'] = user\n \n-        # Update the Blog instance\n-        return super().update(instance, validated_data)\n+            # Update the Blog instance\n+            return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725592325947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n             validated_data['user'] = user\n \n             # Explicitly call save to ensure the data is committed to the database\n             blog_instance = Blog(**validated_data)\n-            blog_instance.save()  # Ensure you are calling save() to commit the object\n+            blog_instance.save(instance, validated_data)  # Ensure you are calling save() to commit the object\n             return blog_instance\n     \n         def update(self, instance, validated_data):\n             user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592334525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n             validated_data['user'] = user\n \n             # Explicitly call save to ensure the data is committed to the database\n             blog_instance = Blog(**validated_data)\n-            blog_instance.save(instance, validated_data)  # Ensure you are calling save() to commit the object\n+            blog_instance.save()  # Ensure you are calling save() to commit the object\n             return blog_instance\n     \n         def update(self, instance, validated_data):\n             user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592342258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']\n+\n+\n+class BlogListSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+    \n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+        # Remove created_by and user from read_only_fields as you are setting them manually\n+        read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n+\n+    class BlogWriteSerializers(serializers.ModelSerializer):\n+        class Meta:\n+            model = Blog\n+            fields = '__all__'\n+            read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n+\n+        def create(self, validated_data):\n+            user = self.context['request'].user  # Get the logged-in user\n+            full_name = user.full_name or user.username  # Get the full name or fallback to username\n+\n+            # Set the full name in the created_by field\n+            validated_data['created_by'] = full_name\n+            validated_data['user'] = user\n+\n+            # Explicitly call save to ensure the data is committed to the database\n+            blog_instance = Blog(**validated_data)\n+            blog_instance.save() \n+            print(# Ensure you are calling save() to commit the object\n+            return blog_instance\n+    \n+        def update(self, instance, validated_data):\n+            user = self.context['request'].user  # Get the logged-in user\n+            full_name = user.full_name or user.username  # Get the full name or fallback to username\n+\n+            # Update the created_by field with the full name of the logged-in user\n+            validated_data['created_by'] = full_name\n+\n+            # Update the user field\n+            validated_data['user'] = user\n+\n+            # Update the Blog instance\n+            return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725592347593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n             # Explicitly call save to ensure the data is committed to the database\n             blog_instance = Blog(**validated_data)\n             blog_instance.save() \n-            print(# Ensure you are calling save() to commit the object\n+            print(validated_data\\)# Ensure you are calling save() to commit the object\n             return blog_instance\n     \n         def update(self, instance, validated_data):\n             user = self.context['request'].user  # Get the logged-in user\n@@ -62,68 +62,4 @@\n             validated_data['user'] = user\n \n             # Update the Blog instance\n             return super().update(instance, validated_data)\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']\n-\n-\n-class BlogListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-    \n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-\n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-\n-class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-        # Remove created_by and user from read_only_fields as you are setting them manually\n-        read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n-\n-    class BlogWriteSerializers(serializers.ModelSerializer):\n-        class Meta:\n-            model = Blog\n-            fields = '__all__'\n-            read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n-\n-        def create(self, validated_data):\n-            user = self.context['request'].user  # Get the logged-in user\n-            full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-            # Set the full name in the created_by field\n-            validated_data['created_by'] = full_name\n-            validated_data['user'] = user\n-\n-            # Explicitly call save to ensure the data is committed to the database\n-            blog_instance = Blog(**validated_data)\n-            blog_instance.save()  # Ensure you are calling save() to commit the object\n-            return blog_instance\n-    \n-        def update(self, instance, validated_data):\n-            user = self.context['request'].user  # Get the logged-in user\n-            full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-            # Update the created_by field with the full name of the logged-in user\n-            validated_data['created_by'] = full_name\n-\n-            # Update the user field\n-            validated_data['user'] = user\n-\n-            # Update the Blog instance\n-            return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725592380022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,14 @@\n \n             # Set the full name in the created_by field\n             validated_data['created_by'] = full_name\n             validated_data['user'] = user\n+            \n \n             # Explicitly call save to ensure the data is committed to the database\n             blog_instance = Blog(**validated_data)\n             blog_instance.save() \n-            print(validated_data\\)# Ensure you are calling save() to commit the object\n+            print(validated_data)# Ensure you are calling save() to commit the object\n             return blog_instance\n     \n         def update(self, instance, validated_data):\n             user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592422467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \n             # Set the full name in the created_by field\n             validated_data['created_by'] = full_name\n             validated_data['user'] = user\n-            \n+            print(full_name)\n \n             # Explicitly call save to ensure the data is committed to the database\n             blog_instance = Blog(**validated_data)\n             blog_instance.save() \n"
                },
                {
                    "date": 1725592430407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n             # Explicitly call save to ensure the data is committed to the database\n             blog_instance = Blog(**validated_data)\n             blog_instance.save() \n-            print(validated_data)# Ensure you are calling save() to commit the object\n+            print(blog_instance)# Ensure you are calling save() to commit the object\n             return blog_instance\n     \n         def update(self, instance, validated_data):\n             user = self.context['request'].user  # Get the logged-in user\n"
                },
                {
                    "date": 1725592449875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n     class BlogWriteSerializers(serializers.ModelSerializer):\n         class Meta:\n             model = Blog\n             fields = '__all__'\n-            read_only_fields = ['created_by', 'user', 'created_date', 'updated_date']\n \n         def create(self, validated_data):\n             user = self.context['request'].user  # Get the logged-in user\n             full_name = user.full_name or user.username  # Get the full name or fallback to username\n"
                },
                {
                    "date": 1725592464364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,33 +33,5 @@\n \n     class BlogWriteSerializers(serializers.ModelSerializer):\n         class Meta:\n             model = Blog\n-            fields = '__all__'\n-\n-        def create(self, validated_data):\n-            user = self.context['request'].user  # Get the logged-in user\n-            full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-            # Set the full name in the created_by field\n-            validated_data['created_by'] = full_name\n-            validated_data['user'] = user\n-            print(full_name)\n-\n-            # Explicitly call save to ensure the data is committed to the database\n-            blog_instance = Blog(**validated_data)\n-            blog_instance.save() \n-            print(blog_instance)# Ensure you are calling save() to commit the object\n-            return blog_instance\n-    \n-        def update(self, instance, validated_data):\n-            user = self.context['request'].user  # Get the logged-in user\n-            full_name = user.full_name or user.username  # Get the full name or fallback to username\n-\n-            # Update the created_by field with the full name of the logged-in user\n-            validated_data['created_by'] = full_name\n-\n-            # Update the user field\n-            validated_data['user'] = user\n-\n-            # Update the Blog instance\n-            return super().update(instance, validated_data)\n+            fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725592470058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,35 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']\n+\n+\n+class BlogListSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+    \n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+\n+class BlogRetrieveSerializers(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+    class BlogWriteSerializers(serializers.ModelSerializer):\n+        class Meta:\n+            model = Blog\n+            fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725592563825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,42 +31,5 @@\n \n     class BlogWriteSerializers(serializers.ModelSerializer):\n         class Meta:\n             model = Blog\n-            fields = '__all__'\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']\n-\n-\n-class BlogListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-    \n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-\n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-\n-class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-        # Remove created_by and user from read_only_fields as you are setting them manually\n-        read_only_fields = ['created_at', 'updated_at']  # Keep these fields read-only\n-\n-    class BlogWriteSerializers(serializers.ModelSerializer):\n-        class Meta:\n-            model = Blog\n             fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725592732997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,32 +4,36 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', 'image']\n+        fields = ['full_name', 'image']  # Adjust fields as needed\n \n+class BlogListSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n \n-class BlogListSerializers(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-    \n     class Meta:\n         model = Blog\n-        fields = '__all__'\n+        fields = ['public_id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n \n-\n-class BlogRetrieveSerializers(serializers.ModelSerializer):\n+class BlogRetrieveSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n         fields = '__all__'\n \n-\n-class BlogWriteSerializers(serializers.ModelSerializer):\n+class BlogWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n\\ No newline at end of file\n-        fields = '__all__'\n+        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Fields you allow to be written\n \n-    class BlogWriteSerializers(serializers.ModelSerializer):\n-        class Meta:\n-            model = Blog\n-            fields = '__all__'\n+    def create(self, validated_data):\n+        user = self.context['request'].user\n+        validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n+        validated_data['user'] = user  # Set the 'user' field to the logged-in user\n+        return Blog.objects.create(**validated_data)\n+\n+    def update(self, instance, validated_data):\n+        user = self.context['request'].user\n+        validated_data['created_by'] = user.full_name  # Optionally update 'created_by'\n+        validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725592738911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n-        fields = ['public_id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n+        fields = ['public_id',id' 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n \n class BlogRetrieveSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n@@ -35,5 +35,5 @@\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n         validated_data['created_by'] = user.full_name  # Optionally update 'created_by'\n         validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n-        return super().update(instance, validated_data)\n\\ No newline at end of file\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725592744027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n-        fields = ['public_id',id' 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n+        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n \n class BlogRetrieveSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1725592759469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,9 @@\n \n class BlogWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n-        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Fields you allow to be written\n-\n+        fields = \n     def create(self, validated_data):\n         user = self.context['request'].user\n         validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n         validated_data['user'] = user  # Set the 'user' field to the logged-in user\n"
                },
                {
                    "date": 1725592764580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class BlogWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n-        fields = \n+        fields = '__all__'\n     def create(self, validated_data):\n         user = self.context['request'].user\n         validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n         validated_data['user'] = user  # Set the 'user' field to the logged-in user\n"
                },
                {
                    "date": 1725592777645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,9 @@\n \n class BlogUserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CustomUser\n-        fields = ['full_name', 'image']  # Adjust fields as needed\n-\n+        fields = ['full_name', 'image']  \n class BlogListSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1725592884403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']  \n+class BlogListSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n+\n+class BlogRetrieveSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+class BlogWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+    def create(self, validated_data):\n+        user = self.context['request'].user\n+        validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n+        validated_data['user'] = user  # Set the 'user' field to the logged-in user\n+        return Blog.objects.create(**validated_data)\n+\n+    def update(self, instance, validated_data):\n+        user = self.context['request'].user\n+        validated_data['created_by'] = user.full_name  # Optionally update 'created_by'\n+        validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725592980678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,53 +19,17 @@\n     class Meta:\n         model = Blog\n         fields = '__all__'\n \n-class BlogWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-    def create(self, validated_data):\n-        user = self.context['request'].user\n-        validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n-        validated_data['user'] = user  # Set the 'user' field to the logged-in user\n-        return Blog.objects.create(**validated_data)\n-\n-    def update(self, instance, validated_data):\n-        user = self.context['request'].user\n-        validated_data['created_by'] = user.full_name  # Optionally update 'created_by'\n-        validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n-        return super().update(instance, validated_data)\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']  \n-class BlogListSerializer(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n-\n-class BlogRetrieveSerializer(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n class BlogWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n     def create(self, validated_data):\n         user = self.context['request'].user\n         validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n         validated_data['user'] = user  # Set the 'user' field to the logged-in user\n+        print()\n         return Blog.objects.create(**validated_data)\n \n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n"
                },
                {
                    "date": 1725592997838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     def create(self, validated_data):\n         user = self.context['request'].user\n         validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n         validated_data['user'] = user  # Set the 'user' field to the logged-in user\n-        print()\n+        print(validated_data)\n         return Blog.objects.create(**validated_data)\n \n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n"
                },
                {
                    "date": 1725593168128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,15 +23,32 @@\n class BlogWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Blog\n         fields = '__all__'\n+    class BlogWriteSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n+\n     def create(self, validated_data):\n         user = self.context['request'].user\n-        validated_data['created_by'] = user.full_name  # Set 'created_by' to the logged-in user's full name\n-        validated_data['user'] = user  # Set the 'user' field to the logged-in user\n+        full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n+\n+        # Set the created_by field and user\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+\n+        # Debugging: Print validated data to ensure it’s correct\n         print(validated_data)\n-        return Blog.objects.create(**validated_data)\n \n+        # Attempt to save and handle errors\n+        try:\n+            blog_instance = Blog.objects.create(**validated_data)\n+        except Exception as e:\n+            print(f\"Error creating blog: {e}\")\n+            raise serializers.ValidationError(f\"Error saving blog: {str(e)}\")\n+\n+        return blog_instance\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n         validated_data['created_by'] = user.full_name  # Optionally update 'created_by'\n         validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n"
                },
                {
                    "date": 1725593173712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     class Meta:\n         model = Blog\n         fields = '__all__'\n     class BlogWriteSerializer(serializers.ModelSerializer):\n-    class Meta:\n+     class Meta:\n         model = Blog\n         fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n \n     def create(self, validated_data):\n"
                },
                {
                    "date": 1725593194858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n         validated_data['user'] = user\n \n         # Debugging: Print validated data to ensure it’s correct\n         print(validated_data)\n+        blog_instance\n \n         # Attempt to save and handle errors\n         try:\n             blog_instance = Blog.objects.create(**validated_data)\n"
                },
                {
                    "date": 1725593309086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n         validated_data['user'] = user\n \n         # Debugging: Print validated data to ensure it’s correct\n         print(validated_data)\n-        blog_instance\n \n         # Attempt to save and handle errors\n         try:\n             blog_instance = Blog.objects.create(**validated_data)\n"
                },
                {
                    "date": 1725593338793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,9 @@\n         # Attempt to save and handle errors\n         try:\n             blog_instance = Blog.objects.create(**validated_data)\n         except Exception as e:\n-            print(f\"Error creating blog: {e}\")\n-            raise serializers.ValidationError(f\"Error saving blog: {str(e)}\")\n+            \n \n         return blog_instance\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n"
                },
                {
                    "date": 1725593356358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,17 +35,12 @@\n \n         # Set the created_by field and user\n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n-\n-        # Debugging: Print validated data to ensure it’s correct\n-        print(validated_data)\n-\n-        # Attempt to save and handle errors\n         try:\n             blog_instance = Blog.objects.create(**validated_data)\n         except Exception as e:\n-            \n+            pass\n \n         return blog_instance\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n"
                },
                {
                    "date": 1725593363723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n     def create(self, validated_data):\n         user = self.context['request'].user\n         full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n \n-        # Set the created_by field and user\n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n         try:\n             blog_instance = Blog.objects.create(**validated_data)\n"
                },
                {
                    "date": 1725593371448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n \n     def create(self, validated_data):\n         user = self.context['request'].user\n-        full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n+        full_name = user.full_name or user.username  \n \n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n         try:\n@@ -42,7 +42,7 @@\n \n         return blog_instance\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n-        validated_data['created_by'] = user.full_name  # Optionally update 'created_by'\n+        validated_data['created_by'] = user.full_name  \n         validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n         return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1725593458128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,7 +42,23 @@\n \n         return blog_instance\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n-        validated_data['created_by'] = user.full_name  \n-        validated_data['user'] = user  # Ensure the logged-in user remains the owner of the post\n-        return super().update(instance, validated_data)\n+        full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n+\n+        # Update the created_by field and user\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+\n+        # Debugging: Print validated data to ensure it’s correct\n+        print(validated_data)\n+\n+        # Attempt to update the instance and handle errors\n+        try:\n+            for key, value in validated_data.items():\n+                setattr(instance, key, value)  # Set the validated fields to the instance\n+            instance.save()  # Save the updated instance\n+        except Exception as e:\n+            print(f\"Error updating blog: {e}\")\n+            raise serializers.ValidationError(f\"Error updating blog: {str(e)}\")\n+\n+        return instance\n"
                },
                {
                    "date": 1725593464022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']  \n+class BlogListSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n+\n+class BlogRetrieveSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+class BlogWriteSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+    class BlogWriteSerializer(serializers.ModelSerializer):\n+     class Meta:\n+        model = Blog\n+        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n+\n+    def create(self, validated_data):\n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        try:\n+            blog_instance = Blog.objects.create(**validated_data)\n+        except Exception as e:\n+            pass\n+\n+        return blog_instance\n+    def update(self, instance, validated_data):\n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n+\n+        # Update the created_by field and user\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+\n+        # Debugging: Print validated data to ensure it’s correct\n+        print(validated_data)\n+\n+        # Attempt to update the instance and handle errors\n+        try:\n+            for key, value in validated_data.items():\n+                setattr(instance, key, value)  # Set the validated fields to the instance\n+            instance.save()  # Save the updated instance\n+        except Exception as e:\n+            pass\n+\n+        return instance\n"
                },
                {
                    "date": 1725593470830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,73 +55,9 @@\n         # Attempt to update the instance and handle errors\n         try:\n             for key, value in validated_data.items():\n                 setattr(instance, key, value)  # Set the validated fields to the instance\n-            instance.save()  # Save the updated instance\n+            instance.save()  \n         except Exception as e:\n             pass\n \n         return instance\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']  \n-class BlogListSerializer(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n-\n-class BlogRetrieveSerializer(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogWriteSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-    class BlogWriteSerializer(serializers.ModelSerializer):\n-     class Meta:\n-        model = Blog\n-        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n-\n-    def create(self, validated_data):\n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-        try:\n-            blog_instance = Blog.objects.create(**validated_data)\n-        except Exception as e:\n-            pass\n-\n-        return blog_instance\n-    def update(self, instance, validated_data):\n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n-\n-        # Update the created_by field and user\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-\n-        # Debugging: Print validated data to ensure it’s correct\n-        print(validated_data)\n-\n-        # Attempt to update the instance and handle errors\n-        try:\n-            for key, value in validated_data.items():\n-                setattr(instance, key, value)  # Set the validated fields to the instance\n-            instance.save()  # Save the updated instance\n-        except Exception as e:\n-            print(f\"Error updating blog: {e}\")\n-            raise serializers.ValidationError(f\"Error updating blog: {str(e)}\")\n-\n-        return instance\n"
                },
                {
                    "date": 1725593487266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,16 +47,11 @@\n \n         # Update the created_by field and user\n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n-\n-        # Debugging: Print validated data to ensure it’s correct\n-        print(validated_data)\n-\n-        # Attempt to update the instance and handle errors\n         try:\n             for key, value in validated_data.items():\n-                setattr(instance, key, value)  # Set the validated fields to the instance\n+                setattr(instance, key, value)  \n             instance.save()  \n         except Exception as e:\n             pass\n \n"
                },
                {
                    "date": 1725593494108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+from rest_framework import serializers\n+from ..models import Blog\n+from accounts.models import CustomUser\n+\n+class BlogUserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CustomUser\n+        fields = ['full_name', 'image']  \n+class BlogListSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n+\n+class BlogRetrieveSerializer(serializers.ModelSerializer):\n+    user = BlogUserSerializer(read_only=True)\n+\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+\n+class BlogWriteSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Blog\n+        fields = '__all__'\n+    class BlogWriteSerializer(serializers.ModelSerializer):\n+     class Meta:\n+        model = Blog\n+        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n+\n+    def create(self, validated_data):\n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        try:\n+            blog_instance = Blog.objects.create(**validated_data)\n+        except Exception as e:\n+            pass\n+\n+        return blog_instance\n+    def update(self, instance, validated_data):\n+        user = self.context['request'].user\n+        full_name = user.full_name or user.username  \n+\n+        validated_data['created_by'] = full_name\n+        validated_data['user'] = user\n+        try:\n+            for key, value in validated_data.items():\n+                setattr(instance, key, value)  \n+            instance.save()  \n+        except Exception as e:\n+            pass\n+\n+        return instance\n"
                },
                {
                    "date": 1725593503609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         fields = '__all__'\n     class BlogWriteSerializer(serializers.ModelSerializer):\n      class Meta:\n         model = Blog\n-        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n+        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  \n \n     def create(self, validated_data):\n         user = self.context['request'].user\n         full_name = user.full_name or user.username  \n@@ -43,9 +43,8 @@\n         return blog_instance\n     def update(self, instance, validated_data):\n         user = self.context['request'].user\n         full_name = user.full_name or user.username  \n-\n         validated_data['created_by'] = full_name\n         validated_data['user'] = user\n         try:\n             for key, value in validated_data.items():\n@@ -54,62 +53,4 @@\n         except Exception as e:\n             pass\n \n         return instance\n-from rest_framework import serializers\n-from ..models import Blog\n-from accounts.models import CustomUser\n-\n-class BlogUserSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = CustomUser\n-        fields = ['full_name', 'image']  \n-class BlogListSerializer(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n-\n-class BlogRetrieveSerializer(serializers.ModelSerializer):\n-    user = BlogUserSerializer(read_only=True)\n-\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-\n-class BlogWriteSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Blog\n-        fields = '__all__'\n-    class BlogWriteSerializer(serializers.ModelSerializer):\n-     class Meta:\n-        model = Blog\n-        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  # Specify fields you want to write\n-\n-    def create(self, validated_data):\n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  \n-\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-        try:\n-            blog_instance = Blog.objects.create(**validated_data)\n-        except Exception as e:\n-            pass\n-\n-        return blog_instance\n-    def update(self, instance, validated_data):\n-        user = self.context['request'].user\n-        full_name = user.full_name or user.username  # Get the user's full name or username as fallback\n-\n-        # Update the created_by field and user\n-        validated_data['created_by'] = full_name\n-        validated_data['user'] = user\n-        try:\n-            for key, value in validated_data.items():\n-                setattr(instance, key, value)  \n-            instance.save()  \n-        except Exception as e:\n-            pass\n-\n-        return instance\n"
                },
                {
                    "date": 1725593509170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         fields = '__all__'\n     class BlogWriteSerializer(serializers.ModelSerializer):\n      class Meta:\n         model = Blog\n-        fields = ['title', 'description', 'featured_image', 'read_time', 'is_popular']  \n+        fields = \n \n     def create(self, validated_data):\n         user = self.context['request'].user\n         full_name = user.full_name or user.username  \n"
                },
                {
                    "date": 1725593514724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         fields = '__all__'\n     class BlogWriteSerializer(serializers.ModelSerializer):\n      class Meta:\n         model = Blog\n-        fields = \n+        fields = '__all__'\n \n     def create(self, validated_data):\n         user = self.context['request'].user\n         full_name = user.full_name or user.username  \n"
                },
                {
                    "date": 1725594395330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n-        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  # Adjust fields as necessary\n+        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  \n \n class BlogRetrieveSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1725594405447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n-        fields = ['public_id','id', 'title', 'slug', 'description', 'created_date', 'created_by', 'read_time', 'is_popular', 'user', 'featured_image']  \n+        fields = '__all'\n \n class BlogRetrieveSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                },
                {
                    "date": 1726131002377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     user = BlogUserSerializer(read_only=True)\n \n     class Meta:\n         model = Blog\n-        fields = '__all'\n+        fields = '__all__'\n \n class BlogRetrieveSerializer(serializers.ModelSerializer):\n     user = BlogUserSerializer(read_only=True)\n \n"
                }
            ],
            "date": 1724906557875,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Blog\n\n\n\nclass BlogReadSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Blog\n        fields = '__all__'\n\nclass BlogWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Blog\n        fields = '__all__'"
        }
    ]
}