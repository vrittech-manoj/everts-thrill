{
    "sourceFile": "report/export.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1724825655330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724825812405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,9 @@\n from rest_framework.views import APIView\n from rest_framework import status\n from django.http import HttpResponse\n import csv\n-from destination.models import Package, Destination, DestinationGalleryImages\n-from review.models import Review\n-from collection.models import Collection\n-from departure.models import Departure\n-from booking.models import DestinationBook\n-from activities.models import Activity\n+from django.apps import apps\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class GetSampleAPIView(APIView):\n@@ -18,18 +13,20 @@\n     API view to generate and download sample data in CSV format for different models.\n     \"\"\"\n     \n     model_mapping = {\n-        \"package\": Package,\n-        \"destination\": Destination,\n-        \"gallery-images\": DestinationGalleryImages,\n-        \"review\": Review,\n-        \"collection\": Collection,\n-        \"departure\": Departure,\n-        \"destination-book\": DestinationBook,\n-        \"activity\": Activity,\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n     }\n \n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n     @swagger_auto_schema(\n         operation_description=\"Get a sample CSV for the specified model type.\",\n         manual_parameters=[\n             openapi.Parameter(\n@@ -42,15 +39,27 @@\n         ],\n         responses={200: 'CSV file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n-        model_class = self.model_mapping.get(type)\n+        model_class_path = self.model_mapping.get(type)\n \n-        if not model_class:\n+        if not model_class_path:\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Get all fields of the model except 'id'\n-        column_list = [field.name for field in model_class._meta.fields if field.name != 'id']\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields\n+        column_list = []\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields:\n+                if field.is_relation and field.many_to_one:\n+                    # Handle ForeignKey relations, include the related model's primary key\n+                    column_list.append(f\"{field.name}_id\")\n+                elif not field.is_relation:\n+                    column_list.append(field.name)\n+\n         queryset = model_class.objects.all()\n \n         response = HttpResponse(content_type='text/csv')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n@@ -61,8 +70,16 @@\n         writer.writerow(column_list)\n \n         # Write data rows\n         for data in queryset:\n-            data_lists = [getattr(data, column) for column in column_list]\n-            writer.writerow(data_lists)\n+            data_row = []\n+            for column in column_list:\n+                if \"_id\" in column:\n+                    # ForeignKey relation, get related object's ID\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_object = getattr(data, related_field_name)\n+                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n \n         return response\n"
                },
                {
                    "date": 1724826004367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,16 @@\n         # Get all fields of the model, excluding specified fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if field.is_relation and field.many_to_one:\n-                    # Handle ForeignKey relations, include the related model's primary key\n-                    column_list.append(f\"{field.name}_id\")\n-                elif not field.is_relation:\n+                if field.is_relation:\n+                    if field.many_to_one or field.one_to_one:\n+                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        # For ManyToManyField, append related objects' names\n+                        column_list.append(f\"{field.name}_names\")\n+                else:\n                     column_list.append(field.name)\n \n         queryset = model_class.objects.all()\n \n@@ -72,14 +76,13 @@\n         # Write data rows\n         for data in queryset:\n             data_row = []\n             for column in column_list:\n-                if \"_id\" in column:\n-                    # ForeignKey relation, get related object's ID\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, get related object's ID\n                     related_field_name = column.replace(\"_id\", \"\")\n                     related_object = getattr(data, related_field_name)\n                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                else:\n-                    data_row.append(getattr(data, column))\n-            writer.writerow(data_row)\n-\n-        return response\n+                elif column.endswith(\"_names\"):\n+                    # ManyToManyField relation, get related objects' names\n+                    related_field_name = column.replace(\"_names\", \"\")\n+                    related_o\n"
                },
                {
                    "date": 1724826013872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,12 @@\n                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n                 elif column.endswith(\"_names\"):\n                     # ManyToManyField relation, get related objects' names\n                     related_field_name = column.replace(\"_names\", \"\")\n-                    related_o\n+                    related_objects = getattr(data, related_field_name).all()\n+                    related_names = \", \".join(str(obj) for obj in related_objects)\n+                    data_row.append(related_names)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n+\n+        return response\n"
                }
            ],
            "date": 1724825655330,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework import status\nfrom django.http import HttpResponse\nimport csv\nfrom destination.models import Package, Destination, DestinationGalleryImages\nfrom review.models import Review\nfrom collection.models import Collection\nfrom departure.models import Departure\nfrom booking.models import DestinationBook\nfrom activities.models import Activity\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\n\nclass GetSampleAPIView(APIView):\n    \"\"\"\n    API view to generate and download sample data in CSV format for different models.\n    \"\"\"\n    \n    model_mapping = {\n        \"package\": Package,\n        \"destination\": Destination,\n        \"gallery-images\": DestinationGalleryImages,\n        \"review\": Review,\n        \"collection\": Collection,\n        \"departure\": Departure,\n        \"destination-book\": DestinationBook,\n        \"activity\": Activity,\n    }\n\n    @swagger_auto_schema(\n        operation_description=\"Get a sample CSV for the specified model type.\",\n        manual_parameters=[\n            openapi.Parameter(\n                'type',\n                openapi.IN_PATH,\n                description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n                type=openapi.TYPE_STRING,\n                enum=list(model_mapping.keys())\n            )\n        ],\n        responses={200: 'CSV file', 400: 'Unknown type'}\n    )\n    def get(self, request, type, format=None):\n        model_class = self.model_mapping.get(type)\n\n        if not model_class:\n            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Get all fields of the model except 'id'\n        column_list = [field.name for field in model_class._meta.fields if field.name != 'id']\n        queryset = model_class.objects.all()\n\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n\n        writer = csv.writer(response)\n\n        # Write the header row\n        writer.writerow(column_list)\n\n        # Write data rows\n        for data in queryset:\n            data_lists = [getattr(data, column) for column in column_list]\n            writer.writerow(data_lists)\n\n        return response\n"
        }
    ]
}