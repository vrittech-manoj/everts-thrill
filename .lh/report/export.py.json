{
    "sourceFile": "report/export.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 82,
            "patches": [
                {
                    "date": 1724825655330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724825812405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,9 @@\n from rest_framework.views import APIView\n from rest_framework import status\n from django.http import HttpResponse\n import csv\n-from destination.models import Package, Destination, DestinationGalleryImages\n-from review.models import Review\n-from collection.models import Collection\n-from departure.models import Departure\n-from booking.models import DestinationBook\n-from activities.models import Activity\n+from django.apps import apps\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class GetSampleAPIView(APIView):\n@@ -18,18 +13,20 @@\n     API view to generate and download sample data in CSV format for different models.\n     \"\"\"\n     \n     model_mapping = {\n-        \"package\": Package,\n-        \"destination\": Destination,\n-        \"gallery-images\": DestinationGalleryImages,\n-        \"review\": Review,\n-        \"collection\": Collection,\n-        \"departure\": Departure,\n-        \"destination-book\": DestinationBook,\n-        \"activity\": Activity,\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n     }\n \n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n     @swagger_auto_schema(\n         operation_description=\"Get a sample CSV for the specified model type.\",\n         manual_parameters=[\n             openapi.Parameter(\n@@ -42,15 +39,27 @@\n         ],\n         responses={200: 'CSV file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n-        model_class = self.model_mapping.get(type)\n+        model_class_path = self.model_mapping.get(type)\n \n-        if not model_class:\n+        if not model_class_path:\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Get all fields of the model except 'id'\n-        column_list = [field.name for field in model_class._meta.fields if field.name != 'id']\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields\n+        column_list = []\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields:\n+                if field.is_relation and field.many_to_one:\n+                    # Handle ForeignKey relations, include the related model's primary key\n+                    column_list.append(f\"{field.name}_id\")\n+                elif not field.is_relation:\n+                    column_list.append(field.name)\n+\n         queryset = model_class.objects.all()\n \n         response = HttpResponse(content_type='text/csv')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n@@ -61,8 +70,16 @@\n         writer.writerow(column_list)\n \n         # Write data rows\n         for data in queryset:\n-            data_lists = [getattr(data, column) for column in column_list]\n-            writer.writerow(data_lists)\n+            data_row = []\n+            for column in column_list:\n+                if \"_id\" in column:\n+                    # ForeignKey relation, get related object's ID\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_object = getattr(data, related_field_name)\n+                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n \n         return response\n"
                },
                {
                    "date": 1724826004367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,16 @@\n         # Get all fields of the model, excluding specified fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if field.is_relation and field.many_to_one:\n-                    # Handle ForeignKey relations, include the related model's primary key\n-                    column_list.append(f\"{field.name}_id\")\n-                elif not field.is_relation:\n+                if field.is_relation:\n+                    if field.many_to_one or field.one_to_one:\n+                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        # For ManyToManyField, append related objects' names\n+                        column_list.append(f\"{field.name}_names\")\n+                else:\n                     column_list.append(field.name)\n \n         queryset = model_class.objects.all()\n \n@@ -72,14 +76,13 @@\n         # Write data rows\n         for data in queryset:\n             data_row = []\n             for column in column_list:\n-                if \"_id\" in column:\n-                    # ForeignKey relation, get related object's ID\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, get related object's ID\n                     related_field_name = column.replace(\"_id\", \"\")\n                     related_object = getattr(data, related_field_name)\n                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                else:\n-                    data_row.append(getattr(data, column))\n-            writer.writerow(data_row)\n-\n-        return response\n+                elif column.endswith(\"_names\"):\n+                    # ManyToManyField relation, get related objects' names\n+                    related_field_name = column.replace(\"_names\", \"\")\n+                    related_o\n"
                },
                {
                    "date": 1724826013872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,12 @@\n                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n                 elif column.endswith(\"_names\"):\n                     # ManyToManyField relation, get related objects' names\n                     related_field_name = column.replace(\"_names\", \"\")\n-                    related_o\n+                    related_objects = getattr(data, related_field_name).all()\n+                    related_names = \", \".join(str(obj) for obj in related_objects)\n+                    data_row.append(related_names)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n+\n+        return response\n"
                },
                {
                    "date": 1724827618292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,16 +52,9 @@\n         # Get all fields of the model, excluding specified fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if field.is_relation:\n-                    if field.many_to_one or field.one_to_one:\n-                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        # For ManyToManyField, append related objects' names\n-                        column_list.append(f\"{field.name}_names\")\n-                else:\n+                if not field.is_relation:  # Only include fields that are not relationships\n                     column_list.append(field.name)\n \n         queryset = model_class.objects.all()\n \n@@ -74,22 +67,8 @@\n         writer.writerow(column_list)\n \n         # Write data rows\n         for data in queryset:\n-            data_row = []\n-            for column in column_list:\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, get related object's ID\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_object = getattr(data, related_field_name)\n-                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                elif column.endswith(\"_names\"):\n-                    # ManyToManyField relation, get related objects' names\n-                    related_field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, related_field_name).all()\n-                    related_names = \", \".join(str(obj) for obj in related_objects)\n-                    data_row.append(related_names)\n-                else:\n-                    data_row.append(getattr(data, column))\n+            data_row = [getattr(data, column) for column in column_list]\n             writer.writerow(data_row)\n \n         return response\n"
                },
                {
                    "date": 1724827761146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,16 @@\n         # Get all fields of the model, excluding specified fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if not field.is_relation:  # Only include fields that are not relationships\n+                if field.is_relation:\n+                    # Include only required relational fields\n+                    if not field.blank and not field.null:\n+                        if field.many_to_one or field.one_to_one:\n+                            column_list.append(f\"{field.name}_id\")\n+                        elif field.many_to_many:\n+                            column_list.append(f\"{field.name}_names\")\n+                else:\n                     column_list.append(field.name)\n \n         queryset = model_class.objects.all()\n \n@@ -67,8 +74,20 @@\n         writer.writerow(column_list)\n \n         # Write data rows\n         for data in queryset:\n-            data_row = [getattr(data, column) for column in column_list]\n+            data_row = []\n+            for column in column_list:\n+                if column.endswith(\"_id\"):\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_object = getattr(data, related_field_name)\n+                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+                elif column.endswith(\"_names\"):\n+                    related_field_name = column.replace(\"_names\", \"\")\n+                    related_objects = getattr(data, related_field_name).all()\n+                    related_names = \", \".join(str(obj) for obj in related_objects)\n+                    data_row.append(related_names)\n+                else:\n+                    data_row.append(getattr(data, column))\n             writer.writerow(data_row)\n \n         return response\n"
                },
                {
                    "date": 1724827805283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,30 +3,70 @@\n from rest_framework.views import APIView\n from rest_framework import status\n from django.http import HttpResponse\n import csv\n-from django.apps import apps\n+from destination.models import Package, Destination, DestinationGalleryImages\n+from review.models import Review\n+from collection.models import Collection\n+from departure.models import Departure\n+from booking.models import DestinationBook\n+from activities.models import Activity\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in CSV format for different models.\n     \"\"\"\n     \n+    \n+\n     model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n+        \"package\": {\n+            \"queryset\": Package.objects.all(),\n+            \"columns\": ['name', 'image']\n+        },\n+        \"destination\": {\n+            \"queryset\": Destination.objects.all(),\n+            \"columns\": [\n+                'destination_title', 'price', 'price_type', 'is_price',\n+                'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url',\n+                'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade',\n+                'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation',\n+                'group_size'\n+            ]\n+        },\n+        \"gallery-images\": {\n+            \"queryset\": DestinationGalleryImages.objects.all(),\n+            \"columns\": [\n+                'id', 'destination_trip', 'image'\n+            ]\n+        },\n+        \"review\": {\n+            \"queryset\": Review.objects.all(),\n+            \"columns\": ['name', 'star_rating', 'review_description', 'add_image','is_show']\n+        },\n+        \"collection\": {\n+            \"queryset\": Collection.objects.all(),\n+            \"columns\": ['name', 'index', 'destination_collection']\n+        },\n+        \"departure\": {\n+            \"queryset\": Departure.objects.all(),\n+            \"columns\": ['destination_trip', 'upcoming_departure_date', 'upcoming_departure_status','upcoming_departure_price']\n+        },\n+        \"destination-book\": {\n+            \"queryset\": DestinationBook.objects.all(),\n+            \"columns\": [\n+                'user', 'country', 'airlines', 'number_of_travelers',\n+                'activity', 'package', 'arrival_date', 'departure_date', 'service_type',\n+                'destination', 'customize_trip'\n+            ]\n+        },\n+        \"activity\": {\n+            \"queryset\": Activity.objects.all(),\n+            \"columns\": ['name', 'image', 'destinations_activities']\n+        },\n     }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n     @swagger_auto_schema(\n         operation_description=\"Get a sample CSV for the specified model type.\",\n         manual_parameters=[\n             openapi.Parameter(\n@@ -38,34 +78,18 @@\n             )\n         ],\n         responses={200: 'CSV file', 400: 'Unknown type'}\n     )\n+\n     def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n+        model_info = self.model_mapping.get(type)\n \n-        if not model_class_path:\n+        if not model_info:\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+        queryset = model_info[\"queryset\"]\n+        column_list = model_info[\"columns\"]\n \n-        # Get all fields of the model, excluding specified fields\n-        column_list = []\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields:\n-                if field.is_relation:\n-                    # Include only required relational fields\n-                    if not field.blank and not field.null:\n-                        if field.many_to_one or field.one_to_one:\n-                            column_list.append(f\"{field.name}_id\")\n-                        elif field.many_to_many:\n-                            column_list.append(f\"{field.name}_names\")\n-                else:\n-                    column_list.append(field.name)\n-\n-        queryset = model_class.objects.all()\n-\n         response = HttpResponse(content_type='text/csv')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n \n         writer = csv.writer(response)\n@@ -74,20 +98,8 @@\n         writer.writerow(column_list)\n \n         # Write data rows\n         for data in queryset:\n-            data_row = []\n-            for column in column_list:\n-                if column.endswith(\"_id\"):\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_object = getattr(data, related_field_name)\n-                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                elif column.endswith(\"_names\"):\n-                    related_field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, related_field_name).all()\n-                    related_names = \", \".join(str(obj) for obj in related_objects)\n-                    data_row.append(related_names)\n-                else:\n-                    data_row.append(getattr(data, column))\n-            writer.writerow(data_row)\n+            data_lists = [getattr(data, column) for column in column_list]\n+            writer.writerow(data_lists)\n \n         return response\n"
                },
                {
                    "date": 1724827824979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,56 +17,19 @@\n     \"\"\"\n     API view to generate and download sample data in CSV format for different models.\n     \"\"\"\n     \n-    \n-\n     model_mapping = {\n-        \"package\": {\n-            \"queryset\": Package.objects.all(),\n-            \"columns\": ['name', 'image']\n-        },\n-        \"destination\": {\n-            \"queryset\": Destination.objects.all(),\n-            \"columns\": [\n-                'destination_title', 'price', 'price_type', 'is_price',\n-                'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url',\n-                'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade',\n-                'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation',\n-                'group_size'\n-            ]\n-        },\n-        \"gallery-images\": {\n-            \"queryset\": DestinationGalleryImages.objects.all(),\n-            \"columns\": [\n-                'id', 'destination_trip', 'image'\n-            ]\n-        },\n-        \"review\": {\n-            \"queryset\": Review.objects.all(),\n-            \"columns\": ['name', 'star_rating', 'review_description', 'add_image','is_show']\n-        },\n-        \"collection\": {\n-            \"queryset\": Collection.objects.all(),\n-            \"columns\": ['name', 'index', 'destination_collection']\n-        },\n-        \"departure\": {\n-            \"queryset\": Departure.objects.all(),\n-            \"columns\": ['destination_trip', 'upcoming_departure_date', 'upcoming_departure_status','upcoming_departure_price']\n-        },\n-        \"destination-book\": {\n-            \"queryset\": DestinationBook.objects.all(),\n-            \"columns\": [\n-                'user', 'country', 'airlines', 'number_of_travelers',\n-                'activity', 'package', 'arrival_date', 'departure_date', 'service_type',\n-                'destination', 'customize_trip'\n-            ]\n-        },\n-        \"activity\": {\n-            \"queryset\": Activity.objects.all(),\n-            \"columns\": ['name', 'image', 'destinations_activities']\n-        },\n+        \"package\": Package,\n+        \"destination\": Destination,\n+        \"gallery-images\": DestinationGalleryImages,\n+        \"review\": Review,\n+        \"collection\": Collection,\n+        \"departure\": Departure,\n+        \"destination-book\": DestinationBook,\n+        \"activity\": Activity,\n     }\n+\n     @swagger_auto_schema(\n         operation_description=\"Get a sample CSV for the specified model type.\",\n         manual_parameters=[\n             openapi.Parameter(\n@@ -78,17 +41,17 @@\n             )\n         ],\n         responses={200: 'CSV file', 400: 'Unknown type'}\n     )\n-\n     def get(self, request, type, format=None):\n-        model_info = self.model_mapping.get(type)\n+        model_class = self.model_mapping.get(type)\n \n-        if not model_info:\n+        if not model_class:\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        queryset = model_info[\"queryset\"]\n-        column_list = model_info[\"columns\"]\n+        # Get all fields of the model except 'id'\n+        column_list = [field.name for field in model_class._meta.fields if field.name != 'id']\n+        queryset = model_class.objects.all()\n \n         response = HttpResponse(content_type='text/csv')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n \n"
                },
                {
                    "date": 1724827832411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,9 @@\n from rest_framework.views import APIView\n from rest_framework import status\n from django.http import HttpResponse\n import csv\n-from destination.models import Package, Destination, DestinationGalleryImages\n-from review.models import Review\n-from collection.models import Collection\n-from departure.models import Departure\n-from booking.models import DestinationBook\n-from activities.models import Activity\n+from django.apps import apps\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class GetSampleAPIView(APIView):\n@@ -18,18 +13,20 @@\n     API view to generate and download sample data in CSV format for different models.\n     \"\"\"\n     \n     model_mapping = {\n-        \"package\": Package,\n-        \"destination\": Destination,\n-        \"gallery-images\": DestinationGalleryImages,\n-        \"review\": Review,\n-        \"collection\": Collection,\n-        \"departure\": Departure,\n-        \"destination-book\": DestinationBook,\n-        \"activity\": Activity,\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n     }\n \n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n     @swagger_auto_schema(\n         operation_description=\"Get a sample CSV for the specified model type.\",\n         manual_parameters=[\n             openapi.Parameter(\n@@ -42,15 +39,27 @@\n         ],\n         responses={200: 'CSV file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n-        model_class = self.model_mapping.get(type)\n+        model_class_path = self.model_mapping.get(type)\n \n-        if not model_class:\n+        if not model_class_path:\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Get all fields of the model except 'id'\n-        column_list = [field.name for field in model_class._meta.fields if field.name != 'id']\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields\n+        column_list = []\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields:\n+                if field.is_relation and field.many_to_one:\n+                    # Handle ForeignKey relations, include the related model's primary key\n+                    column_list.append(f\"{field.name}_id\")\n+                elif not field.is_relation:\n+                    column_list.append(field.name)\n+\n         queryset = model_class.objects.all()\n \n         response = HttpResponse(content_type='text/csv')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n@@ -61,8 +70,16 @@\n         writer.writerow(column_list)\n \n         # Write data rows\n         for data in queryset:\n-            data_lists = [getattr(data, column) for column in column_list]\n-            writer.writerow(data_lists)\n+            data_row = []\n+            for column in column_list:\n+                if \"_id\" in column:\n+                    # ForeignKey relation, get related object's ID\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_object = getattr(data, related_field_name)\n+                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n \n         return response\n"
                },
                {
                    "date": 1724827852886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,16 @@\n         # Get all fields of the model, excluding specified fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if field.is_relation and field.many_to_one:\n-                    # Handle ForeignKey relations, include the related model's primary key\n-                    column_list.append(f\"{field.name}_id\")\n-                elif not field.is_relation:\n+                if field.is_relation:\n+                    if field.many_to_one or field.one_to_one:\n+                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        # For ManyToManyField, append related objects' names\n+                        column_list.append(f\"{field.name}_names\")\n+                else:\n                     column_list.append(field.name)\n \n         queryset = model_class.objects.all()\n \n@@ -72,14 +76,13 @@\n         # Write data rows\n         for data in queryset:\n             data_row = []\n             for column in column_list:\n-                if \"_id\" in column:\n-                    # ForeignKey relation, get related object's ID\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, get related object's ID\n                     related_field_name = column.replace(\"_id\", \"\")\n                     related_object = getattr(data, related_field_name)\n                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                else:\n-                    data_row.append(getattr(data, column))\n-            writer.writerow(data_row)\n-\n-        return response\n+                elif column.endswith(\"_names\"):\n+                    # ManyToManyField relation, get related objects' names\n+                    related_field_name = column.replace(\"_names\", \"\")\n+                    related_o\n"
                },
                {
                    "date": 1724827861827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,5 +84,12 @@\n                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n                 elif column.endswith(\"_names\"):\n                     # ManyToManyField relation, get related objects' names\n                     related_field_name = column.replace(\"_names\", \"\")\n-                    related_o\n+                    related_objects = getattr(data, related_field_name).all()\n+                    related_names = \", \".join(str(obj) for obj in related_objects)\n+                    data_row.append(related_names)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n+\n+        return response\n"
                },
                {
                    "date": 1724923500708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             if field.name not in self.excluded_fields:\n                 if field.is_relation:\n                     if field.many_to_one or field.one_to_one:\n                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                        column_list.append(f\"{field.name}_id\")\n+                        column_list.append(f\"{field.name}_names\")\n                     elif field.many_to_many:\n                         # For ManyToManyField, append related objects' names\n                         column_list.append(f\"{field.name}_names\")\n                 else:\n"
                },
                {
                    "date": 1724994847464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,95 @@\n-from django.shortcuts import render\n-from rest_framework.response import Response\n-from rest_framework.views import APIView\n-from rest_framework import status\n-from django.http import HttpResponse\n-import csv\n-from django.apps import apps\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n+# from django.shortcuts import render\n+# from rest_framework.response import Response\n+# from rest_framework.views import APIView\n+# from rest_framework import status\n+# from django.http import HttpResponse\n+# import csv\n+# from django.apps import apps\n+# from drf_yasg.utils import swagger_auto_schema\n+# from drf_yasg import openapi\n \n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in CSV format for different models.\n-    \"\"\"\n+# class GetSampleAPIView(APIView):\n+#     \"\"\"\n+#     API view to generate and download sample data in CSV format for different models.\n+#     \"\"\"\n     \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n+#     model_mapping = {\n+#         \"package\": \"destination.Package\",\n+#         \"destination\": \"destination.Destination\",\n+#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n+#         \"review\": \"review.Review\",\n+#         \"collection\": \"collection.Collection\",\n+#         \"departure\": \"departure.Departure\",\n+#         \"destination-book\": \"booking.DestinationBook\",\n+#         \"activity\": \"activities.Activity\",\n+#     }\n \n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n \n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample CSV for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'CSV file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n+#     @swagger_auto_schema(\n+#         operation_description=\"Get a sample CSV for the specified model type.\",\n+#         manual_parameters=[\n+#             openapi.Parameter(\n+#                 'type',\n+#                 openapi.IN_PATH,\n+#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n+#                 type=openapi.TYPE_STRING,\n+#                 enum=list(model_mapping.keys())\n+#             )\n+#         ],\n+#         responses={200: 'CSV file', 400: 'Unknown type'}\n+#     )\n+#     def get(self, request, type, format=None):\n+#         model_class_path = self.model_mapping.get(type)\n \n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+#         if not model_class_path:\n+#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+#         # Dynamically import the model class\n+#         app_label, model_name = model_class_path.split(\".\")\n+#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields\n-        column_list = []\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields:\n-                if field.is_relation:\n-                    if field.many_to_one or field.one_to_one:\n-                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                        column_list.append(f\"{field.name}_names\")\n-                    elif field.many_to_many:\n-                        # For ManyToManyField, append related objects' names\n-                        column_list.append(f\"{field.name}_names\")\n-                else:\n-                    column_list.append(field.name)\n+#         # Get all fields of the model, excluding specified fields\n+#         column_list = []\n+#         for field in model_class._meta.get_fields():\n+#             if field.name not in self.excluded_fields:\n+#                 if field.is_relation:\n+#                     if field.many_to_one or field.one_to_one:\n+#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+#                         column_list.append(f\"{field.name}_names\")\n+#                     elif field.many_to_many:\n+#                         # For ManyToManyField, append related objects' names\n+#                         column_list.append(f\"{field.name}_names\")\n+#                 else:\n+#                     column_list.append(field.name)\n \n-        queryset = model_class.objects.all()\n+#         queryset = model_class.objects.all()\n \n-        response = HttpResponse(content_type='text/csv')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n+#         response = HttpResponse(content_type='text/csv')\n+#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n \n-        writer = csv.writer(response)\n+#         writer = csv.writer(response)\n \n-        # Write the header row\n-        writer.writerow(column_list)\n+#         # Write the header row\n+#         writer.writerow(column_list)\n \n-        # Write data rows\n-        for data in queryset:\n-            data_row = []\n-            for column in column_list:\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, get related object's ID\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_object = getattr(data, related_field_name)\n-                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                elif column.endswith(\"_names\"):\n-                    # ManyToManyField relation, get related objects' names\n-                    related_field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, related_field_name).all()\n-                    related_names = \", \".join(str(obj) for obj in related_objects)\n-                    data_row.append(related_names)\n-                else:\n-                    data_row.append(getattr(data, column))\n-            writer.writerow(data_row)\n+#         # Write data rows\n+#         for data in queryset:\n+#             data_row = []\n+#             for column in column_list:\n+#                 if column.endswith(\"_id\"):\n+#                     # ForeignKey or OneToOneField relation, get related object's ID\n+#                     related_field_name = column.replace(\"_id\", \"\")\n+#                     related_object = getattr(data, related_field_name)\n+#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+#                 elif column.endswith(\"_names\"):\n+#                     # ManyToManyField relation, get related objects' names\n+#                     related_field_name = column.replace(\"_names\", \"\")\n+#                     related_objects = getattr(data, related_field_name).all()\n+#                     related_names = \", \".join(str(obj) for obj in related_objects)\n+#                     data_row.append(related_names)\n+#                 else:\n+#                     data_row.append(getattr(data, column))\n+#             writer.writerow(data_row)\n \n-        return response\n+#         return response\n"
                },
                {
                    "date": 1724994861129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,4 +92,101 @@\n #                     data_row.append(getattr(data, column))\n #             writer.writerow(data_row)\n \n #         return response\n+\n+from django.shortcuts import render\n+from rest_framework.response import Response\n+from rest_framework.views import APIView\n+from rest_framework import status\n+from django.http import HttpResponse\n+import csv\n+from django.apps import apps\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in CSV format for different models.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample CSV for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'CSV file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields\n+        column_list = []\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields:\n+                if field.is_relation:\n+                    if field.many_to_one or field.one_to_one:\n+                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                        column_list.append(f\"{field.name}_names\")\n+                    elif field.many_to_many:\n+                        # For ManyToManyField, append related objects' names\n+                        column_list.append(f\"{field.name}_names\")\n+                else:\n+                    column_list.append(field.name)\n+\n+        queryset = model_class.objects.all()\n+\n+        response = HttpResponse(content_type='text/csv')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n+\n+        writer = csv.writer(response)\n+\n+        # Write the header row\n+        writer.writerow(column_list)\n+\n+        # Write data rows\n+        for data in queryset:\n+            data_row = []\n+            for column in column_list:\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, get related object's ID\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_object = getattr(data, related_field_name)\n+                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+                elif column.endswith(\"_names\"):\n+                    # ManyToManyField relation, get related objects' names\n+                    related_field_name = column.replace(\"_names\", \"\")\n+                    related_objects = getattr(data, related_field_name).all()\n+                    related_names = \", \".join(str(obj) for obj in related_objects)\n+                    data_row.append(related_names)\n+                else:\n+                    data_row.append(getattr(data, column))\n+            writer.writerow(data_row)\n+\n+        return response\n+\n"
                },
                {
                    "date": 1724995060661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,21 +93,24 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-from django.shortcuts import render\n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.utils.dataframe import dataframe_to_rows\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n from rest_framework.response import Response\n-from rest_framework.views import APIView\n from rest_framework import status\n-from django.http import HttpResponse\n-import csv\n-from django.apps import apps\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n-    API view to generate and download sample data in CSV format for different models.\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -122,19 +125,19 @@\n \n     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n \n     @swagger_auto_schema(\n-        operation_description=\"Get a sample CSV for the specified model type.\",\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n         manual_parameters=[\n             openapi.Parameter(\n                 'type',\n                 openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n                 type=openapi.TYPE_STRING,\n                 enum=list(model_mapping.keys())\n             )\n         ],\n-        responses={200: 'CSV file', 400: 'Unknown type'}\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n         model_class_path = self.model_mapping.get(type)\n \n@@ -146,47 +149,81 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields\n         column_list = []\n+        foreign_key_columns = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if field.is_relation:\n-                    if field.many_to_one or field.one_to_one:\n-                        # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                        column_list.append(f\"{field.name}_names\")\n-                    elif field.many_to_many:\n-                        # For ManyToManyField, append related objects' names\n-                        column_list.append(f\"{field.name}_names\")\n+                if field.is_relation and (field.many_to_one or field.one_to_one):\n+                    # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                    column_list.append(f\"{field.name}_names\")\n+                    related_model = field.related_model\n+                    foreign_key_columns[field.name] = related_model\n+                elif field.many_to_many:\n+                    # For ManyToManyField, append related objects' names\n+                    column_list.append(f\"{field.name}_names\")\n                 else:\n                     column_list.append(field.name)\n \n+        # Fetch all data from the model\n         queryset = model_class.objects.all()\n \n-        response = HttpResponse(content_type='text/csv')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n \n-        writer = csv.writer(response)\n-\n         # Write the header row\n-        writer.writerow(column_list)\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Write data rows\n-        for data in queryset:\n+        # Write the data rows\n+        for row_num, data in enumerate(queryset, 2):\n             data_row = []\n-            for column in column_list:\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, get related object's ID\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_object = getattr(data, related_field_name)\n-                    data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-                elif column.endswith(\"_names\"):\n-                    # ManyToManyField relation, get related objects' names\n-                    related_field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, related_field_name).all()\n-                    related_names = \", \".join(str(obj) for obj in related_objects)\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_names\"):\n+                    # Handle ForeignKey and ManyToMany fields\n+                    field_name = column.replace(\"_names\", \"\")\n+                    related_objects = getattr(data, field_name)\n+                    if hasattr(related_objects, 'all'):  # ManyToManyField\n+                        related_names = \", \".join(str(obj) for obj in related_objects.all())\n+                    else:  # ForeignKey or OneToOneField\n+                        related_names = str(related_objects) if related_objects else \"\"\n                     data_row.append(related_names)\n+                    sheet.cell(row=row_num, column=col_num, value=related_names)\n                 else:\n-                    data_row.append(getattr(data, column))\n-            writer.writerow(data_row)\n+                    value = getattr(data, column)\n+                    data_row.append(value)\n+                    sheet.cell(row=row_num, column=col_num, value=value)\n \n+        # Add dropdowns for ForeignKey fields\n+        for col_num, (field_name, related_model) in enumerate(foreign_key_columns.items(), 1):\n+            related_objects = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objects]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+            \n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(queryset) + 1}\")\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n         return response\n-\n"
                },
                {
                    "date": 1724995205329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,137 +93,4 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.utils.dataframe import dataframe_to_rows\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields\n-        column_list = []\n-        foreign_key_columns = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields:\n-                if field.is_relation and (field.many_to_one or field.one_to_one):\n-                    # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                    column_list.append(f\"{field.name}_names\")\n-                    related_model = field.related_model\n-                    foreign_key_columns[field.name] = related_model\n-                elif field.many_to_many:\n-                    # For ManyToManyField, append related objects' names\n-                    column_list.append(f\"{field.name}_names\")\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Fetch all data from the model\n-        queryset = model_class.objects.all()\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write the data rows\n-        for row_num, data in enumerate(queryset, 2):\n-            data_row = []\n-            for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_names\"):\n-                    # Handle ForeignKey and ManyToMany fields\n-                    field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, field_name)\n-                    if hasattr(related_objects, 'all'):  # ManyToManyField\n-                        related_names = \", \".join(str(obj) for obj in related_objects.all())\n-                    else:  # ForeignKey or OneToOneField\n-                        related_names = str(related_objects) if related_objects else \"\"\n-                    data_row.append(related_names)\n-                    sheet.cell(row=row_num, column=col_num, value=related_names)\n-                else:\n-                    value = getattr(data, column)\n-                    data_row.append(value)\n-                    sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey fields\n-        for col_num, (field_name, related_model) in enumerate(foreign_key_columns.items(), 1):\n-            related_objects = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objects]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-            \n-            # Apply the dropdown to the column in the main sheet\n-            sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(queryset) + 1}\")\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n"
                },
                {
                    "date": 1724995210624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,4 +93,134 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields\n+        column_list = []\n+        foreign_key_columns = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields:\n+                if field.is_relation and (field.many_to_one or field.one_to_one):\n+                    # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                    column_list.append(f\"{field.name}_names\")\n+                    related_model = field.related_model\n+                    foreign_key_columns[field.name] = related_model\n+                elif field.many_to_many:\n+                    # For ManyToManyField, append related objects' names\n+                    column_list.append(f\"{field.name}_names\")\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Fetch all data from the model\n+        queryset = model_class.objects.all()\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Write the data rows\n+        for row_num, data in enumerate(queryset, 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_names\"):\n+                    # Handle ForeignKey and ManyToMany fields\n+                    field_name = column.replace(\"_names\", \"\")\n+                    related_objects = getattr(data, field_name)\n+                    if hasattr(related_objects, 'all'):  # ManyToManyField\n+                        related_names = \", \".join(str(obj) for obj in related_objects.all())\n+                    else:  # ForeignKey or OneToOneField\n+                        related_names = str(related_objects) if related_objects else \"\"\n+                    sheet.cell(row=row_num, column=col_num, value=related_names)\n+                else:\n+                    value = getattr(data, column)\n+                    sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey fields\n+        for col_num, (field_name, related_model) in enumerate(foreign_key_columns.items(), 1):\n+            related_objects = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objects]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+            \n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(queryset) + 1}\")\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n+\n"
                },
                {
                    "date": 1724995370607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,134 +93,5 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n \n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields\n-        column_list = []\n-        foreign_key_columns = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields:\n-                if field.is_relation and (field.many_to_one or field.one_to_one):\n-                    # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                    column_list.append(f\"{field.name}_names\")\n-                    related_model = field.related_model\n-                    foreign_key_columns[field.name] = related_model\n-                elif field.many_to_many:\n-                    # For ManyToManyField, append related objects' names\n-                    column_list.append(f\"{field.name}_names\")\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Fetch all data from the model\n-        queryset = model_class.objects.all()\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write the data rows\n-        for row_num, data in enumerate(queryset, 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_names\"):\n-                    # Handle ForeignKey and ManyToMany fields\n-                    field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, field_name)\n-                    if hasattr(related_objects, 'all'):  # ManyToManyField\n-                        related_names = \", \".join(str(obj) for obj in related_objects.all())\n-                    else:  # ForeignKey or OneToOneField\n-                        related_names = str(related_objects) if related_objects else \"\"\n-                    sheet.cell(row=row_num, column=col_num, value=related_names)\n-                else:\n-                    value = getattr(data, column)\n-                    sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey fields\n-        for col_num, (field_name, related_model) in enumerate(foreign_key_columns.items(), 1):\n-            related_objects = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objects]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-            \n-            # Apply the dropdown to the column in the main sheet\n-            sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(queryset) + 1}\")\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n-\n"
                },
                {
                    "date": 1724995760655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,5 +93,135 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n \n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields\n+        column_list = []\n+        foreign_key_columns = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields:\n+                if field.is_relation and (field.many_to_one or field.one_to_one):\n+                    # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+                    column_list.append(f\"{field.name}_names\")\n+                    related_model = field.related_model\n+                    foreign_key_columns[field.name] = related_model\n+                elif field.many_to_many:\n+                    # For ManyToManyField, append related objects' names\n+                    column_list.append(f\"{field.name}_names\")\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Fetch all data from the model\n+        queryset = model_class.objects.all()\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Write the data rows\n+        for row_num, data in enumerate(queryset, 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_names\"):\n+                    # Handle ForeignKey and ManyToMany fields\n+                    field_name = column.replace(\"_names\", \"\")\n+                    related_objects = getattr(data, field_name)\n+                    if hasattr(related_objects, 'all'):  # ManyToManyField\n+                        related_names = \", \".join(str(obj) for obj in related_objects.all())\n+                        sheet.cell(row=row_num, column=col_num, value=related_names)\n+                    else:  # ForeignKey or OneToOneField\n+                        related_name = str(related_objects) if related_objects else \"\"\n+                        sheet.cell(row=row_num, column=col_num, value=related_name)\n+                else:\n+                    value = getattr(data, column)\n+                    sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey fields\n+        for col_num, (field_name, related_model) in enumerate(foreign_key_columns.items(), 1):\n+            related_objects = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objects]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+            \n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(queryset) + 1}\")\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n+\n"
                },
                {
                    "date": 1724995941687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,19 @@\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n     including dropdowns for selecting related model data.\n@@ -148,25 +159,22 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields\n         column_list = []\n-        foreign_key_columns = {}\n+        related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields:\n-                if field.is_relation and (field.many_to_one or field.one_to_one):\n-                    # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-                    column_list.append(f\"{field.name}_names\")\n+                if field.is_relation:\n                     related_model = field.related_model\n-                    foreign_key_columns[field.name] = related_model\n-                elif field.many_to_many:\n-                    # For ManyToManyField, append related objects' names\n-                    column_list.append(f\"{field.name}_names\")\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n                 else:\n                     column_list.append(field.name)\n \n-        # Fetch all data from the model\n-        queryset = model_class.objects.all()\n-\n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n         sheet.title = model_name\n@@ -174,29 +182,30 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Write the data rows\n-        for row_num, data in enumerate(queryset, 2):\n+        # Fetch related data directly from related models\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_names\"):\n-                    # Handle ForeignKey and ManyToMany fields\n-                    field_name = column.replace(\"_names\", \"\")\n-                    related_objects = getattr(data, field_name)\n-                    if hasattr(related_objects, 'all'):  # ManyToManyField\n-                        related_names = \", \".join(str(obj) for obj in related_objects.all())\n-                        sheet.cell(row=row_num, column=col_num, value=related_names)\n-                    else:  # ForeignKey or OneToOneField\n-                        related_name = str(related_objects) if related_objects else \"\"\n-                        sheet.cell(row=row_num, column=col_num, value=related_name)\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n                     value = getattr(data, column)\n-                    sheet.cell(row=row_num, column=col_num, value=value)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey fields\n-        for col_num, (field_name, related_model) in enumerate(foreign_key_columns.items(), 1):\n-            related_objects = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objects]\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n \n             # Add related names to a new sheet for data validation\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n@@ -210,12 +219,12 @@\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n-            \n+\n             # Apply the dropdown to the column in the main sheet\n             sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(queryset) + 1}\")\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n@@ -223,5 +232,4 @@\n         # Save the workbook to the response\n         workbook.save(response)\n \n         return response\n-\n"
                },
                {
                    "date": 1724996030875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,19 +104,8 @@\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n     including dropdowns for selecting related model data.\n@@ -157,13 +146,13 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n         related_models = {}\n         for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields:\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n                     # Handle ForeignKey and OneToOneField separately from ManyToMany\n"
                },
                {
                    "date": 1724996382008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n+    including saving foreign key data in separate sheets and using them as dropdowns.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -164,16 +164,41 @@\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n+        main_sheet = workbook.active\n+        main_sheet.title = model_name\n \n-        # Write the header row\n+        # Write the header row in the main sheet\n         for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n+            main_sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Fill related model data in separate sheets and create dropdowns\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Create a new sheet for the related model\n+            related_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if related_sheet_name not in workbook.sheetnames:\n+                related_sheet = workbook.create_sheet(title=related_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    related_sheet.cell(row=i, column=1, value=name)\n+\n+            # Create a dropdown for this column in the main sheet\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{related_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the entire column in the main sheet\n+            main_sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}1048576\")  # Excel's maximum row number\n+\n+        # Write the data rows in the main sheet\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n                 if column.endswith(\"_id\"):\n                     # ForeignKey or OneToOneField relation, fetch directly from related model\n@@ -187,34 +212,10 @@\n                     related_objs = related_manager.all()\n                     value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n                     value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n+                main_sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the column in the main sheet\n-            sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n-\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n"
                },
                {
                    "date": 1724996665161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,124 +102,5 @@\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including saving foreign key data in separate sheets and using them as dropdowns.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        main_sheet = workbook.active\n-        main_sheet.title = model_name\n-\n-        # Write the header row in the main sheet\n-        for col_num, column_title in enumerate(column_list, 1):\n-            main_sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Fill related model data in separate sheets and create dropdowns\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Create a new sheet for the related model\n-            related_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if related_sheet_name not in workbook.sheetnames:\n-                related_sheet = workbook.create_sheet(title=related_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    related_sheet.cell(row=i, column=1, value=name)\n-\n-            # Create a dropdown for this column in the main sheet\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{related_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the entire column in the main sheet\n-            main_sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}1048576\")  # Excel's maximum row number\n-\n-        # Write the data rows in the main sheet\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n-                else:\n-                    value = getattr(data, column)\n-                main_sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n+from drf_yasg import op\n\\ No newline at end of file\n"
                },
                {
                    "date": 1724996959871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,5 +102,143 @@\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import op\n\\ No newline at end of file\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for all columns and saving related data in separate sheets.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Fetch related data directly from related models and populate the sheet\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    # Handle ForeignKey and ManyToMany fields\n+                    related_manager = getattr(data, column)\n+                    if hasattr(related_manager, 'all'):\n+                        # ManyToManyField: Fetch related data directly\n+                        related_objs = related_manager.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        # ForeignKey: Fetch related data directly\n+                        value = str(related_manager) if related_manager else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns and save related data to other sheets\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Create a new sheet for each related model's data\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            # Create a data validation dropdown using the related names\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the entire column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+            sheet.add_data_validation(dv)\n+\n+        # Add dropdowns for non-related fields\n+        for col_num, column in enumerate(column_list, 1):\n+            if column not in related_models:\n+                unique_values = model_class.objects.values_list(column, flat=True).distinct()\n+                validation_sheet_name = f\"{column}_data\"\n+                if validation_sheet_name not in workbook.sheetnames:\n+                    validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                    for i, value in enumerate(unique_values, 1):\n+                        validation_sheet.cell(row=i, column=1, value=value)\n+\n+                dv = DataValidation(\n+                    type=\"list\",\n+                    formula1=f'{validation_sheet_name}!$A$1:$A${len(unique_values)}',\n+                    showDropDown=True\n+                )\n+                dv.error = 'Invalid entry, please select from the list'\n+                dv.errorTitle = 'Invalid Entry'\n+\n+                # Apply the dropdown to the entire column in the main sheet\n+                col_letter = chr(64 + col_num)\n+                dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+                sheet.add_data_validation(dv)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n"
                },
                {
                    "date": 1724997082989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,152 +93,4 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for all columns and saving related data in separate sheets.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Fetch related data directly from related models and populate the sheet\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    # Handle ForeignKey and ManyToMany fields\n-                    related_manager = getattr(data, column)\n-                    if hasattr(related_manager, 'all'):\n-                        # ManyToManyField: Fetch related data directly\n-                        related_objs = related_manager.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        # ForeignKey: Fetch related data directly\n-                        value = str(related_manager) if related_manager else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns and save related data to other sheets\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Create a new sheet for each related model's data\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            # Create a data validation dropdown using the related names\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the entire column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-            sheet.add_data_validation(dv)\n-\n-        # Add dropdowns for non-related fields\n-        for col_num, column in enumerate(column_list, 1):\n-            if column not in related_models:\n-                unique_values = model_class.objects.values_list(column, flat=True).distinct()\n-                validation_sheet_name = f\"{column}_data\"\n-                if validation_sheet_name not in workbook.sheetnames:\n-                    validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                    for i, value in enumerate(unique_values, 1):\n-                        validation_sheet.cell(row=i, column=1, value=value)\n-\n-                dv = DataValidation(\n-                    type=\"list\",\n-                    formula1=f'{validation_sheet_name}!$A$1:$A${len(unique_values)}',\n-                    showDropDown=True\n-                )\n-                dv.error = 'Invalid entry, please select from the list'\n-                dv.errorTitle = 'Invalid Entry'\n-\n-                # Apply the dropdown to the entire column in the main sheet\n-                col_letter = chr(64 + col_num)\n-                dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-                sheet.add_data_validation(dv)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n"
                },
                {
                    "date": 1724997088517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,4 +93,156 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for all columns and saving related data in separate sheets.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Fetch related data directly from related models and populate the sheet\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    # Handle ForeignKey and ManyToMany fields\n+                    related_manager = getattr(data, column)\n+                    if hasattr(related_manager, 'all'):\n+                        # ManyToManyField: Fetch related data directly\n+                        related_objs = related_manager.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        # ForeignKey: Fetch related data directly\n+                        value = str(related_manager) if related_manager else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns and save related data to other sheets\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Create a new sheet for each related model's data\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            # Create a data validation dropdown using the related names\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the entire column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            if col_num > 26:\n+                col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n+            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+            sheet.add_data_validation(dv)\n+\n+        # Add dropdowns for non-related fields\n+        for col_num, column in enumerate(column_list, 1):\n+            if column not in related_models:\n+                unique_values = model_class.objects.values_list(column, flat=True).distinct()\n+                validation_sheet_name = f\"{column}_data\"\n+                if validation_sheet_name not in workbook.sheetnames:\n+                    validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                    for i, value in enumerate(unique_values, 1):\n+                        validation_sheet.cell(row=i, column=1, value=value)\n+\n+                dv = DataValidation(\n+                    type=\"list\",\n+                    formula1=f'{validation_sheet_name}!$A$1:$A${len(unique_values)}',\n+                    showDropDown=True\n+                )\n+                dv.error = 'Invalid entry, please select from the list'\n+                dv.errorTitle = 'Invalid Entry'\n+\n+                # Apply the dropdown to the entire column in the main sheet\n+                col_letter = chr(64 + col_num)\n+                if col_num > 26:\n+                    col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n+                dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+                sheet.add_data_validation(dv)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n"
                },
                {
                    "date": 1724997526606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for all columns and saving related data in separate sheets.\n+    including dropdowns for ForeignKey fields and creating relevant sheets.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -148,14 +148,14 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n-        related_models = {}\n+        foreignkey_fields = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n+                if field.many_to_one:  # Only consider ForeignKey fields\n                     related_model = field.related_model\n-                    related_models[field.name] = related_model\n+                    foreignkey_fields[field.name] = related_model\n                     column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n \n@@ -170,28 +170,25 @@\n \n         # Fetch related data directly from related models and populate the sheet\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    # Handle ForeignKey and ManyToMany fields\n+                if column in foreignkey_fields:\n+                    # Handle ForeignKey fields\n                     related_manager = getattr(data, column)\n-                    if hasattr(related_manager, 'all'):\n-                        # ManyToManyField: Fetch related data directly\n-                        related_objs = related_manager.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        # ForeignKey: Fetch related data directly\n-                        value = str(related_manager) if related_manager else None\n+                    value = str(related_manager) if related_manager else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns and save related data to other sheets\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+        # Add dropdowns and save related data to relevant sheets only for ForeignKey fields\n+        for col_num, (field_name, related_model) in enumerate(foreignkey_fields.items(), 1):\n             related_objs = related_model.objects.all()\n+            if not related_objs:\n+                continue  # Skip if there are no related objects\n+\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Create a new sheet for each related model's data\n+            # Create a new sheet for each ForeignKey model's data if it doesn't exist\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n@@ -212,33 +209,8 @@\n                 col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n             dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n             sheet.add_data_validation(dv)\n \n-        # Add dropdowns for non-related fields\n-        for col_num, column in enumerate(column_list, 1):\n-            if column not in related_models:\n-                unique_values = model_class.objects.values_list(column, flat=True).distinct()\n-                validation_sheet_name = f\"{column}_data\"\n-                if validation_sheet_name not in workbook.sheetnames:\n-                    validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                    for i, value in enumerate(unique_values, 1):\n-                        validation_sheet.cell(row=i, column=1, value=value)\n-\n-                dv = DataValidation(\n-                    type=\"list\",\n-                    formula1=f'{validation_sheet_name}!$A$1:$A${len(unique_values)}',\n-                    showDropDown=True\n-                )\n-                dv.error = 'Invalid entry, please select from the list'\n-                dv.errorTitle = 'Invalid Entry'\n-\n-                # Apply the dropdown to the entire column in the main sheet\n-                col_letter = chr(64 + col_num)\n-                if col_num > 26:\n-                    col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n-                dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-                sheet.add_data_validation(dv)\n-\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n"
                },
                {
                    "date": 1724997667150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,15 +167,14 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models and populate the sheet\n+        # Populate the sheet with data from the model\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n                 if column in foreignkey_fields:\n-                    # Handle ForeignKey fields\n-                    related_manager = getattr(data, column)\n-                    value = str(related_manager) if related_manager else None\n+                    related_object = getattr(data, column)\n+                    value = str(related_object) if related_object else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n"
                },
                {
                    "date": 1724997795678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for ForeignKey fields and creating relevant sheets.\n+    including dropdowns for selecting related model data.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -148,15 +148,19 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n-        foreignkey_fields = {}\n+        related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.many_to_one:  # Only consider ForeignKey fields\n+                if field.is_relation:\n                     related_model = field.related_model\n-                    foreignkey_fields[field.name] = related_model\n-                    column_list.append(field.name)\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -167,48 +171,49 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Populate the sheet with data from the model\n+        # Fetch related data directly from related models\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column in foreignkey_fields:\n-                    related_object = getattr(data, column)\n-                    value = str(related_object) if related_object else None\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns and save related data to relevant sheets only for ForeignKey fields\n-        for col_num, (field_name, related_model) in enumerate(foreignkey_fields.items(), 1):\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n             related_objs = related_model.objects.all()\n-            if not related_objs:\n-                continue  # Skip if there are no related objects\n-\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Create a new sheet for each ForeignKey model's data if it doesn't exist\n+            # Add related names to a new sheet for data validation\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n-            # Create a data validation dropdown using the related names\n             dv = DataValidation(\n                 type=\"list\",\n                 formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the entire column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            if col_num > 26:\n-                col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n-            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+            # Apply the dropdown to the column in the main sheet\n             sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n"
                },
                {
                    "date": 1724999916530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n+    including dropdowns for ForeignKey fields and creating relevant sheets.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -148,19 +148,15 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n-        related_models = {}\n+        foreignkey_fields = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n+                if field.many_to_one:  # Only consider ForeignKey fields\n                     related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n+                    foreignkey_fields[field.name] = related_model\n+                    column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -171,49 +167,48 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Populate the sheet with data from the model\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n+                if column in foreignkey_fields:\n+                    related_object = getattr(data, column)\n+                    value = str(related_object) if related_object else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+        # Add dropdowns and save related data to relevant sheets only for ForeignKey fields\n+        for col_num, (field_name, related_model) in enumerate(foreignkey_fields.items(), 1):\n             related_objs = related_model.objects.all()\n+            if not related_objs:\n+                continue  # Skip if there are no related objects\n+\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Add related names to a new sheet for data validation\n+            # Create a new sheet for each ForeignKey model's data if it doesn't exist\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n+            # Create a data validation dropdown using the related names\n             dv = DataValidation(\n                 type=\"list\",\n                 formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the column in the main sheet\n+            # Apply the dropdown to the entire column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            if col_num > 26:\n+                col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n+            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n             sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n"
                },
                {
                    "date": 1725000106336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for ForeignKey fields and creating relevant sheets.\n+    including dropdowns for selecting related model data.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -148,15 +148,19 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n-        foreignkey_fields = {}\n+        related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.many_to_one:  # Only consider ForeignKey fields\n+                if field.is_relation:\n                     related_model = field.related_model\n-                    foreignkey_fields[field.name] = related_model\n-                    column_list.append(field.name)\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -167,48 +171,49 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Populate the sheet with data from the model\n+        # Fetch related data directly from related models\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column in foreignkey_fields:\n-                    related_object = getattr(data, column)\n-                    value = str(related_object) if related_object else None\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns and save related data to relevant sheets only for ForeignKey fields\n-        for col_num, (field_name, related_model) in enumerate(foreignkey_fields.items(), 1):\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n             related_objs = related_model.objects.all()\n-            if not related_objs:\n-                continue  # Skip if there are no related objects\n-\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Create a new sheet for each ForeignKey model's data if it doesn't exist\n+            # Add related names to a new sheet for data validation\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n-            # Create a data validation dropdown using the related names\n             dv = DataValidation(\n                 type=\"list\",\n                 formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the entire column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            if col_num > 26:\n-                col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n-            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+            # Apply the dropdown to the column in the main sheet\n             sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n"
                },
                {
                    "date": 1725000194966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,8 @@\n \n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n from django.apps import apps\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n@@ -107,9 +106,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n+    excluding indirect relations and including only direct model fields.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -146,23 +145,13 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        # Get all fields of the model, excluding specified fields and related fields\n         column_list = []\n-        related_models = {}\n         for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n-                else:\n-                    column_list.append(field.name)\n+            if field.name not in self.excluded_fields and \"image\" not in field.name and not field.is_relation:\n+                column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n@@ -171,50 +160,14 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Write data rows\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n-                else:\n-                    value = getattr(data, column)\n+                value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the column in the main sheet\n-            sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n-\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n"
                },
                {
                    "date": 1725000319299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,12 +145,18 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields and related fields\n+        # Get all fields of the model, excluding specified fields, related fields,\n+        # and fields representing indirect relations\n         column_list = []\n         for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name and not field.is_relation:\n+            if (\n+                field.name not in self.excluded_fields\n+                and \"image\" not in field.name\n+                and not field.is_relation\n+                and not isinstance(field, (models.ManyToManyField, models.ForeignKey))\n+            ):\n                 column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n"
                },
                {
                    "date": 1725000412330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,14 +97,16 @@\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from django.apps import apps\n+from django.db import models  # Add this import\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n+\n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n     excluding indirect relations and including only direct model fields.\n"
                },
                {
                    "date": 1725000619389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,20 +97,19 @@\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from django.apps import apps\n-from django.db import models  # Add this import\n+from django.db import models  # Import models\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n-\n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    excluding indirect relations and including only direct model fields.\n+    including ForeignKey and ManyToMany fields, but excluding related name fields.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -147,19 +146,20 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields, related fields,\n-        # and fields representing indirect relations\n+        # Get all fields of the model, excluding specified fields and related name fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n-            if (\n-                field.name not in self.excluded_fields\n-                and \"image\" not in field.name\n-                and not field.is_relation\n-                and not isinstance(field, (models.ManyToManyField, models.ForeignKey))\n-            ):\n-                column_list.append(field.name)\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    # Include ForeignKey and ManyToMany fields, exclude related names\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n+                else:\n+                    column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n@@ -171,9 +171,19 @@\n \n         # Write data rows\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                value = getattr(data, column)\n+                if column.endswith(\"_id\"):\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = related_obj.id if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj.id) for obj in related_objs])\n+                else:\n+                    value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n"
                },
                {
                    "date": 1725000794677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including ForeignKey and ManyToMany fields, but excluding related name fields.\n+    including ForeignKey and ManyToMany fields with both IDs and names.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -151,13 +151,10 @@\n         column_list = []\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n-                    # Include ForeignKey and ManyToMany fields, exclude related names\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n+                    # Include ForeignKey and ManyToMany fields\n+                    column_list.append(f\"{field.name}_id_name\")\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -171,17 +168,21 @@\n \n         # Write data rows\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    related_field_name = column.replace(\"_id\", \"\")\n+                if column.endswith(\"_id_name\"):\n+                    related_field_name = column.replace(\"_id_name\", \"\")\n                     related_obj = getattr(data, related_field_name)\n-                    value = related_obj.id if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj.id) for obj in related_objs])\n+                    if related_obj is not None:\n+                        if isinstance(related_obj, models.Manager):\n+                            related_values = [\n+                                f\"{obj.id} - {str(obj)}\" for obj in related_obj.all()\n+                            ]\n+                            value = \", \".join(related_values)\n+                        else:\n+                            value = f\"{related_obj.id} - {str(related_obj)}\"\n+                    else:\n+                        value = None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n"
                },
                {
                    "date": 1725000919277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,19 +97,20 @@\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from django.apps import apps\n-from django.db import models  # Import models\n+from django.db import models  # Add this import\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n+\n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including ForeignKey and ManyToMany fields with both IDs and names.\n+    excluding indirect relations and including only direct model fields.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -146,17 +147,19 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields and related name fields\n+        # Get all fields of the model, excluding specified fields, related fields,\n+        # and fields representing indirect relations\n         column_list = []\n         for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    # Include ForeignKey and ManyToMany fields\n-                    column_list.append(f\"{field.name}_id_name\")\n-                else:\n-                    column_list.append(field.name)\n+            if (\n+                field.name not in self.excluded_fields\n+                and \"image\" not in field.name\n+                and not field.is_relation\n+                and not isinstance(field, (models.ManyToManyField, models.ForeignKey))\n+            ):\n+                column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n@@ -168,23 +171,9 @@\n \n         # Write data rows\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id_name\"):\n-                    related_field_name = column.replace(\"_id_name\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    if related_obj is not None:\n-                        if isinstance(related_obj, models.Manager):\n-                            related_values = [\n-                                f\"{obj.id} - {str(obj)}\" for obj in related_obj.all()\n-                            ]\n-                            value = \", \".join(related_values)\n-                        else:\n-                            value = f\"{related_obj.id} - {str(related_obj)}\"\n-                    else:\n-                        value = None\n-                else:\n-                    value = getattr(data, column)\n+                value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n"
                },
                {
                    "date": 1725000927440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,16 +97,14 @@\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from django.apps import apps\n-from django.db import models  # Add this import\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n-\n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n     excluding indirect relations and including only direct model fields.\n"
                },
                {
                    "date": 1725000936877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,18 +145,12 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields, related fields,\n-        # and fields representing indirect relations\n+        # Get all fields of the model, excluding specified fields and related fields\n         column_list = []\n         for field in model_class._meta.get_fields():\n-            if (\n-                field.name not in self.excluded_fields\n-                and \"image\" not in field.name\n-                and not field.is_relation\n-                and not isinstance(field, (models.ManyToManyField, models.ForeignKey))\n-            ):\n+            if field.name not in self.excluded_fields and \"image\" not in field.name and not field.is_relation:\n                 column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n"
                },
                {
                    "date": 1725000986665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n \n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n from django.apps import apps\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n@@ -106,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    excluding indirect relations and including only direct model fields.\n+    including dropdowns for selecting related model data.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -145,13 +146,23 @@\n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n-        # Get all fields of the model, excluding specified fields and related fields\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n+        related_models = {}\n         for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name and not field.is_relation:\n-                column_list.append(field.name)\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n+                else:\n+                    column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n@@ -160,14 +171,50 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Write data rows\n+        # Fetch related data directly from related models\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                value = getattr(data, column)\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n+                else:\n+                    value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n+\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n"
                },
                {
                    "date": 1725001058494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n+    including dropdowns for ForeignKey fields and creating relevant sheets.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -148,19 +148,15 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n-        related_models = {}\n+        foreignkey_fields = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n+                if field.many_to_one:  # Only consider ForeignKey fields\n                     related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n+                    foreignkey_fields[field.name] = related_model\n+                    column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -171,49 +167,48 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Populate the sheet with data from the model\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n+                if column in foreignkey_fields:\n+                    related_object = getattr(data, column)\n+                    value = str(related_object) if related_object else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+        # Add dropdowns and save related data to relevant sheets only for ForeignKey fields\n+        for col_num, (field_name, related_model) in enumerate(foreignkey_fields.items(), 1):\n             related_objs = related_model.objects.all()\n+            if not related_objs:\n+                continue  # Skip if there are no related objects\n+\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Add related names to a new sheet for data validation\n+            # Create a new sheet for each ForeignKey model's data if it doesn't exist\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n+            # Create a data validation dropdown using the related names\n             dv = DataValidation(\n                 type=\"list\",\n                 formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the column in the main sheet\n+            # Apply the dropdown to the entire column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            if col_num > 26:\n+                col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n+            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n             sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n"
                },
                {
                    "date": 1725001072712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,14 +167,15 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Populate the sheet with data from the model\n+        # Fetch related data directly from related models and populate the sheet\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n                 if column in foreignkey_fields:\n-                    related_object = getattr(data, column)\n-                    value = str(related_object) if related_object else None\n+                    # Handle ForeignKey fields\n+                    related_manager = getattr(data, column)\n+                    value = str(related_manager) if related_manager else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n"
                },
                {
                    "date": 1725001085061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for ForeignKey fields and creating relevant sheets.\n+    including dropdowns for all columns and saving related data in separate sheets.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -148,14 +148,14 @@\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n-        foreignkey_fields = {}\n+        related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.many_to_one:  # Only consider ForeignKey fields\n+                if field.is_relation:\n                     related_model = field.related_model\n-                    foreignkey_fields[field.name] = related_model\n+                    related_models[field.name] = related_model\n                     column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n \n@@ -170,25 +170,28 @@\n \n         # Fetch related data directly from related models and populate the sheet\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column in foreignkey_fields:\n-                    # Handle ForeignKey fields\n+                if column in related_models:\n+                    # Handle ForeignKey and ManyToMany fields\n                     related_manager = getattr(data, column)\n-                    value = str(related_manager) if related_manager else None\n+                    if hasattr(related_manager, 'all'):\n+                        # ManyToManyField: Fetch related data directly\n+                        related_objs = related_manager.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        # ForeignKey: Fetch related data directly\n+                        value = str(related_manager) if related_manager else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns and save related data to relevant sheets only for ForeignKey fields\n-        for col_num, (field_name, related_model) in enumerate(foreignkey_fields.items(), 1):\n+        # Add dropdowns and save related data to other sheets\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n             related_objs = related_model.objects.all()\n-            if not related_objs:\n-                continue  # Skip if there are no related objects\n-\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Create a new sheet for each ForeignKey model's data if it doesn't exist\n+            # Create a new sheet for each related model's data\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n@@ -209,8 +212,33 @@\n                 col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n             dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n             sheet.add_data_validation(dv)\n \n+        # Add dropdowns for non-related fields\n+        for col_num, column in enumerate(column_list, 1):\n+            if column not in related_models:\n+                unique_values = model_class.objects.values_list(column, flat=True).distinct()\n+                validation_sheet_name = f\"{column}_data\"\n+                if validation_sheet_name not in workbook.sheetnames:\n+                    validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                    for i, value in enumerate(unique_values, 1):\n+                        validation_sheet.cell(row=i, column=1, value=value)\n+\n+                dv = DataValidation(\n+                    type=\"list\",\n+                    formula1=f'{validation_sheet_name}!$A$1:$A${len(unique_values)}',\n+                    showDropDown=True\n+                )\n+                dv.error = 'Invalid entry, please select from the list'\n+                dv.errorTitle = 'Invalid Entry'\n+\n+                # Apply the dropdown to the entire column in the main sheet\n+                col_letter = chr(64 + col_num)\n+                if col_num > 26:\n+                    col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n+                dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+                sheet.add_data_validation(dv)\n+\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n"
                },
                {
                    "date": 1725001149336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,156 +93,4 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for all columns and saving related data in separate sheets.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Fetch related data directly from related models and populate the sheet\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    # Handle ForeignKey and ManyToMany fields\n-                    related_manager = getattr(data, column)\n-                    if hasattr(related_manager, 'all'):\n-                        # ManyToManyField: Fetch related data directly\n-                        related_objs = related_manager.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        # ForeignKey: Fetch related data directly\n-                        value = str(related_manager) if related_manager else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns and save related data to other sheets\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Create a new sheet for each related model's data\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            # Create a data validation dropdown using the related names\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the entire column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            if col_num > 26:\n-                col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n-            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-            sheet.add_data_validation(dv)\n-\n-        # Add dropdowns for non-related fields\n-        for col_num, column in enumerate(column_list, 1):\n-            if column not in related_models:\n-                unique_values = model_class.objects.values_list(column, flat=True).distinct()\n-                validation_sheet_name = f\"{column}_data\"\n-                if validation_sheet_name not in workbook.sheetnames:\n-                    validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                    for i, value in enumerate(unique_values, 1):\n-                        validation_sheet.cell(row=i, column=1, value=value)\n-\n-                dv = DataValidation(\n-                    type=\"list\",\n-                    formula1=f'{validation_sheet_name}!$A$1:$A${len(unique_values)}',\n-                    showDropDown=True\n-                )\n-                dv.error = 'Invalid entry, please select from the list'\n-                dv.errorTitle = 'Invalid Entry'\n-\n-                # Apply the dropdown to the entire column in the main sheet\n-                col_letter = chr(64 + col_num)\n-                if col_num > 26:\n-                    col_letter = chr(64 + (col_num - 1) // 26) + chr(65 + (col_num - 1) % 26)\n-                dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-                sheet.add_data_validation(dv)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n"
                },
                {
                    "date": 1725001166453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,4 +93,129 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting directly related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation and (field.many_to_one or field.many_to_many):\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Fetch related data directly from related models and populate the sheet\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    # Handle ForeignKey and ManyToMany fields\n+                    related_manager = getattr(data, column)\n+                    if hasattr(related_manager, 'all'):\n+                        # ManyToManyField: Fetch related data directly\n+                        related_objs = related_manager.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        # ForeignKey: Fetch related data directly\n+                        value = str(related_manager) if related_manager else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            # Create a data validation dropdown using the related names\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the entire column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n+            sheet.add_data_validation(dv)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n"
                },
                {
                    "date": 1725001183446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting directly related model data.\n+    including saving foreign key data in separate sheets and using them as dropdowns.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -151,67 +151,71 @@\n         column_list = []\n         related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation and (field.many_to_one or field.many_to_many):\n+                if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n-                    column_list.append(field.name)\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n+        main_sheet = workbook.active\n+        main_sheet.title = model_name\n \n-        # Write the header row\n+        # Write the header row in the main sheet\n         for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n+            main_sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models and populate the sheet\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    # Handle ForeignKey and ManyToMany fields\n-                    related_manager = getattr(data, column)\n-                    if hasattr(related_manager, 'all'):\n-                        # ManyToManyField: Fetch related data directly\n-                        related_objs = related_manager.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        # ForeignKey: Fetch related data directly\n-                        value = str(related_manager) if related_manager else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        # Fill related model data in separate sheets and create dropdowns\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+            # Create a new sheet for the related model\n+            related_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if related_sheet_name not in workbook.sheetnames:\n+                related_sheet = workbook.create_sheet(title=related_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n+                    related_sheet.cell(row=i, column=1, value=name)\n \n-            # Create a data validation dropdown using the related names\n+            # Create a dropdown for this column in the main sheet\n             dv = DataValidation(\n                 type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                formula1=f'{related_sheet_name}!$A$1:$A${len(related_names)}',\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n             # Apply the dropdown to the entire column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-            sheet.add_data_validation(dv)\n+            main_sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}1048576\")  # Excel's maximum row number\n \n+        # Write the data rows in the main sheet\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n+                else:\n+                    value = getattr(data, column)\n+                main_sheet.cell(row=row_num, column=col_num, value=value)\n+\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n"
                },
                {
                    "date": 1725001269108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n+ import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n from django.apps import apps\n@@ -107,9 +107,9 @@\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n-    including saving foreign key data in separate sheets and using them as dropdowns.\n+    including dropdowns for selecting related model data.\n     \"\"\"\n     \n     model_mapping = {\n         \"package\": \"destination.Package\",\n@@ -164,41 +164,16 @@\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n         workbook = Workbook()\n-        main_sheet = workbook.active\n-        main_sheet.title = model_name\n+        sheet = workbook.active\n+        sheet.title = model_name\n \n-        # Write the header row in the main sheet\n+        # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n-            main_sheet.cell(row=1, column=col_num, value=column_title)\n+            sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fill related model data in separate sheets and create dropdowns\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Create a new sheet for the related model\n-            related_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if related_sheet_name not in workbook.sheetnames:\n-                related_sheet = workbook.create_sheet(title=related_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    related_sheet.cell(row=i, column=1, value=name)\n-\n-            # Create a dropdown for this column in the main sheet\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{related_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the entire column in the main sheet\n-            main_sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}1048576\")  # Excel's maximum row number\n-\n-        # Write the data rows in the main sheet\n+        # Fetch related data directly from related models\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n                 if column.endswith(\"_id\"):\n                     # ForeignKey or OneToOneField relation, fetch directly from related model\n@@ -212,14 +187,38 @@\n                     related_objs = related_manager.all()\n                     value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n                     value = getattr(data, column)\n-                main_sheet.cell(row=row_num, column=col_num, value=value)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n \n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n+\n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n         # Save the workbook to the response\n         workbook.save(response)\n \n-        return response\n+        return response\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725001299874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n- import pandas as pd\n+import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n from django.apps import apps\n"
                },
                {
                    "date": 1725001612503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,11 +156,11 @@\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n                     # Handle ForeignKey and OneToOneField separately from ManyToMany\n                     if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n+                        column_list.append(field.name)  # Use the field name directly\n                     elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n+                        column_list.append(field.name)  # Use the field name directly\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -171,22 +171,21 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Write data rows with names in columns\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n+                if column in related_models:\n+                    related_field_name = column\n                     related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n+                    if isinstance(related_obj, models.Manager):\n+                        # ManyToManyField relation\n+                        related_objs = related_obj.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        # ForeignKey or OneToOneField relation\n+                        value = str(related_obj) if related_obj else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n@@ -201,24 +200,26 @@\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n+            # Calculate the correct formula range for the dropdown\n             dv = DataValidation(\n                 type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                formula1=f\"'{validation_sheet_name}'!$A$1:$A${len(related_names)}\",\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n             # Apply the dropdown to the column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n             sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n\\ No newline at end of file\n         # Save the workbook to the response\n         workbook.save(response)\n \n-        return response\n+        return response\n"
                },
                {
                    "date": 1725001652079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n+from django.db import models  \n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n@@ -221,5 +222,5 @@\n \n         # Save the workbook to the response\n         workbook.save(response)\n \n-        return response\n\\ No newline at end of file\n+        return response\n"
                },
                {
                    "date": 1725001841494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,14 +98,14 @@\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n from django.apps import apps\n+from django.db import models\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n-from django.db import models  \n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n@@ -155,13 +155,10 @@\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(field.name)  # Use the field name directly\n-                    elif field.many_to_many:\n-                        column_list.append(field.name)  # Use the field name directly\n+                    # Include the field directly, we'll add the dropdown validation later\n+                    column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -190,9 +187,9 @@\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n         # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n \n             # Add related names to a new sheet for data validation\n"
                },
                {
                    "date": 1725002049920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+# from django.shortcuts import render\n+# from rest_framework.response import Response\n+# from rest_framework.views import APIView\n+# from rest_framework import status\n+# from django.http import HttpResponse\n+# import csv\n+# from django.apps import apps\n+# from drf_yasg.utils import swagger_auto_schema\n+# from drf_yasg import openapi\n+\n+# class GetSampleAPIView(APIView):\n+#     \"\"\"\n+#     API view to generate and download sample data in CSV format for different models.\n+#     \"\"\"\n+    \n+#     model_mapping = {\n+#         \"package\": \"destination.Package\",\n+#         \"destination\": \"destination.Destination\",\n+#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n+#         \"review\": \"review.Review\",\n+#         \"collection\": \"collection.Collection\",\n+#         \"departure\": \"departure.Departure\",\n+#         \"destination-book\": \"booking.DestinationBook\",\n+#         \"activity\": \"activities.Activity\",\n+#     }\n+\n+#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+#     @swagger_auto_schema(\n+#         operation_description=\"Get a sample CSV for the specified model type.\",\n+#         manual_parameters=[\n+#             openapi.Parameter(\n+#                 'type',\n+#                 openapi.IN_PATH,\n+#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n+#                 type=openapi.TYPE_STRING,\n+#                 enum=list(model_mapping.keys())\n+#             )\n+#         ],\n+#         responses={200: 'CSV file', 400: 'Unknown type'}\n+#     )\n+#     def get(self, request, type, format=None):\n+#         model_class_path = self.model_mapping.get(type)\n+\n+#         if not model_class_path:\n+#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+#         # Dynamically import the model class\n+#         app_label, model_name = model_class_path.split(\".\")\n+#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+#         # Get all fields of the model, excluding specified fields\n+#         column_list = []\n+#         for field in model_class._meta.get_fields():\n+#             if field.name not in self.excluded_fields:\n+#                 if field.is_relation:\n+#                     if field.many_to_one or field.one_to_one:\n+#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+#                         column_list.append(f\"{field.name}_names\")\n+#                     elif field.many_to_many:\n+#                         # For ManyToManyField, append related objects' names\n+#                         column_list.append(f\"{field.name}_names\")\n+#                 else:\n+#                     column_list.append(field.name)\n+\n+#         queryset = model_class.objects.all()\n+\n+#         response = HttpResponse(content_type='text/csv')\n+#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n+\n+#         writer = csv.writer(response)\n+\n+#         # Write the header row\n+#         writer.writerow(column_list)\n+\n+#         # Write data rows\n+#         for data in queryset:\n+#             data_row = []\n+#             for column in column_list:\n+#                 if column.endswith(\"_id\"):\n+#                     # ForeignKey or OneToOneField relation, get related object's ID\n+#                     related_field_name = column.replace(\"_id\", \"\")\n+#                     related_object = getattr(data, related_field_name)\n+#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+#                 elif column.endswith(\"_names\"):\n+#                     # ManyToManyField relation, get related objects' names\n+#                     related_field_name = column.replace(\"_names\", \"\")\n+#                     related_objects = getattr(data, related_field_name).all()\n+#                     related_names = \", \".join(str(obj) for obj in related_objects)\n+#                     data_row.append(related_names)\n+#                 else:\n+#                     data_row.append(getattr(data, column))\n+#             writer.writerow(data_row)\n+\n+#         return response\n+\n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from django.db import models\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    # Include the field directly, we'll add the dropdown validation later\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Write data rows with names in columns\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    related_field_name = column\n+                    related_obj = getattr(data, related_field_name)\n+                    if isinstance(related_obj, models.Manager):\n+                        # ManyToManyField relation\n+                        related_objs = related_obj.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        # ForeignKey or OneToOneField relation\n+                        value = str(related_obj) if related_obj else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            # Calculate the correct formula range for the dropdown\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f\"'{validation_sheet_name}'!$A$1:$A${len(related_names)}\",\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the column in the main sheet\n+            col_letter = chr(64 + col_num)\n+            dv.add(f\"{col_letter}2:{col_letter}{sheet.max_row}\")\n+            sheet.add_data_validation(dv)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n"
                },
                {
                    "date": 1725002445530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,354 +93,4 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from django.db import models\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Include the field directly, we'll add the dropdown validation later\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write data rows with names in columns\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    related_field_name = column\n-                    related_obj = getattr(data, related_field_name)\n-                    if isinstance(related_obj, models.Manager):\n-                        # ManyToManyField relation\n-                        related_objs = related_obj.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        # ForeignKey or OneToOneField relation\n-                        value = str(related_obj) if related_obj else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            # Calculate the correct formula range for the dropdown\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f\"'{validation_sheet_name}'!$A$1:$A${len(related_names)}\",\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            dv.add(f\"{col_letter}2:{col_letter}{sheet.max_row}\")\n-            sheet.add_data_validation(dv)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n-# from django.shortcuts import render\n-# from rest_framework.response import Response\n-# from rest_framework.views import APIView\n-# from rest_framework import status\n-# from django.http import HttpResponse\n-# import csv\n-# from django.apps import apps\n-# from drf_yasg.utils import swagger_auto_schema\n-# from drf_yasg import openapi\n-\n-# class GetSampleAPIView(APIView):\n-#     \"\"\"\n-#     API view to generate and download sample data in CSV format for different models.\n-#     \"\"\"\n-    \n-#     model_mapping = {\n-#         \"package\": \"destination.Package\",\n-#         \"destination\": \"destination.Destination\",\n-#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n-#         \"review\": \"review.Review\",\n-#         \"collection\": \"collection.Collection\",\n-#         \"departure\": \"departure.Departure\",\n-#         \"destination-book\": \"booking.DestinationBook\",\n-#         \"activity\": \"activities.Activity\",\n-#     }\n-\n-#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-#     @swagger_auto_schema(\n-#         operation_description=\"Get a sample CSV for the specified model type.\",\n-#         manual_parameters=[\n-#             openapi.Parameter(\n-#                 'type',\n-#                 openapi.IN_PATH,\n-#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n-#                 type=openapi.TYPE_STRING,\n-#                 enum=list(model_mapping.keys())\n-#             )\n-#         ],\n-#         responses={200: 'CSV file', 400: 'Unknown type'}\n-#     )\n-#     def get(self, request, type, format=None):\n-#         model_class_path = self.model_mapping.get(type)\n-\n-#         if not model_class_path:\n-#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-#         # Dynamically import the model class\n-#         app_label, model_name = model_class_path.split(\".\")\n-#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-#         # Get all fields of the model, excluding specified fields\n-#         column_list = []\n-#         for field in model_class._meta.get_fields():\n-#             if field.name not in self.excluded_fields:\n-#                 if field.is_relation:\n-#                     if field.many_to_one or field.one_to_one:\n-#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-#                         column_list.append(f\"{field.name}_names\")\n-#                     elif field.many_to_many:\n-#                         # For ManyToManyField, append related objects' names\n-#                         column_list.append(f\"{field.name}_names\")\n-#                 else:\n-#                     column_list.append(field.name)\n-\n-#         queryset = model_class.objects.all()\n-\n-#         response = HttpResponse(content_type='text/csv')\n-#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n-\n-#         writer = csv.writer(response)\n-\n-#         # Write the header row\n-#         writer.writerow(column_list)\n-\n-#         # Write data rows\n-#         for data in queryset:\n-#             data_row = []\n-#             for column in column_list:\n-#                 if column.endswith(\"_id\"):\n-#                     # ForeignKey or OneToOneField relation, get related object's ID\n-#                     related_field_name = column.replace(\"_id\", \"\")\n-#                     related_object = getattr(data, related_field_name)\n-#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-#                 elif column.endswith(\"_names\"):\n-#                     # ManyToManyField relation, get related objects' names\n-#                     related_field_name = column.replace(\"_names\", \"\")\n-#                     related_objects = getattr(data, related_field_name).all()\n-#                     related_names = \", \".join(str(obj) for obj in related_objects)\n-#                     data_row.append(related_names)\n-#                 else:\n-#                     data_row.append(getattr(data, column))\n-#             writer.writerow(data_row)\n-\n-#         return response\n-\n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from django.db import models\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Include the field directly, we'll add the dropdown validation later\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write data rows with names in columns\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    related_field_name = column\n-                    related_obj = getattr(data, related_field_name)\n-                    if isinstance(related_obj, models.Manager):\n-                        # ManyToManyField relation\n-                        related_objs = related_obj.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        # ForeignKey or OneToOneField relation\n-                        value = str(related_obj) if related_obj else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            # Calculate the correct formula range for the dropdown\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f\"'{validation_sheet_name}'!$A$1:$A${len(related_names)}\",\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the column in the main sheet\n-            col_letter = chr(64 + col_num)\n-            dv.add(f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\")\n-            sheet.add_data_validation(dv)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n"
                },
                {
                    "date": 1725002524550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,4 +93,129 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from openpyxl.utils import get_column_letter\n+from django.apps import apps\n+from django.db import models\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Write data rows with names in columns\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    related_field_name = column\n+                    related_obj = getattr(data, related_field_name)\n+                    if isinstance(related_obj, models.Manager):\n+                        related_objs = related_obj.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        value = str(related_obj) if related_obj else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            # Calculate the correct formula range for the dropdown\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f\"'{validation_sheet_name}'!$A$1:$A${len(related_names)}\",\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the correct column in the main sheet\n+            col_letter = get_column_letter(col_num)\n+            dv.add(f\"{col_letter}2:{col_letter}{sheet.max_row}\")\n+            sheet.add_data_validation(dv)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n"
                },
                {
                    "date": 1725002805110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,11 +197,13 @@\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n             # Calculate the correct formula range for the dropdown\n+            start_row = 2\n+            end_row = start_row + len(related_names) - 1\n             dv = DataValidation(\n                 type=\"list\",\n-                formula1=f\"'{validation_sheet_name}'!$A$1:$A${len(related_names)}\",\n+                formula1=f\"'{validation_sheet_name}'!$A${start_row}:$A${end_row}\",\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n"
                },
                {
                    "date": 1725003455330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,131 +93,4 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from openpyxl.utils import get_column_letter\n-from django.apps import apps\n-from django.db import models\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write data rows with names in columns\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    related_field_name = column\n-                    related_obj = getattr(data, related_field_name)\n-                    if isinstance(related_obj, models.Manager):\n-                        related_objs = related_obj.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        value = str(related_obj) if related_obj else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            # Calculate the correct formula range for the dropdown\n-            start_row = 2\n-            end_row = start_row + len(related_names) - 1\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f\"'{validation_sheet_name}'!$A${start_row}:$A${end_row}\",\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the correct column in the main sheet\n-            col_letter = get_column_letter(col_num)\n-            dv.add(f\"{col_letter}2:{col_letter}{sheet.max_row}\")\n-            sheet.add_data_validation(dv)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n"
                },
                {
                    "date": 1725003599263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,4 +93,134 @@\n #             writer.writerow(data_row)\n \n #         return response\n \n+\n+You said:\n+delete the indirect relations in the excel file. only put direct relations part: import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Fetch related data directly from related models\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725003620880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,12 +92,9 @@\n #                     data_row.append(getattr(data, column))\n #             writer.writerow(data_row)\n \n #         return response\n-\n-\n-You said:\n-delete the indirect relations in the excel file. only put direct relations part: import pandas as pd\n+import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n from django.apps import apps\n"
                },
                {
                    "date": 1725003759313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n                     # Handle ForeignKey and OneToOneField separately from ManyToMany\n                     if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n+                        column_list.append(f\"{field.name}_names\")\n                     elif field.many_to_many:\n                         column_list.append(f\"{field.name}_ids\")\n                 else:\n                     column_list.append(field.name)\n"
                },
                {
                    "date": 1725003783111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n                     # Handle ForeignKey and OneToOneField separately from ManyToMany\n                     if field.many_to_one or field.one_to_one:\n                         column_list.append(f\"{field.name}_names\")\n                     elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n+                        column_list.append(f\"{field.name}_names\")\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -178,9 +178,9 @@\n                     # ForeignKey or OneToOneField relation, fetch directly from related model\n                     related_field_name = column.replace(\"_id\", \"\")\n                     related_obj = getattr(data, related_field_name)\n                     value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n+                elif column.endswith(\"_names\"):\n                     # ManyToManyField relation, fetch directly from related model\n                     related_field_name = column.replace(\"_ids\", \"\")\n                     related_manager = getattr(data, related_field_name)\n                     related_objs = related_manager.all()\n"
                },
                {
                    "date": 1725003789966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,9 @@\n                     related_obj = getattr(data, related_field_name)\n                     value = str(related_obj) if related_obj else None\n                 elif column.endswith(\"_names\"):\n                     # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_field_name = column.replace(\"_names\", \"\")\n                     related_manager = getattr(data, related_field_name)\n                     related_objs = related_manager.all()\n                     value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n"
                },
                {
                    "date": 1725003896969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,17 +200,17 @@\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n-            dv = DataValidation(\n+            v = DataValidation(\n                 type=\"list\",\n                 formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n                 showDropDown=True\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the column in the main sheet\n+            # Apply the dropdown to the column in the main shedet\n             sheet.add_data_validation(dv)\n             dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n \n         # Prepare the response\n"
                },
                {
                    "date": 1725007110228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,11 @@\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n+from openpyxl.utils import get_column_letter\n from django.apps import apps\n+from django.db import models\n from rest_framework.views import APIView\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n@@ -153,13 +155,9 @@\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_names\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_names\")\n+                    column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -170,28 +168,39 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Write data rows with names in columns\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n+                if column in related_models:\n+                    related_field_name = column\n                     related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_names\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_names\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n+                    if isinstance(related_obj, models.Manager):\n+                        related_objs = related_obj.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        value = str(related_obj) if related_obj else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+        # Adding dynamic dropdowns for related data\n+        self.add_dynamic_drop_downs(workbook, related_models, sheet.max_row)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n+\n+    def add_dynamic_drop_downs(self, workbook, related_models, row_total):\n+        sheet = workbook.active\n+\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n \n             # Add related names to a new sheet for data validation\n@@ -200,24 +209,12 @@\n                 validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n                 for i, name in enumerate(related_names, 1):\n                     validation_sheet.cell(row=i, column=1, value=name)\n \n-            v = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n+            # Apply dropdowns using dynamic model data\n+            data_val = DataValidation(type=\"list\", formula1=f'={validation_sheet_name}!$A$1:$A${len(related_names)}', showDropDown=True)\n+            data_val.error = 'Invalid entry, please select from the list'\n+            data_val.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the column in the main shedet\n-            sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n\\ No newline at end of file\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n+            col_letter = get_column_letter(col_num)\n+            data_val.add(f\"{col_letter}2:{col_letter}{row_total}\")\n+            sheet.add_data_validation(data_val)\n"
                },
                {
                    "date": 1725007535288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,11 @@\n #                     data_row.append(getattr(data, column))\n #             writer.writerow(data_row)\n \n #         return response\n+\n+\n+\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n@@ -139,15 +142,18 @@\n         responses={200: 'Excel file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n         model_class_path = self.model_mapping.get(type)\n+        print(f\"Requested type: {type}\")\n \n         if not model_class_path:\n+            print(\"Unknown type provided.\")\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+        print(f\"Model class obtained: {model_class}\")\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n         related_models = {}\n@@ -155,23 +161,28 @@\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n+                    print(f\"Related model for {field.name}: {related_model}\")\n                     column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n+        print(f\"Column list: {column_list}\")\n \n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n         sheet.title = model_name\n+        print(f\"Excel sheet created with title: {sheet.title}\")\n \n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n+        print(\"Header row written.\")\n \n         # Write data rows with names in columns\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n+            print(f\"Processing row {row_num} for data: {data}\")\n             for col_num, column in enumerate(column_list, 1):\n                 if column in related_models:\n                     related_field_name = column\n                     related_obj = getattr(data, related_field_name)\n@@ -179,42 +190,48 @@\n                         related_objs = related_obj.all()\n                         value = \", \".join([str(obj) for obj in related_objs])\n                     else:\n                         value = str(related_obj) if related_obj else None\n+                    print(f\"  Related value for {column}: {value}\")\n                 else:\n                     value = getattr(data, column)\n+                    print(f\"  Regular value for {column}: {value}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n+        print(\"Data rows written. Adding dropdowns now.\")\n         # Adding dynamic dropdowns for related data\n-        self.add_dynamic_drop_downs(workbook, related_models, sheet.max_row)\n+        self.add_dynamic_drop_downs(workbook, related_models, sheet)\n+        print(\"Dropdowns added.\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n         # Save the workbook to the response\n         workbook.save(response)\n+        print(f\"Excel workbook saved as {type}.xlsx\")\n \n         return response\n \n-    def add_dynamic_drop_downs(self, workbook, related_models, row_total):\n-        sheet = workbook.active\n-\n+    def add_dynamic_drop_downs(self, workbook, related_models, sheet):\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n+            print(f\"Related names for {field_name}: {related_names}\")\n \n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n+            # Fill a new column with related model data to use as dropdown source\n+            validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n+            for i, name in enumerate(related_names, start=2):\n+                sheet[f'{validation_col_letter}{i}'] = name\n+            print(f\"Data for dropdown populated in column {validation_col_letter}.\")\n \n-            # Apply dropdowns using dynamic model data\n-            data_val = DataValidation(type=\"list\", formula1=f'={validation_sheet_name}!$A$1:$A${len(related_names)}', showDropDown=True)\n+            # Create DataValidation and apply to relevant column\n+            dropdown_col_letter = get_column_letter(col_num)\n+            data_val = DataValidation(type=\"list\", formula1=f'${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n             data_val.error = 'Invalid entry, please select from the list'\n             data_val.errorTitle = 'Invalid Entry'\n \n-            col_letter = get_column_letter(col_num)\n-            data_val.add(f\"{col_letter}2:{col_letter}{row_total}\")\n+            # Apply data validation dropdown to the main column where the ForeignKey or ManyToMany field is\n+            for row_num in range(2, sheet.max_row + 1):\n+                data_val.add(f'{dropdown_col_letter}{row_num}')\n             sheet.add_data_validation(data_val)\n+            print(f\"Dropdown applied to column {dropdown_col_letter}.\")\n"
                },
                {
                    "date": 1725008311618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,8 +107,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n+import difflib  # Import for string similarity comparison\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n@@ -223,15 +224,19 @@\n             for i, name in enumerate(related_names, start=2):\n                 sheet[f'{validation_col_letter}{i}'] = name\n             print(f\"Data for dropdown populated in column {validation_col_letter}.\")\n \n-            # Create DataValidation and apply to relevant column\n-            dropdown_col_letter = get_column_letter(col_num)\n-            data_val = DataValidation(type=\"list\", formula1=f'${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n-            data_val.error = 'Invalid entry, please select from the list'\n-            data_val.errorTitle = 'Invalid Entry'\n+            # Create DataValidation and apply if column name matches or is 80% similar to model name\n+            for col_index, column_title in enumerate(sheet.iter_cols(min_row=1, max_row=1, values_only=True), start=1):\n+                similarity_ratio = difflib.SequenceMatcher(None, column_title[0].lower(), field_name.lower()).ratio()\n+                if column_title[0].lower() == field_name.lower() or similarity_ratio > 0.8:\n+                    dropdown_col_letter = get_column_letter(col_index)\n+                    data_val = DataValidation(type=\"list\", formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n+                    data_val.error = 'Invalid entry, please select from the list'\n+                    data_val.errorTitle = 'Invalid Entry'\n+                    print(f\"Adding dropdown to column {dropdown_col_letter} for field {field_name} (Similarity: {similarity_ratio * 100:.2f}%)\")\n \n-            # Apply data validation dropdown to the main column where the ForeignKey or ManyToMany field is\n-            for row_num in range(2, sheet.max_row + 1):\n-                data_val.add(f'{dropdown_col_letter}{row_num}')\n-            sheet.add_data_validation(data_val)\n-            print(f\"Dropdown applied to column {dropdown_col_letter}.\")\n+                    # Apply data validation dropdown to the relevant column\n+                    for row_num in range(2, sheet.max_row + 1):\n+                        data_val.add(f'{dropdown_col_letter}{row_num}')\n+                    sheet.add_data_validation(data_val)\n+                    print(f\"Dropdown applied to column {dropdown_col_letter}.\")\n"
                },
                {
                    "date": 1725008768840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n-import difflib  # Import for string similarity comparison\n+import difflib\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n@@ -213,8 +213,9 @@\n \n         return response\n \n     def add_dynamic_drop_downs(self, workbook, related_models, sheet):\n+        print(\"Adding dropdowns to matching columns...\")\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n             print(f\"Related names for {field_name}: {related_names}\")\n@@ -224,12 +225,13 @@\n             for i, name in enumerate(related_names, start=2):\n                 sheet[f'{validation_col_letter}{i}'] = name\n             print(f\"Data for dropdown populated in column {validation_col_letter}.\")\n \n-            # Create DataValidation and apply if column name matches or is 80% similar to model name\n-            for col_index, column_title in enumerate(sheet.iter_cols(min_row=1, max_row=1, values_only=True), start=1):\n-                similarity_ratio = difflib.SequenceMatcher(None, column_title[0].lower(), field_name.lower()).ratio()\n-                if column_title[0].lower() == field_name.lower() or similarity_ratio > 0.8:\n+            # Iterate over columns in the first row to find matching columns\n+            for col_index, cell in enumerate(sheet[1], start=1):\n+                column_title = cell.value\n+                similarity_ratio = difflib.SequenceMatcher(None, column_title.lower(), field_name.lower()).ratio()\n+                if column_title.lower() == field_name.lower() or similarity_ratio > 0.8:\n                     dropdown_col_letter = get_column_letter(col_index)\n                     data_val = DataValidation(type=\"list\", formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n                     data_val.error = 'Invalid entry, please select from the list'\n                     data_val.errorTitle = 'Invalid Entry'\n@@ -239,4 +241,6 @@\n                     for row_num in range(2, sheet.max_row + 1):\n                         data_val.add(f'{dropdown_col_letter}{row_num}')\n                     sheet.add_data_validation(data_val)\n                     print(f\"Dropdown applied to column {dropdown_col_letter}.\")\n+        print(\"Dropdown addition complete.\")\n+\n"
                },
                {
                    "date": 1725008868411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,8 @@\n from rest_framework.response import Response\n from rest_framework import status\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n-import difflib\n \n class GetSampleAPIView(APIView):\n     \"\"\"\n     API view to generate and download sample data in Excel format for different models,\n@@ -199,9 +198,9 @@\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n         print(\"Data rows written. Adding dropdowns now.\")\n         # Adding dynamic dropdowns for related data\n-        self.add_dynamic_drop_downs(workbook, related_models, sheet)\n+        self.add_exact_match_drop_downs(workbook, related_models, sheet)\n         print(\"Dropdowns added.\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n@@ -212,10 +211,10 @@\n         print(f\"Excel workbook saved as {type}.xlsx\")\n \n         return response\n \n-    def add_dynamic_drop_downs(self, workbook, related_models, sheet):\n-        print(\"Adding dropdowns to matching columns...\")\n+    def add_exact_match_drop_downs(self, workbook, related_models, sheet):\n+        print(\"Adding dropdowns to exactly matching columns...\")\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n             print(f\"Related names for {field_name}: {related_names}\")\n@@ -225,22 +224,20 @@\n             for i, name in enumerate(related_names, start=2):\n                 sheet[f'{validation_col_letter}{i}'] = name\n             print(f\"Data for dropdown populated in column {validation_col_letter}.\")\n \n-            # Iterate over columns in the first row to find matching columns\n+            # Iterate over columns in the first row to find exactly matching columns\n             for col_index, cell in enumerate(sheet[1], start=1):\n                 column_title = cell.value\n-                similarity_ratio = difflib.SequenceMatcher(None, column_title.lower(), field_name.lower()).ratio()\n-                if column_title.lower() == field_name.lower() or similarity_ratio > 0.8:\n+                if column_title.lower() == field_name.lower():  # Exact match check\n                     dropdown_col_letter = get_column_letter(col_index)\n                     data_val = DataValidation(type=\"list\", formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n                     data_val.error = 'Invalid entry, please select from the list'\n                     data_val.errorTitle = 'Invalid Entry'\n-                    print(f\"Adding dropdown to column {dropdown_col_letter} for field {field_name} (Similarity: {similarity_ratio * 100:.2f}%)\")\n+                    print(f\"Adding dropdown to column {dropdown_col_letter} for field {field_name}\")\n \n                     # Apply data validation dropdown to the relevant column\n                     for row_num in range(2, sheet.max_row + 1):\n                         data_val.add(f'{dropdown_col_letter}{row_num}')\n                     sheet.add_data_validation(data_val)\n                     print(f\"Dropdown applied to column {dropdown_col_letter}.\")\n         print(\"Dropdown addition complete.\")\n-\n"
                },
                {
                    "date": 1725009143477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,8 @@\n \n #         return response\n \n \n-\n import pandas as pd\n from django.http import HttpResponse\n from openpyxl import Workbook\n from openpyxl.worksheet.datavalidation import DataValidation\n@@ -142,47 +141,35 @@\n         responses={200: 'Excel file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n         model_class_path = self.model_mapping.get(type)\n-        print(f\"Requested type: {type}\")\n-\n         if not model_class_path:\n-            print(\"Unknown type provided.\")\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-        print(f\"Model class obtained: {model_class}\")\n \n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n         related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n-                    print(f\"Related model for {field.name}: {related_model}\")\n                     column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n-        print(f\"Column list: {column_list}\")\n \n-        # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n         sheet.title = model_name\n-        print(f\"Excel sheet created with title: {sheet.title}\")\n \n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n-        print(\"Header row written.\")\n \n         # Write data rows with names in columns\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n-            print(f\"Processing row {row_num} for data: {data}\")\n             for col_num, column in enumerate(column_list, 1):\n                 if column in related_models:\n                     related_field_name = column\n                     related_obj = getattr(data, related_field_name)\n@@ -190,54 +177,36 @@\n                         related_objs = related_obj.all()\n                         value = \", \".join([str(obj) for obj in related_objs])\n                     else:\n                         value = str(related_obj) if related_obj else None\n-                    print(f\"  Related value for {column}: {value}\")\n                 else:\n                     value = getattr(data, column)\n-                    print(f\"  Regular value for {column}: {value}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        print(\"Data rows written. Adding dropdowns now.\")\n-        # Adding dynamic dropdowns for related data\n         self.add_exact_match_drop_downs(workbook, related_models, sheet)\n-        print(\"Dropdowns added.\")\n \n-        # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n-        # Save the workbook to the response\n         workbook.save(response)\n-        print(f\"Excel workbook saved as {type}.xlsx\")\n-\n         return response\n \n     def add_exact_match_drop_downs(self, workbook, related_models, sheet):\n-        print(\"Adding dropdowns to exactly matching columns...\")\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n-            print(f\"Related names for {field_name}: {related_names}\")\n \n-            # Fill a new column with related model data to use as dropdown source\n             validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n             for i, name in enumerate(related_names, start=2):\n                 sheet[f'{validation_col_letter}{i}'] = name\n-            print(f\"Data for dropdown populated in column {validation_col_letter}.\")\n \n-            # Iterate over columns in the first row to find exactly matching columns\n             for col_index, cell in enumerate(sheet[1], start=1):\n                 column_title = cell.value\n-                if column_title.lower() == field_name.lower():  # Exact match check\n+                if column_title.lower() == field_name.lower():  \n                     dropdown_col_letter = get_column_letter(col_index)\n                     data_val = DataValidation(type=\"list\", formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n                     data_val.error = 'Invalid entry, please select from the list'\n                     data_val.errorTitle = 'Invalid Entry'\n-                    print(f\"Adding dropdown to column {dropdown_col_letter} for field {field_name}\")\n \n-                    # Apply data validation dropdown to the relevant column\n                     for row_num in range(2, sheet.max_row + 1):\n                         data_val.add(f'{dropdown_col_letter}{row_num}')\n-                    sheet.add_data_validation(data_val)\n-                    print(f\"Dropdown applied to column {dropdown_col_letter}.\")\n-        print(\"Dropdown addition complete.\")\n+                   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725009628791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+# from django.shortcuts import render\n+# from rest_framework.response import Response\n+# from rest_framework.views import APIView\n+# from rest_framework import status\n+# from django.http import HttpResponse\n+# import csv\n+# from django.apps import apps\n+# from drf_yasg.utils import swagger_auto_schema\n+# from drf_yasg import openapi\n+\n+# class GetSampleAPIView(APIView):\n+#     \"\"\"\n+#     API view to generate and download sample data in CSV format for different models.\n+#     \"\"\"\n+    \n+#     model_mapping = {\n+#         \"package\": \"destination.Package\",\n+#         \"destination\": \"destination.Destination\",\n+#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n+#         \"review\": \"review.Review\",\n+#         \"collection\": \"collection.Collection\",\n+#         \"departure\": \"departure.Departure\",\n+#         \"destination-book\": \"booking.DestinationBook\",\n+#         \"activity\": \"activities.Activity\",\n+#     }\n+\n+#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+#     @swagger_auto_schema(\n+#         operation_description=\"Get a sample CSV for the specified model type.\",\n+#         manual_parameters=[\n+#             openapi.Parameter(\n+#                 'type',\n+#                 openapi.IN_PATH,\n+#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n+#                 type=openapi.TYPE_STRING,\n+#                 enum=list(model_mapping.keys())\n+#             )\n+#         ],\n+#         responses={200: 'CSV file', 400: 'Unknown type'}\n+#     )\n+#     def get(self, request, type, format=None):\n+#         model_class_path = self.model_mapping.get(type)\n+\n+#         if not model_class_path:\n+#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+#         # Dynamically import the model class\n+#         app_label, model_name = model_class_path.split(\".\")\n+#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+#         # Get all fields of the model, excluding specified fields\n+#         column_list = []\n+#         for field in model_class._meta.get_fields():\n+#             if field.name not in self.excluded_fields:\n+#                 if field.is_relation:\n+#                     if field.many_to_one or field.one_to_one:\n+#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+#                         column_list.append(f\"{field.name}_names\")\n+#                     elif field.many_to_many:\n+#                         # For ManyToManyField, append related objects' names\n+#                         column_list.append(f\"{field.name}_names\")\n+#                 else:\n+#                     column_list.append(field.name)\n+\n+#         queryset = model_class.objects.all()\n+\n+#         response = HttpResponse(content_type='text/csv')\n+#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n+\n+#         writer = csv.writer(response)\n+\n+#         # Write the header row\n+#         writer.writerow(column_list)\n+\n+#         # Write data rows\n+#         for data in queryset:\n+#             data_row = []\n+#             for column in column_list:\n+#                 if column.endswith(\"_id\"):\n+#                     # ForeignKey or OneToOneField relation, get related object's ID\n+#                     related_field_name = column.replace(\"_id\", \"\")\n+#                     related_object = getattr(data, related_field_name)\n+#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+#                 elif column.endswith(\"_names\"):\n+#                     # ManyToManyField relation, get related objects' names\n+#                     related_field_name = column.replace(\"_names\", \"\")\n+#                     related_objects = getattr(data, related_field_name).all()\n+#                     related_names = \", \".join(str(obj) for obj in related_objects)\n+#                     data_row.append(related_names)\n+#                 else:\n+#                     data_row.append(getattr(data, column))\n+#             writer.writerow(data_row)\n+\n+#         return response\n+\n+\n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from openpyxl.utils import get_column_letter\n+from django.apps import apps\n+from django.db import models\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data in ForeignKey fields.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation and (field.many_to_one or field.one_to_one):\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Write data rows with names in columns\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    related_field_name = column\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns and populate the columns with the related model data\n+        self.add_foreign_key_dropdowns(workbook, related_models, sheet)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+        return response\n+\n+    def add_foreign_key_dropdowns(self, workbook, related_models, sheet):\n+        \"\"\"\n+        Add dropdowns in columns corresponding to ForeignKey fields and populate them with related model data.\n+        \"\"\"\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Create a new hidden column to store the dropdown values\n+            validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n+            for i, name in enumerate(related_names, start=2):\n+                sheet[f'{validation_col_letter}{i}'] = name\n+\n+            # Create a DataValidation for dropdown\n+            data_val = DataValidation(\n+                type=\"list\",\n+                formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}',\n+                showDropDown=True\n+            )\n+            data_val.error = 'Invalid entry, please select from the list'\n+            data_val.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the correct column in the main sheet\n+            dropdown_col_letter = get_column_letter(col_num)\n+            for row_num in range(2, sheet.max_row + 1):\n+                data_val.add(f'{dropdown_col_letter}{row_num}')\n+            sheet.add_data_validation(data_val)\n+\n+            # Populate the column with the first related model value\n+            for row_num in range(2, len(related_names) + 2):\n+                sheet[f'{dropdown_col_letter}{row_num}'] = related_names[row_num - 2]\n"
                },
                {
                    "date": 1725009713702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,224 @@\n+# from django.shortcuts import render\n+# from rest_framework.response import Response\n+# from rest_framework.views import APIView\n+# from rest_framework import status\n+# from django.http import HttpResponse\n+# import csv\n+# from django.apps import apps\n+# from drf_yasg.utils import swagger_auto_schema\n+# from drf_yasg import openapi\n+\n+# class GetSampleAPIView(APIView):\n+#     \"\"\"\n+#     API view to generate and download sample data in CSV format for different models.\n+#     \"\"\"\n+    \n+#     model_mapping = {\n+#         \"package\": \"destination.Package\",\n+#         \"destination\": \"destination.Destination\",\n+#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n+#         \"review\": \"review.Review\",\n+#         \"collection\": \"collection.Collection\",\n+#         \"departure\": \"departure.Departure\",\n+#         \"destination-book\": \"booking.DestinationBook\",\n+#         \"activity\": \"activities.Activity\",\n+#     }\n+\n+#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+#     @swagger_auto_schema(\n+#         operation_description=\"Get a sample CSV for the specified model type.\",\n+#         manual_parameters=[\n+#             openapi.Parameter(\n+#                 'type',\n+#                 openapi.IN_PATH,\n+#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n+#                 type=openapi.TYPE_STRING,\n+#                 enum=list(model_mapping.keys())\n+#             )\n+#         ],\n+#         responses={200: 'CSV file', 400: 'Unknown type'}\n+#     )\n+#     def get(self, request, type, format=None):\n+#         model_class_path = self.model_mapping.get(type)\n+\n+#         if not model_class_path:\n+#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+#         # Dynamically import the model class\n+#         app_label, model_name = model_class_path.split(\".\")\n+#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+#         # Get all fields of the model, excluding specified fields\n+#         column_list = []\n+#         for field in model_class._meta.get_fields():\n+#             if field.name not in self.excluded_fields:\n+#                 if field.is_relation:\n+#                     if field.many_to_one or field.one_to_one:\n+#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n+#                         column_list.append(f\"{field.name}_names\")\n+#                     elif field.many_to_many:\n+#                         # For ManyToManyField, append related objects' names\n+#                         column_list.append(f\"{field.name}_names\")\n+#                 else:\n+#                     column_list.append(field.name)\n+\n+#         queryset = model_class.objects.all()\n+\n+#         response = HttpResponse(content_type='text/csv')\n+#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n+\n+#         writer = csv.writer(response)\n+\n+#         # Write the header row\n+#         writer.writerow(column_list)\n+\n+#         # Write data rows\n+#         for data in queryset:\n+#             data_row = []\n+#             for column in column_list:\n+#                 if column.endswith(\"_id\"):\n+#                     # ForeignKey or OneToOneField relation, get related object's ID\n+#                     related_field_name = column.replace(\"_id\", \"\")\n+#                     related_object = getattr(data, related_field_name)\n+#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n+#                 elif column.endswith(\"_names\"):\n+#                     # ManyToManyField relation, get related objects' names\n+#                     related_field_name = column.replace(\"_names\", \"\")\n+#                     related_objects = getattr(data, related_field_name).all()\n+#                     related_names = \", \".join(str(obj) for obj in related_objects)\n+#                     data_row.append(related_names)\n+#                 else:\n+#                     data_row.append(getattr(data, column))\n+#             writer.writerow(data_row)\n+\n+#         return response\n+\n+\n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from openpyxl.utils import get_column_letter\n+from django.apps import apps\n+from django.db import models\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data in ForeignKey fields.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation and (field.many_to_one or field.one_to_one):\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    column_list.append(field.name)\n+                else:\n+                    column_list.append(field.name)\n+\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Write data rows with names in columns\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column in related_models:\n+                    related_field_name = column\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns and populate the columns with the related model data\n+        self.add_foreign_key_dropdowns(workbook, related_models, sheet)\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+        return response\n+\n+    def add_foreign_key_dropdowns(self, workbook, related_models, sheet):\n+        \"\"\"\n+        Add dropdowns in columns corresponding to ForeignKey fields and populate them with related model data.\n+        \"\"\"\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n+            # Fetch all records from the parent model\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Create a new hidden column to store the dropdown values\n+            validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n+            for i, name in enumerate(related_names, start=2):\n+                sheet[f'{validation_col_letter}{i}'] = name\n+\n+            # Create a DataValidation for dropdown\n+            data_val = DataValidation(\n+                type=\"list\",\n+                formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}',\n+                showDropDown=True\n+            )\n+            data_val.error = 'Invalid entry, please select from the list'\n+            data_val.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the correct column in the main sheet\n+            dropdown_col_letter = get_column_letter(col_num)\n+            for row_num in range(2, sheet.max_row + 1):\n+                data_val.add(f'{dropdown_col_letter}{row_num}')\n+            sheet.add_data_validation(data_val)\n+\n+            # Populate the column with the first related model value\n+            for row_num in range(2, len(related_names) + 2):\n+                sheet[f'{dropdown_col_letter}{row_num}'] = related_names[row_num - 2]\n+\n"
                },
                {
                    "date": 1725009812361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,42 +141,58 @@\n         responses={200: 'Excel file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n         model_class_path = self.model_mapping.get(type)\n+        print(f\"Requested type: {type}\")\n+\n         if not model_class_path:\n+            print(\"Unknown type provided.\")\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n+        # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+        print(f\"Model class obtained: {model_class}\")\n \n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n         related_models = {}\n         for field in model_class._meta.get_fields():\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation and (field.many_to_one or field.one_to_one):\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n+                    print(f\"Found related model for field '{field.name}': {related_model}\")\n                     column_list.append(field.name)\n                 else:\n                     column_list.append(field.name)\n+        print(f\"Final column list: {column_list}\")\n \n         workbook = Workbook()\n         sheet = workbook.active\n         sheet.title = model_name\n \n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n+        print(\"Header row written.\")\n \n         # Write data rows with names in columns\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n                 if column in related_models:\n                     related_field_name = column\n                     related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n+                    if isinstance(related_obj, models.Model):\n+                        value = str(related_obj)\n+                    elif isinstance(related_obj, models.Manager):\n+                        related_objs = related_obj.all()\n+                        value = \", \".join([str(obj) for obj in related_objs])\n+                    else:\n+                        value = str(related_obj) if related_obj else None\n                 else:\n                     value = getattr(data, column)\n+                print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n         # Add dropdowns and populate the columns with the related model data\n         self.add_foreign_key_dropdowns(workbook, related_models, sheet)\n@@ -186,242 +202,23 @@\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n \n         # Save the workbook to the response\n         workbook.save(response)\n+        print(f\"Excel workbook saved as {type}.xlsx\")\n         return response\n \n     def add_foreign_key_dropdowns(self, workbook, related_models, sheet):\n         \"\"\"\n         Add dropdowns in columns corresponding to ForeignKey fields and populate them with related model data.\n         \"\"\"\n+        print(\"Adding dropdowns to columns corresponding to ForeignKey fields.\")\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n             # Fetch all records from the parent model\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n \n-            # Create a new hidden column to store the dropdown values\n-            validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n-            for i, name in enumerate(related_names, start=2):\n-                sheet[f'{validation_col_letter}{i}'] = name\n+            print(f\"Populating dropdown for field '{field_name}' with data: {related_names}\")\n \n-            # Create a DataValidation for dropdown\n-            data_val = DataValidation(\n-                type=\"list\",\n-                formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}',\n-                showDropDown=True\n-            )\n-            data_val.error = 'Invalid entry, please select from the list'\n-            data_val.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the correct column in the main sheet\n-            dropdown_col_letter = get_column_letter(col_num)\n-            for row_num in range(2, sheet.max_row + 1):\n-                data_val.add(f'{dropdown_col_letter}{row_num}')\n-            sheet.add_data_validation(data_val)\n-\n-            # Populate the column with the first related model value\n-            for row_num in range(2, len(related_names) + 2):\n-                sheet[f'{dropdown_col_letter}{row_num}'] = related_names[row_num - 2]\n-\n-# from django.shortcuts import render\n-# from rest_framework.response import Response\n-# from rest_framework.views import APIView\n-# from rest_framework import status\n-# from django.http import HttpResponse\n-# import csv\n-# from django.apps import apps\n-# from drf_yasg.utils import swagger_auto_schema\n-# from drf_yasg import openapi\n-\n-# class GetSampleAPIView(APIView):\n-#     \"\"\"\n-#     API view to generate and download sample data in CSV format for different models.\n-#     \"\"\"\n-    \n-#     model_mapping = {\n-#         \"package\": \"destination.Package\",\n-#         \"destination\": \"destination.Destination\",\n-#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n-#         \"review\": \"review.Review\",\n-#         \"collection\": \"collection.Collection\",\n-#         \"departure\": \"departure.Departure\",\n-#         \"destination-book\": \"booking.DestinationBook\",\n-#         \"activity\": \"activities.Activity\",\n-#     }\n-\n-#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-#     @swagger_auto_schema(\n-#         operation_description=\"Get a sample CSV for the specified model type.\",\n-#         manual_parameters=[\n-#             openapi.Parameter(\n-#                 'type',\n-#                 openapi.IN_PATH,\n-#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n-#                 type=openapi.TYPE_STRING,\n-#                 enum=list(model_mapping.keys())\n-#             )\n-#         ],\n-#         responses={200: 'CSV file', 400: 'Unknown type'}\n-#     )\n-#     def get(self, request, type, format=None):\n-#         model_class_path = self.model_mapping.get(type)\n-\n-#         if not model_class_path:\n-#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-#         # Dynamically import the model class\n-#         app_label, model_name = model_class_path.split(\".\")\n-#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-#         # Get all fields of the model, excluding specified fields\n-#         column_list = []\n-#         for field in model_class._meta.get_fields():\n-#             if field.name not in self.excluded_fields:\n-#                 if field.is_relation:\n-#                     if field.many_to_one or field.one_to_one:\n-#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-#                         column_list.append(f\"{field.name}_names\")\n-#                     elif field.many_to_many:\n-#                         # For ManyToManyField, append related objects' names\n-#                         column_list.append(f\"{field.name}_names\")\n-#                 else:\n-#                     column_list.append(field.name)\n-\n-#         queryset = model_class.objects.all()\n-\n-#         response = HttpResponse(content_type='text/csv')\n-#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n-\n-#         writer = csv.writer(response)\n-\n-#         # Write the header row\n-#         writer.writerow(column_list)\n-\n-#         # Write data rows\n-#         for data in queryset:\n-#             data_row = []\n-#             for column in column_list:\n-#                 if column.endswith(\"_id\"):\n-#                     # ForeignKey or OneToOneField relation, get related object's ID\n-#                     related_field_name = column.replace(\"_id\", \"\")\n-#                     related_object = getattr(data, related_field_name)\n-#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-#                 elif column.endswith(\"_names\"):\n-#                     # ManyToManyField relation, get related objects' names\n-#                     related_field_name = column.replace(\"_names\", \"\")\n-#                     related_objects = getattr(data, related_field_name).all()\n-#                     related_names = \", \".join(str(obj) for obj in related_objects)\n-#                     data_row.append(related_names)\n-#                 else:\n-#                     data_row.append(getattr(data, column))\n-#             writer.writerow(data_row)\n-\n-#         return response\n-\n-\n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from openpyxl.utils import get_column_letter\n-from django.apps import apps\n-from django.db import models\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data in ForeignKey fields.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation and (field.many_to_one or field.one_to_one):\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write data rows with names in columns\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    related_field_name = column\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns and populate the columns with the related model data\n-        self.add_foreign_key_dropdowns(workbook, related_models, sheet)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-        return response\n-\n-    def add_foreign_key_dropdowns(self, workbook, related_models, sheet):\n-        \"\"\"\n-        Add dropdowns in columns corresponding to ForeignKey fields and populate them with related model data.\n-        \"\"\"\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n             # Create a new hidden column to store the dropdown values\n             validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n             for i, name in enumerate(related_names, start=2):\n                 sheet[f'{validation_col_letter}{i}'] = name\n@@ -439,220 +236,10 @@\n             dropdown_col_letter = get_column_letter(col_num)\n             for row_num in range(2, sheet.max_row + 1):\n                 data_val.add(f'{dropdown_col_letter}{row_num}')\n             sheet.add_data_validation(data_val)\n+            print(f\"Dropdown applied to column '{dropdown_col_letter}' for field '{field_name}'.\")\n \n             # Populate the column with the first related model value\n             for row_num in range(2, len(related_names) + 2):\n                 sheet[f'{dropdown_col_letter}{row_num}'] = related_names[row_num - 2]\n-# from django.shortcuts import render\n-# from rest_framework.response import Response\n-# from rest_framework.views import APIView\n-# from rest_framework import status\n-# from django.http import HttpResponse\n-# import csv\n-# from django.apps import apps\n-# from drf_yasg.utils import swagger_auto_schema\n-# from drf_yasg import openapi\n-\n-# class GetSampleAPIView(APIView):\n-#     \"\"\"\n-#     API view to generate and download sample data in CSV format for different models.\n-#     \"\"\"\n-    \n-#     model_mapping = {\n-#         \"package\": \"destination.Package\",\n-#         \"destination\": \"destination.Destination\",\n-#         \"gallery-images\": \"destination.DestinationGalleryImages\",\n-#         \"review\": \"review.Review\",\n-#         \"collection\": \"collection.Collection\",\n-#         \"departure\": \"departure.Departure\",\n-#         \"destination-book\": \"booking.DestinationBook\",\n-#         \"activity\": \"activities.Activity\",\n-#     }\n-\n-#     excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-#     @swagger_auto_schema(\n-#         operation_description=\"Get a sample CSV for the specified model type.\",\n-#         manual_parameters=[\n-#             openapi.Parameter(\n-#                 'type',\n-#                 openapi.IN_PATH,\n-#                 description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n-#                 type=openapi.TYPE_STRING,\n-#                 enum=list(model_mapping.keys())\n-#             )\n-#         ],\n-#         responses={200: 'CSV file', 400: 'Unknown type'}\n-#     )\n-#     def get(self, request, type, format=None):\n-#         model_class_path = self.model_mapping.get(type)\n-\n-#         if not model_class_path:\n-#             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-#         # Dynamically import the model class\n-#         app_label, model_name = model_class_path.split(\".\")\n-#         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-#         # Get all fields of the model, excluding specified fields\n-#         column_list = []\n-#         for field in model_class._meta.get_fields():\n-#             if field.name not in self.excluded_fields:\n-#                 if field.is_relation:\n-#                     if field.many_to_one or field.one_to_one:\n-#                         # For ForeignKey or OneToOneField, include the related model's primary key or string representation\n-#                         column_list.append(f\"{field.name}_names\")\n-#                     elif field.many_to_many:\n-#                         # For ManyToManyField, append related objects' names\n-#                         column_list.append(f\"{field.name}_names\")\n-#                 else:\n-#                     column_list.append(field.name)\n-\n-#         queryset = model_class.objects.all()\n-\n-#         response = HttpResponse(content_type='text/csv')\n-#         response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n-\n-#         writer = csv.writer(response)\n-\n-#         # Write the header row\n-#         writer.writerow(column_list)\n-\n-#         # Write data rows\n-#         for data in queryset:\n-#             data_row = []\n-#             for column in column_list:\n-#                 if column.endswith(\"_id\"):\n-#                     # ForeignKey or OneToOneField relation, get related object's ID\n-#                     related_field_name = column.replace(\"_id\", \"\")\n-#                     related_object = getattr(data, related_field_name)\n-#                     data_row.append(getattr(related_object, 'id', None) if related_object else None)\n-#                 elif column.endswith(\"_names\"):\n-#                     # ManyToManyField relation, get related objects' names\n-#                     related_field_name = column.replace(\"_names\", \"\")\n-#                     related_objects = getattr(data, related_field_name).all()\n-#                     related_names = \", \".join(str(obj) for obj in related_objects)\n-#                     data_row.append(related_names)\n-#                 else:\n-#                     data_row.append(getattr(data, column))\n-#             writer.writerow(data_row)\n-\n-#         return response\n-\n-\n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from openpyxl.utils import get_column_letter\n-from django.apps import apps\n-from django.db import models\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Write data rows with names in columns\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    related_field_name = column\n-                    related_obj = getattr(data, related_field_name)\n-                    if isinstance(related_obj, models.Manager):\n-                        related_objs = related_obj.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        value = str(related_obj) if related_obj else None\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        self.add_exact_match_drop_downs(workbook, related_models, sheet)\n-\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        workbook.save(response)\n-        return response\n-\n-    def add_exact_match_drop_downs(self, workbook, related_models, sheet):\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n-            for i, name in enumerate(related_names, start=2):\n-                sheet[f'{validation_col_letter}{i}'] = name\n-\n-            for col_index, cell in enumerate(sheet[1], start=1):\n-                column_title = cell.value\n-                if column_title.lower() == field_name.lower():  \n-                    dropdown_col_letter = get_column_letter(col_index)\n-                    data_val = DataValidation(type=\"list\", formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}', showDropDown=True)\n-                    data_val.error = 'Invalid entry, please select from the list'\n-                    data_val.errorTitle = 'Invalid Entry'\n-\n-                    for row_num in range(2, sheet.max_row + 1):\n-                        data_val.add(f'{dropdown_col_letter}{row_num}')\n\\ No newline at end of file\n-                   \n+        print(\"Finished adding dropdowns.\")\n"
                },
                {
                    "date": 1725009951497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,12 @@\n                     value = getattr(data, column)\n                 print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns and populate the columns with the related model data\n+        # Add a new sheet for related model data\n+        self.add_related_model_data_to_sheet(workbook, related_models)\n+        \n+        # Add dropdowns in the parent sheet using the related model data\n         self.add_foreign_key_dropdowns(workbook, related_models, sheet)\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n@@ -205,29 +208,37 @@\n         workbook.save(response)\n         print(f\"Excel workbook saved as {type}.xlsx\")\n         return response\n \n+    def add_related_model_data_to_sheet(self, workbook, related_models):\n+        \"\"\"\n+        Create a new sheet for each related model and populate it with data.\n+        \"\"\"\n+        print(\"Adding related model data to separate sheets.\")\n+        for field_name, related_model in related_models.items():\n+            related_sheet = workbook.create_sheet(title=f\"{field_name}_data\")\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+            \n+            # Write the data into the new sheet\n+            for i, name in enumerate(related_names, start=1):\n+                related_sheet.cell(row=i, column=1, value=name)\n+            print(f\"Added data for '{field_name}' to sheet '{field_name}_data'.\")\n+\n     def add_foreign_key_dropdowns(self, workbook, related_models, sheet):\n         \"\"\"\n         Add dropdowns in columns corresponding to ForeignKey fields and populate them with related model data.\n         \"\"\"\n         print(\"Adding dropdowns to columns corresponding to ForeignKey fields.\")\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), start=1):\n-            # Fetch all records from the parent model\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n+        for col_num, field_name in enumerate(related_models.keys(), start=1):\n+            related_sheet_name = f\"{field_name}_data\"\n+            related_sheet = workbook[related_sheet_name]\n+            max_row = related_sheet.max_row\n \n-            print(f\"Populating dropdown for field '{field_name}' with data: {related_names}\")\n-\n-            # Create a new hidden column to store the dropdown values\n-            validation_col_letter = get_column_letter(col_num + len(related_models) + 1)\n-            for i, name in enumerate(related_names, start=2):\n-                sheet[f'{validation_col_letter}{i}'] = name\n-\n-            # Create a DataValidation for dropdown\n+            # Create a DataValidation for dropdown using the related model data\n             data_val = DataValidation(\n                 type=\"list\",\n-                formula1=f'=${validation_col_letter}$2:${validation_col_letter}${len(related_names) + 1}',\n+                formula1=f\"='{related_sheet_name}'!$A$1:$A${max_row}\",\n                 showDropDown=True\n             )\n             data_val.error = 'Invalid entry, please select from the list'\n             data_val.errorTitle = 'Invalid Entry'\n@@ -237,9 +248,5 @@\n             for row_num in range(2, sheet.max_row + 1):\n                 data_val.add(f'{dropdown_col_letter}{row_num}')\n             sheet.add_data_validation(data_val)\n             print(f\"Dropdown applied to column '{dropdown_col_letter}' for field '{field_name}'.\")\n-\n-            # Populate the column with the first related model value\n-            for row_num in range(2, len(related_names) + 2):\n-                sheet[f'{dropdown_col_letter}{row_num}'] = related_names[row_num - 2]\n         print(\"Finished adding dropdowns.\")\n"
                },
                {
                    "date": 1725010826147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,159 +94,4 @@\n \n #         return response\n \n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from openpyxl.utils import get_column_letter\n-from django.apps import apps\n-from django.db import models\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data in ForeignKey fields.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-        print(f\"Requested type: {type}\")\n-\n-        if not model_class_path:\n-            print(\"Unknown type provided.\")\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-        print(f\"Model class obtained: {model_class}\")\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation and (field.many_to_one or field.one_to_one):\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    print(f\"Found related model for field '{field.name}': {related_model}\")\n-                    column_list.append(field.name)\n-                else:\n-                    column_list.append(field.name)\n-        print(f\"Final column list: {column_list}\")\n-\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-        print(\"Header row written.\")\n-\n-        # Write data rows with names in columns\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column in related_models:\n-                    related_field_name = column\n-                    related_obj = getattr(data, related_field_name)\n-                    if isinstance(related_obj, models.Model):\n-                        value = str(related_obj)\n-                    elif isinstance(related_obj, models.Manager):\n-                        related_objs = related_obj.all()\n-                        value = \", \".join([str(obj) for obj in related_objs])\n-                    else:\n-                        value = str(related_obj) if related_obj else None\n-                else:\n-                    value = getattr(data, column)\n-                print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add a new sheet for related model data\n-        self.add_related_model_data_to_sheet(workbook, related_models)\n-        \n-        # Add dropdowns in the parent sheet using the related model data\n-        self.add_foreign_key_dropdowns(workbook, related_models, sheet)\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-        print(f\"Excel workbook saved as {type}.xlsx\")\n-        return response\n-\n-    def add_related_model_data_to_sheet(self, workbook, related_models):\n-        \"\"\"\n-        Create a new sheet for each related model and populate it with data.\n-        \"\"\"\n-        print(\"Adding related model data to separate sheets.\")\n-        for field_name, related_model in related_models.items():\n-            related_sheet = workbook.create_sheet(title=f\"{field_name}_data\")\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-            \n-            # Write the data into the new sheet\n-            for i, name in enumerate(related_names, start=1):\n-                related_sheet.cell(row=i, column=1, value=name)\n-            print(f\"Added data for '{field_name}' to sheet '{field_name}_data'.\")\n-\n-    def add_foreign_key_dropdowns(self, workbook, related_models, sheet):\n-        \"\"\"\n-        Add dropdowns in columns corresponding to ForeignKey fields and populate them with related model data.\n-        \"\"\"\n-        print(\"Adding dropdowns to columns corresponding to ForeignKey fields.\")\n-        for col_num, field_name in enumerate(related_models.keys(), start=1):\n-            related_sheet_name = f\"{field_name}_data\"\n-            related_sheet = workbook[related_sheet_name]\n-            max_row = related_sheet.max_row\n-\n-            # Create a DataValidation for dropdown using the related model data\n-            data_val = DataValidation(\n-                type=\"list\",\n-                formula1=f\"='{related_sheet_name}'!$A$1:$A${max_row}\",\n-                showDropDown=True\n-            )\n-            data_val.error = 'Invalid entry, please select from the list'\n-            data_val.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the correct column in the main sheet\n-            dropdown_col_letter = get_column_letter(col_num)\n-            for row_num in range(2, sheet.max_row + 1):\n-                data_val.add(f'{dropdown_col_letter}{row_num}')\n-            sheet.add_data_validation(data_val)\n-            print(f\"Dropdown applied to column '{dropdown_col_letter}' for field '{field_name}'.\")\n-        print(\"Finished adding dropdowns.\")\n"
                },
                {
                    "date": 1725010889996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,4 +94,132 @@\n \n #         return response\n \n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+\n+        if not model_class_path:\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n+                else:\n+                    column_list.append(field.name)\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+\n+        # Fetch related data directly from related models\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n+                else:\n+                    value = getattr(data, column)\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the column in the main sheet\n+            sheet.add_data_validation(dv)\n+            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+\n+        return response\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725010979148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,132 +94,4 @@\n \n #         return response\n \n \n-import pandas as pd\n-from django.http import HttpResponse\n-from openpyxl import Workbook\n-from openpyxl.worksheet.datavalidation import DataValidation\n-from django.apps import apps\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n-from rest_framework import status\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-\n-class GetSampleAPIView(APIView):\n-    \"\"\"\n-    API view to generate and download sample data in Excel format for different models,\n-    including dropdowns for selecting related model data.\n-    \"\"\"\n-    \n-    model_mapping = {\n-        \"package\": \"destination.Package\",\n-        \"destination\": \"destination.Destination\",\n-        \"gallery-images\": \"destination.DestinationGalleryImages\",\n-        \"review\": \"review.Review\",\n-        \"collection\": \"collection.Collection\",\n-        \"departure\": \"departure.Departure\",\n-        \"destination-book\": \"booking.DestinationBook\",\n-        \"activity\": \"activities.Activity\",\n-    }\n-\n-    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n-\n-    @swagger_auto_schema(\n-        operation_description=\"Get a sample Excel file for the specified model type.\",\n-        manual_parameters=[\n-            openapi.Parameter(\n-                'type',\n-                openapi.IN_PATH,\n-                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n-                type=openapi.TYPE_STRING,\n-                enum=list(model_mapping.keys())\n-            )\n-        ],\n-        responses={200: 'Excel file', 400: 'Unknown type'}\n-    )\n-    def get(self, request, type, format=None):\n-        model_class_path = self.model_mapping.get(type)\n-\n-        if not model_class_path:\n-            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        # Dynamically import the model class\n-        app_label, model_name = model_class_path.split(\".\")\n-        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-\n-        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n-        column_list = []\n-        related_models = {}\n-        for field in model_class._meta.get_fields():\n-            if field.name not in self.excluded_fields and \"image\" not in field.name:\n-                if field.is_relation:\n-                    related_model = field.related_model\n-                    related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n-                else:\n-                    column_list.append(field.name)\n-\n-        # Create an Excel workbook\n-        workbook = Workbook()\n-        sheet = workbook.active\n-        sheet.title = model_name\n-\n-        # Write the header row\n-        for col_num, column_title in enumerate(column_list, 1):\n-            sheet.cell(row=1, column=col_num, value=column_title)\n-\n-        # Fetch related data directly from related models\n-        for row_num, data in enumerate(model_class.objects.all(), 2):\n-            for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n-                else:\n-                    value = getattr(data, column)\n-                sheet.cell(row=row_num, column=col_num, value=value)\n-\n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the column in the main sheet\n-            sheet.add_data_validation(dv)\n-            dv.add(f\"{chr(64 + col_num)}2:{chr(64 + col_num)}{len(model_class.objects.all()) + 1}\")\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-\n-        return response\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725011149315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,4 +94,146 @@\n \n #         return response\n \n \n+import pandas as pd\n+from django.http import HttpResponse\n+from openpyxl import Workbook\n+from openpyxl.worksheet.datavalidation import DataValidation\n+from openpyxl.utils import get_column_letter\n+from django.apps import apps\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+\n+class GetSampleAPIView(APIView):\n+    \"\"\"\n+    API view to generate and download sample data in Excel format for different models,\n+    including dropdowns for selecting related model data.\n+    \"\"\"\n+    \n+    model_mapping = {\n+        \"package\": \"destination.Package\",\n+        \"destination\": \"destination.Destination\",\n+        \"gallery-images\": \"destination.DestinationGalleryImages\",\n+        \"review\": \"review.Review\",\n+        \"collection\": \"collection.Collection\",\n+        \"departure\": \"departure.Departure\",\n+        \"destination-book\": \"booking.DestinationBook\",\n+        \"activity\": \"activities.Activity\",\n+    }\n+\n+    excluded_fields = ['id', 'slug', 'public_id', 'created_date', 'updated_date']\n+\n+    @swagger_auto_schema(\n+        operation_description=\"Get a sample Excel file for the specified model type.\",\n+        manual_parameters=[\n+            openapi.Parameter(\n+                'type',\n+                openapi.IN_PATH,\n+                description=\"Specify the type of data to fetch as Excel (e.g., 'package', 'destination').\",\n+                type=openapi.TYPE_STRING,\n+                enum=list(model_mapping.keys())\n+            )\n+        ],\n+        responses={200: 'Excel file', 400: 'Unknown type'}\n+    )\n+    def get(self, request, type, format=None):\n+        model_class_path = self.model_mapping.get(type)\n+        print(f\"Requested type: {type}\")\n+\n+        if not model_class_path:\n+            print(\"Unknown type provided.\")\n+            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        # Dynamically import the model class\n+        app_label, model_name = model_class_path.split(\".\")\n+        model_class = apps.get_model(app_label=app_label, model_name=model_name)\n+        print(f\"Model class obtained: {model_class}\")\n+\n+        # Get all fields of the model, excluding specified fields and fields containing \"image\"\n+        column_list = []\n+        related_models = {}\n+        for field in model_class._meta.get_fields():\n+            if field.name not in self.excluded_fields and \"image\" not in field.name:\n+                if field.is_relation:\n+                    related_model = field.related_model\n+                    related_models[field.name] = related_model\n+                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n+                    if field.many_to_one or field.one_to_one:\n+                        column_list.append(f\"{field.name}_id\")\n+                    elif field.many_to_many:\n+                        column_list.append(f\"{field.name}_ids\")\n+                else:\n+                    column_list.append(field.name)\n+        print(f\"Final column list: {column_list}\")\n+\n+        # Create an Excel workbook\n+        workbook = Workbook()\n+        sheet = workbook.active\n+        sheet.title = model_name\n+        print(f\"Created Excel sheet with title: {sheet.title}\")\n+\n+        # Write the header row\n+        for col_num, column_title in enumerate(column_list, 1):\n+            sheet.cell(row=1, column=col_num, value=column_title)\n+        print(\"Header row written.\")\n+\n+        # Fetch related data directly from related models\n+        for row_num, data in enumerate(model_class.objects.all(), 2):\n+            for col_num, column in enumerate(column_list, 1):\n+                if column.endswith(\"_id\"):\n+                    # ForeignKey or OneToOneField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_id\", \"\")\n+                    related_obj = getattr(data, related_field_name)\n+                    value = str(related_obj) if related_obj else None\n+                elif column.endswith(\"_ids\"):\n+                    # ManyToManyField relation, fetch directly from related model\n+                    related_field_name = column.replace(\"_ids\", \"\")\n+                    related_manager = getattr(data, related_field_name)\n+                    related_objs = related_manager.all()\n+                    value = \", \".join([str(obj) for obj in related_objs])\n+                else:\n+                    value = getattr(data, column)\n+                print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n+                sheet.cell(row=row_num, column=col_num, value=value)\n+\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+            print(f\"Adding dropdown for field '{field_name}' with related names: {related_names}\")\n+\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+                print(f\"Created validation sheet '{validation_sheet_name}' with data: {related_names}\")\n+\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n+\n+            # Apply the dropdown to the column in the main sheet using get_column_letter\n+            col_letter = get_column_letter(col_num)\n+            dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n+            dv.add(dv_range)\n+            sheet.add_data_validation(dv)\n+            print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n+\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n+        workbook.save(response)\n+        print(f\"Workbook saved as {type}.xlsx\")\n+\n+        return response\n"
                },
                {
                    "date": 1725011283124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,42 +198,5 @@\n                     value = getattr(data, column)\n                 print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-            related_objs = related_model.objects.all()\n-            related_names = [str(obj) for obj in related_objs]\n-            print(f\"Adding dropdown for field '{field_name}' with related names: {related_names}\")\n-\n-            # Add related names to a new sheet for data validation\n-            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-            if validation_sheet_name not in workbook.sheetnames:\n-                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-                for i, name in enumerate(related_names, 1):\n-                    validation_sheet.cell(row=i, column=1, value=name)\n-                print(f\"Created validation sheet '{validation_sheet_name}' with data: {related_names}\")\n-\n-            dv = DataValidation(\n-                type=\"list\",\n-                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-                showDropDown=True\n-            )\n-            dv.error = 'Invalid entry, please select from the list'\n-            dv.errorTitle = 'Invalid Entry'\n-\n-            # Apply the dropdown to the column in the main sheet using get_column_letter\n-            col_letter = get_column_letter(col_num)\n-            dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n-            dv.add(dv_range)\n-            sheet.add_data_validation(dv)\n-            print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n-\n-        # Prepare the response\n-        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n-        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n-\n-        # Save the workbook to the response\n-        workbook.save(response)\n-        print(f\"Workbook saved as {type}.xlsx\")\n-\n-        return response\n+        \n"
                },
                {
                    "date": 1725011289277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,5 +198,35 @@\n                     value = getattr(data, column)\n                 print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-        \n+            # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+    for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+        related_objs = related_model.objects.all()\n+        related_names = [str(obj) for obj in related_objs]\n+        print(f\"Adding dropdown for field '{field_name}' with related names: {related_names}\")\n+\n+        # Add related names to a new sheet for data validation\n+        validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+        if validation_sheet_name not in workbook.sheetnames:\n+            validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+            for i, name in enumerate(related_names, 1):\n+                validation_sheet.cell(row=i, column=1, value=name)\n+            print(f\"Created validation sheet '{validation_sheet_name}' with data: {related_names}\")\n+\n+        dv = DataValidation(\n+            type=\"list\",\n+            formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+            showDropDown=True\n+        )\n+        dv.error = 'Invalid entry, please select from the list'\n+        dv.errorTitle = 'Invalid Entry'\n+\n+        # Apply the dropdown to the column in the main sheet using get_column_letter\n+        col_letter = get_column_letter(col_num)\n+        dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n+        dv.add(dv_range)\n+        sheet.add_data_validation(dv)\n+        print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n+\n+    # Save the workbook\n+    workbook.save(response)\n"
                },
                {
                    "date": 1725011298912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,35 +198,35 @@\n                     value = getattr(data, column)\n                 print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n-            # Add dropdowns for ForeignKey and ManyToMany fields using related models\n-    for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n-        related_objs = related_model.objects.all()\n-        related_names = [str(obj) for obj in related_objs]\n-        print(f\"Adding dropdown for field '{field_name}' with related names: {related_names}\")\n+        # Add dropdowns for ForeignKey and ManyToMany fields using related models\n+        for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n+            related_objs = related_model.objects.all()\n+            related_names = [str(obj) for obj in related_objs]\n+            print(f\"Adding dropdown for field '{field_name}' with related names: {related_names}\")\n \n-        # Add related names to a new sheet for data validation\n-        validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n-        if validation_sheet_name not in workbook.sheetnames:\n-            validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n-            for i, name in enumerate(related_names, 1):\n-                validation_sheet.cell(row=i, column=1, value=name)\n-            print(f\"Created validation sheet '{validation_sheet_name}' with data: {related_names}\")\n+            # Add related names to a new sheet for data validation\n+            validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n+            if validation_sheet_name not in workbook.sheetnames:\n+                validation_sheet = workbook.create_sheet(title=validation_sheet_name)\n+                for i, name in enumerate(related_names, 1):\n+                    validation_sheet.cell(row=i, column=1, value=name)\n+                print(f\"Created validation sheet '{validation_sheet_name}' with data: {related_names}\")\n \n-        dv = DataValidation(\n-            type=\"list\",\n-            formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n-            showDropDown=True\n-        )\n-        dv.error = 'Invalid entry, please select from the list'\n-        dv.errorTitle = 'Invalid Entry'\n+            dv = DataValidation(\n+                type=\"list\",\n+                formula1=f'{validation_sheet_name}!$A$1:$A${len(related_names)}',\n+                showDropDown=True\n+            )\n+            dv.error = 'Invalid entry, please select from the list'\n+            dv.errorTitle = 'Invalid Entry'\n \n-        # Apply the dropdown to the column in the main sheet using get_column_letter\n-        col_letter = get_column_letter(col_num)\n-        dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n-        dv.add(dv_range)\n-        sheet.add_data_validation(dv)\n-        print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n+            # Apply the dropdown to the column in the main sheet using get_column_letter\n+            col_letter = get_column_letter(col_num)\n+            dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n+            dv.add(dv_range)\n+            sheet.add_data_validation(dv)\n+            print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n \n-    # Save the workbook\n-    workbook.save(response)\n+        # Save the workbook\n+        workbook.save(response)\n"
                },
                {
                    "date": 1725011411706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,18 +140,15 @@\n         responses={200: 'Excel file', 400: 'Unknown type'}\n     )\n     def get(self, request, type, format=None):\n         model_class_path = self.model_mapping.get(type)\n-        print(f\"Requested type: {type}\")\n \n         if not model_class_path:\n-            print(\"Unknown type provided.\")\n             return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n \n         # Dynamically import the model class\n         app_label, model_name = model_class_path.split(\".\")\n         model_class = apps.get_model(app_label=app_label, model_name=model_name)\n-        print(f\"Model class obtained: {model_class}\")\n \n         # Get all fields of the model, excluding specified fields and fields containing \"image\"\n         column_list = []\n         related_models = {}\n@@ -166,20 +163,17 @@\n                     elif field.many_to_many:\n                         column_list.append(f\"{field.name}_ids\")\n                 else:\n                     column_list.append(field.name)\n-        print(f\"Final column list: {column_list}\")\n \n         # Create an Excel workbook\n         workbook = Workbook()\n         sheet = workbook.active\n         sheet.title = model_name\n-        print(f\"Created Excel sheet with title: {sheet.title}\")\n \n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n-        print(\"Header row written.\")\n \n         # Fetch related data directly from related models\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n@@ -195,9 +189,8 @@\n                     related_objs = related_manager.all()\n                     value = \", \".join([str(obj) for obj in related_objs])\n                 else:\n                     value = getattr(data, column)\n-                print(f\"Writing value '{value}' to row {row_num}, column {col_num}\")\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n         # Add dropdowns for ForeignKey and ManyToMany fields using related models\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n@@ -227,6 +220,12 @@\n             dv.add(dv_range)\n             sheet.add_data_validation(dv)\n             print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n \n-        # Save the workbook\n+        # Prepare the response\n+        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n+        response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n+\n+        # Save the workbook to the response\n         workbook.save(response)\n+\n+        return response\n"
                },
                {
                    "date": 1725012240918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,13 +156,10 @@\n             if field.name not in self.excluded_fields and \"image\" not in field.name:\n                 if field.is_relation:\n                     related_model = field.related_model\n                     related_models[field.name] = related_model\n-                    # Handle ForeignKey and OneToOneField separately from ManyToMany\n-                    if field.many_to_one or field.one_to_one:\n-                        column_list.append(f\"{field.name}_id\")\n-                    elif field.many_to_many:\n-                        column_list.append(f\"{field.name}_ids\")\n+                    # For dropdowns, we use names instead of IDs\n+                    column_list.append(f\"{field.name}\")\n                 else:\n                     column_list.append(field.name)\n \n         # Create an Excel workbook\n@@ -173,22 +170,17 @@\n         # Write the header row\n         for col_num, column_title in enumerate(column_list, 1):\n             sheet.cell(row=1, column=col_num, value=column_title)\n \n-        # Fetch related data directly from related models\n+        # Fetch and write data, ensuring names are used instead of IDs for related fields\n         for row_num, data in enumerate(model_class.objects.all(), 2):\n             for col_num, column in enumerate(column_list, 1):\n-                if column.endswith(\"_id\"):\n-                    # ForeignKey or OneToOneField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_id\", \"\")\n-                    related_obj = getattr(data, related_field_name)\n-                    value = str(related_obj) if related_obj else None\n-                elif column.endswith(\"_ids\"):\n-                    # ManyToManyField relation, fetch directly from related model\n-                    related_field_name = column.replace(\"_ids\", \"\")\n-                    related_manager = getattr(data, related_field_name)\n-                    related_objs = related_manager.all()\n-                    value = \", \".join([str(obj) for obj in related_objs])\n+                if column in related_models:\n+                    related_objs = getattr(data, column)\n+                    if hasattr(related_objs, 'all'):  # ManyToManyField\n+                        value = \", \".join([str(obj) for obj in related_objs.all()])\n+                    else:  # ForeignKey or OneToOneField\n+                        value = str(related_objs) if related_objs else None\n                 else:\n                     value = getattr(data, column)\n                 sheet.cell(row=row_num, column=col_num, value=value)\n \n@@ -213,10 +205,10 @@\n             )\n             dv.error = 'Invalid entry, please select from the list'\n             dv.errorTitle = 'Invalid Entry'\n \n-            # Apply the dropdown to the column in the main sheet using get_column_letter\n-            col_letter = get_column_letter(col_num)\n+            # Apply the dropdown to the correct column in the main sheet using get_column_letter\n+            col_letter = get_column_letter(column_list.index(field_name) + 1)\n             dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n             dv.add(dv_range)\n             sheet.add_data_validation(dv)\n             print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n@@ -228,4 +220,5 @@\n         # Save the workbook to the response\n         workbook.save(response)\n \n         return response\n+\n"
                },
                {
                    "date": 1725012400622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,8 @@\n             col_letter = get_column_letter(column_list.index(field_name) + 1)\n             dv_range = f\"{col_letter}2:{col_letter}{len(model_class.objects.all()) + 1}\"\n             dv.add(dv_range)\n             sheet.add_data_validation(dv)\n-            print(f\"Applied dropdown to range '{dv_range}' for column '{col_letter}'.\")\n \n         # Prepare the response\n         response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')\n         response['Content-Disposition'] = f'attachment; filename=\"{type}.xlsx\"'\n"
                },
                {
                    "date": 1725012405927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,8 @@\n         # Add dropdowns for ForeignKey and ManyToMany fields using related models\n         for col_num, (field_name, related_model) in enumerate(related_models.items(), 1):\n             related_objs = related_model.objects.all()\n             related_names = [str(obj) for obj in related_objs]\n-            print(f\"Adding dropdown for field '{field_name}' with related names: {related_names}\")\n \n             # Add related names to a new sheet for data validation\n             validation_sheet_name = f\"{related_model._meta.model_name}_data\"\n             if validation_sheet_name not in workbook.sheetnames:\n"
                }
            ],
            "date": 1724825655330,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework import status\nfrom django.http import HttpResponse\nimport csv\nfrom destination.models import Package, Destination, DestinationGalleryImages\nfrom review.models import Review\nfrom collection.models import Collection\nfrom departure.models import Departure\nfrom booking.models import DestinationBook\nfrom activities.models import Activity\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\n\nclass GetSampleAPIView(APIView):\n    \"\"\"\n    API view to generate and download sample data in CSV format for different models.\n    \"\"\"\n    \n    model_mapping = {\n        \"package\": Package,\n        \"destination\": Destination,\n        \"gallery-images\": DestinationGalleryImages,\n        \"review\": Review,\n        \"collection\": Collection,\n        \"departure\": Departure,\n        \"destination-book\": DestinationBook,\n        \"activity\": Activity,\n    }\n\n    @swagger_auto_schema(\n        operation_description=\"Get a sample CSV for the specified model type.\",\n        manual_parameters=[\n            openapi.Parameter(\n                'type',\n                openapi.IN_PATH,\n                description=\"Specify the type of data to fetch as CSV (e.g., 'package', 'destination').\",\n                type=openapi.TYPE_STRING,\n                enum=list(model_mapping.keys())\n            )\n        ],\n        responses={200: 'CSV file', 400: 'Unknown type'}\n    )\n    def get(self, request, type, format=None):\n        model_class = self.model_mapping.get(type)\n\n        if not model_class:\n            return Response({\"message\": 'Unknown type'}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Get all fields of the model except 'id'\n        column_list = [field.name for field in model_class._meta.fields if field.name != 'id']\n        queryset = model_class.objects.all()\n\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = f'attachment; filename=\"{type}.csv\"'\n\n        writer = csv.writer(response)\n\n        # Write the header row\n        writer.writerow(column_list)\n\n        # Write data rows\n        for data in queryset:\n            data_lists = [getattr(data, column) for column in column_list]\n            writer.writerow(data_lists)\n\n        return response\n"
        }
    ]
}