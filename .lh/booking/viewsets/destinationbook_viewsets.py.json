{
    "sourceFile": "booking/viewsets/destinationbook_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1724904877577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724904885786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     pagination_class = MyPageNumberPagination\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['user__first_name']\n-    ordering_fields = ['id','user__first_name']\n+    search_fields = ['']\n+    ordering_fields = ['id',]\n \n     filterset_fields = {\n         'id': ['exact'],\n         'country': ['exact', 'icontains'],\n"
                },
                {
                    "date": 1724904894377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['']\n+    search_fields = ['full_name']\n     ordering_fields = ['id',]\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1724904899943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,12 +13,13 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['full_name']\n-    ordering_fields = ['id',]\n+    ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n         'country': ['exact', 'icontains'],\n         'service_type': ['exact', 'icontains'],\n         'arrival_date': ['exact'],\n         \n"
                },
                {
                    "date": 1725166794573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,16 +10,17 @@\n     permission_classes = [bookingPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n+    lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['full_name']\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'full_name': ['exact'],\n         'country': ['exact', 'icontains'],\n         'service_type': ['exact', 'icontains'],\n         'arrival_date': ['exact'],\n         \n"
                },
                {
                    "date": 1725173153888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,11 @@\n             return DestinationBookWriteSerializers\n         elif self.action == 'retrieve':\n             return DestinationBookRetrieveSerializers\n         return super().get_serializer_class()\n+    \n \n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1725173159668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,12 @@\n         elif self.action == 'retrieve':\n             return DestinationBookRetrieveSerializers\n         return super().get_serializer_class()\n     \n+    def get_object(self):\n+        slug = self.kwargs.get('slug')\n+        return get_object_or_404(Destination, slug=slug)\n \n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1725173165996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         return super().get_serializer_class()\n     \n     def get_object(self):\n         slug = self.kwargs.get('slug')\n-        return get_object_or_404(Destination, slug=slug)\n+        return get_object_or_404(Des, slug=slug)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1725173194521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import DestinationBook\n from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n from ..utilities.importbase import *\n+from django.shortcuts import get_object_or_404\n \n class destinationbookViewsets(viewsets.ModelViewSet):\n     serializer_class = DestinationBookListSerializers\n     permission_classes = [bookingPermission]\n@@ -40,9 +41,9 @@\n         return super().get_serializer_class()\n     \n     def get_object(self):\n         slug = self.kwargs.get('slug')\n-        return get_object_or_404(Des, slug=slug)\n+        return get_object_or_404(DestinationBook, slug=slug)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1725789100020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import DestinationBook\n+from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n+from ..utilities.importbase import *\n+from django.shortcuts import get_object_or_404\n+\n+class destinationbookViewsets(viewsets.ModelViewSet):\n+    serializer_class = DestinationBookListSerializers\n+    permission_classes = [bookingPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n+    lookup_field = \"slug\"\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = \n+    ordering_fields = ['id','full_name']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'full_name': ['exact'],\n+        'country': ['exact', 'icontains'],\n+        'service_type': ['exact', 'icontains'],\n+        'arrival_date': ['exact'],\n+        \n+        \n+        \n+        }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return DestinationBookWriteSerializers\n+        elif self.action == 'retrieve':\n+            return DestinationBookRetrieveSerializers\n+        return super().get_serializer_class()\n+    \n+    def get_object(self):\n+        slug = self.kwargs.get('slug')\n+        return get_object_or_404(DestinationBook, slug=slug)\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1725789108484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = \n+    search_fields = []'full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date', )\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n@@ -47,54 +47,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import DestinationBook\n-from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n-from ..utilities.importbase import *\n-from django.shortcuts import get_object_or_404\n-\n-class destinationbookViewsets(viewsets.ModelViewSet):\n-    serializer_class = DestinationBookListSerializers\n-    permission_classes = [bookingPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n-    lookup_field = \"slug\"\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name']\n-    ordering_fields = ['id','full_name']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'full_name': ['exact'],\n-        'country': ['exact', 'icontains'],\n-        'service_type': ['exact', 'icontains'],\n-        'arrival_date': ['exact'],\n-        \n-        \n-        \n-        }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return DestinationBookWriteSerializers\n-        elif self.action == 'retrieve':\n-            return DestinationBookRetrieveSerializers\n-        return super().get_serializer_class()\n-    \n-    def get_object(self):\n-        slug = self.kwargs.get('slug')\n-        return get_object_or_404(DestinationBook, slug=slug)\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n"
                },
                {
                    "date": 1725789115574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = []'full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date', )\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1725789130556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,17 +14,17 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n         'full_name': ['exact'],\n         'country': ['exact', 'icontains'],\n         'service_type': ['exact', 'icontains'],\n-        'arrival_date': ['exact'],\n+        'arrival_date': ['exact','gte'],\n         \n         \n         \n         }\n"
                },
                {
                    "date": 1725789149299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n         'id': ['exact'],\n         'full_name': ['exact'],\n         'country': ['exact', 'icontains'],\n         'service_type': ['exact', 'icontains'],\n-        'arrival_date': ['exact','gte'],\n+        'arrival_date': ['exact','gte','lte'],\n+        'arrival_date': ['exact','gte','lte'],\n         \n         \n         \n         }\n"
                },
                {
                    "date": 1725789162105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n         'full_name': ['exact'],\n         'country': ['exact', 'icontains'],\n         'service_type': ['exact', 'icontains'],\n         'arrival_date': ['exact','gte','lte'],\n-        'arrival_date': ['exact','gte','lte'],\n+        'departure_date': ['exact','gte','lte'],\n+        'departure_date': ['exact','gte','lte'],\n         \n         \n         \n         }\n"
                },
                {
                    "date": 1725789168350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'country': ['exact', 'icontains'],\n         'service_type': ['exact', 'icontains'],\n         'arrival_date': ['exact','gte','lte'],\n         'departure_date': ['exact','gte','lte'],\n-        'departure_date': ['exact','gte','lte'],\n+        'created_date': ['exact','gte','lte'],\n         \n         \n         \n         }\n"
                },
                {
                    "date": 1725789175729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,8 @@\n         'service_type': ['exact', 'icontains'],\n         'arrival_date': ['exact','gte','lte'],\n         'departure_date': ['exact','gte','lte'],\n         'created_date': ['exact','gte','lte'],\n-        \n-        \n-        \n         }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1725791252473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,21 @@\n     \n     def get_object(self):\n         slug = self.kwargs.get('slug')\n         return get_object_or_404(DestinationBook, slug=slug)\n+    \n+     from rest_framework.response import Response\n+    from rest_framework import status\n \n+    def destroy(self, request, *args, **kwargs):\n+        instance = self.get_object()\n+        self.perform_destroy(instance)\n+        \n+        return Response(\n+            {\"detail\": \"Item/s successfully deleted.\"}, \n+            status=status.HTTP_200_OK\n+        )\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1725791262074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,10 @@\n     def get_object(self):\n         slug = self.kwargs.get('slug')\n         return get_object_or_404(DestinationBook, slug=slug)\n     \n-     from rest_framework.response import Response\n-    from rest_framework import status\n \n+\n     def destroy(self, request, *args, **kwargs):\n         instance = self.get_object()\n         self.perform_destroy(instance)\n         \n"
                },
                {
                    "date": 1725791268889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import DestinationBook\n+from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n+from ..utilities.importbase import *\n+from django.shortcuts import get_object_or_404\n+\n+\n+class destinationbookViewsets(viewsets.ModelViewSet):\n+    serializer_class = DestinationBookListSerializers\n+    permission_classes = [bookingPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n+    lookup_field = \"slug\"\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n+    ordering_fields = ['id','full_name']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'full_name': ['exact'],\n+        'country': ['exact', 'icontains'],\n+        'service_type': ['exact', 'icontains'],\n+        'arrival_date': ['exact','gte','lte'],\n+        'departure_date': ['exact','gte','lte'],\n+        'created_date': ['exact','gte','lte'],\n+        }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return DestinationBookWriteSerializers\n+        elif self.action == 'retrieve':\n+            return DestinationBookRetrieveSerializers\n+        return super().get_serializer_class()\n+    \n+    def get_object(self):\n+        slug = self.kwargs.get('slug')\n+        return get_object_or_404(DestinationBook, slug=slug)\n+    \n+\n+\n+    def destroy(self, request, *args, **kwargs):\n+        instance = self.get_object()\n+        self.perform_destroy(instance)\n+        \n+        return Response(\n+            {\"detail\": \"Item/s successfully deleted.\"}, \n+            status=status.HTTP_200_OK\n+        )\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1725791275439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,8 @@\n from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n from ..utilities.importbase import *\n from django.shortcuts import get_object_or_404\n \n-\n class destinationbookViewsets(viewsets.ModelViewSet):\n     serializer_class = DestinationBookListSerializers\n     permission_classes = [bookingPermission]\n     authentication_classes = [JWTAuthentication]\n@@ -43,10 +42,11 @@\n     def get_object(self):\n         slug = self.kwargs.get('slug')\n         return get_object_or_404(DestinationBook, slug=slug)\n     \n+from rest_framework.response import Response\n+    from rest_framework import status\n \n-\n     def destroy(self, request, *args, **kwargs):\n         instance = self.get_object()\n         self.perform_destroy(instance)\n         \n@@ -58,64 +58,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import DestinationBook\n-from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n-from ..utilities.importbase import *\n-from django.shortcuts import get_object_or_404\n-\n-class destinationbookViewsets(viewsets.ModelViewSet):\n-    serializer_class = DestinationBookListSerializers\n-    permission_classes = [bookingPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n-    lookup_field = \"slug\"\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n-    ordering_fields = ['id','full_name']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'full_name': ['exact'],\n-        'country': ['exact', 'icontains'],\n-        'service_type': ['exact', 'icontains'],\n-        'arrival_date': ['exact','gte','lte'],\n-        'departure_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return DestinationBookWriteSerializers\n-        elif self.action == 'retrieve':\n-            return DestinationBookRetrieveSerializers\n-        return super().get_serializer_class()\n-    \n-    def get_object(self):\n-        slug = self.kwargs.get('slug')\n-        return get_object_or_404(DestinationBook, slug=slug)\n-    \n-\n-\n-    def destroy(self, request, *args, **kwargs):\n-        instance = self.get_object()\n-        self.perform_destroy(instance)\n-        \n-        return Response(\n-            {\"detail\": \"Item/s successfully deleted.\"}, \n-            status=status.HTTP_200_OK\n-        )\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n"
                },
                {
                    "date": 1725791285730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,11 +42,10 @@\n     def get_object(self):\n         slug = self.kwargs.get('slug')\n         return get_object_or_404(DestinationBook, slug=slug)\n     \n-from rest_framework.response import Response\n-    from rest_framework import status\n \n+\n     def destroy(self, request, *args, **kwargs):\n         instance = self.get_object()\n         self.perform_destroy(instance)\n         \n"
                },
                {
                    "date": 1725856097320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n from ..models import DestinationBook\n from ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\n from ..utilities.importbase import *\n from django.shortcuts import get_object_or_404\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class destinationbookViewsets(viewsets.ModelViewSet):\n     serializer_class = DestinationBookListSerializers\n     permission_classes = [bookingPermission]\n@@ -14,9 +16,9 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package__', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1725856125751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package__', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package__name', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1725856137522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package__name', 'arrival_date', 'departure_date', 'service_type', 'destination', 'customize_trip', 'created_date', 'updated_date',]\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package__name', 'arrival_date', 'departure_date', 'service_type', 'destination__destination', 'customize_trip', 'created_date', 'updated_date',]\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1725856156610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity', 'package__name', 'arrival_date', 'departure_date', 'service_type', 'destination__destination', 'customize_trip', 'created_date', 'updated_date',]\n+    search_fields = ['full_name', 'email', 'phone_number', 'country', 'airlines', 'number_of_travelers', 'activity__name', 'package__name', 'arrival_date', 'departure_date', 'service_type', 'destination__destination_title', 'customize_trip', 'created_date', 'updated_date',]\n     ordering_fields = ['id','full_name']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                }
            ],
            "date": 1724904877577,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import DestinationBook\nfrom ..serializers.destinationbook_serializers import DestinationBookListSerializers, DestinationBookRetrieveSerializers, DestinationBookWriteSerializers\nfrom ..utilities.importbase import *\n\nclass destinationbookViewsets(viewsets.ModelViewSet):\n    serializer_class = DestinationBookListSerializers\n    permission_classes = [bookingPermission]\n    authentication_classes = [JWTAuthentication]\n    pagination_class = MyPageNumberPagination\n    queryset = DestinationBook.objects.all().order_by(\"-created_date\")\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['user__first_name']\n    ordering_fields = ['id','user__first_name']\n\n    filterset_fields = {\n        'id': ['exact'],\n        'country': ['exact', 'icontains'],\n        'service_type': ['exact', 'icontains'],\n        'arrival_date': ['exact'],\n        \n        \n        \n        }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return DestinationBookWriteSerializers\n        elif self.action == 'retrieve':\n            return DestinationBookRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}