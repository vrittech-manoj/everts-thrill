{
    "sourceFile": "company/viewsets/privacypolicy_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1725441044672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1725441044672,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import PrivacyPolicy\nfrom ..serializers.privacypolicy_serializers import PrivacyPolicyListSerializers, PrivacyPolicyRetrieveSerializers, PrivacyPolicyWriteSerializers\nfrom ..utilities.importbase import *\n\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass privacypolicyViewsets(viewsets.ModelViewSet):\n    serializer_class = PrivacyPolicyListSerializers\n    permission_classes = [companyPermission]\n    pagination_class = MyPageNumberPagination\n    queryset = PrivacyPolicy.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return PrivacyPolicyWriteSerializers\n        elif self.action == 'retrieve':\n            return PrivacyPolicyRetrieveSerializers\n        return super().get_serializer_class()\n\n    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-privacy-policy\")\n    def action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n        \n        privacy_policy = PrivacyPolicy.objects.all()\n        \n        if privacy_policy.exists():\n            # Update the existing privacy policy\n            privacy_policy = privacy_policy.first()\n            privacy_policy.description = description\n            privacy_policy.save()\n            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new privacy policy\n            new_policy = PrivacyPolicy.objects.create(description=description)\n            return Response({\"message\": \"Privacy policy created successfully.\", \"policy_id\": new_policy.id}, status=status.HTTP_201_CREATED)\n        \n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-privacy-policy\")\n    def retrieve_update_policy(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one privacy policy, get the first one.\n            privacy_policy = PrivacyPolicy.objects.first()\n            \n            if not privacy_policy:\n                return Response({\"data\": None}, status=status.HTTP_200_OK)\n        \n        except PrivacyPolicy.DoesNotExist:\n            return Response({\"error\": \"Privacy policy not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the privacy policy\n            serializer = PrivacyPolicyRetrieveSerializers(privacy_policy)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the privacy policy\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            privacy_policy.description = description\n            privacy_policy.save()\n            return Response({\"message\": \"Privacy policy updated successfully.\"}, status=status.HTTP_200_OK)\n"
        }
    ]
}