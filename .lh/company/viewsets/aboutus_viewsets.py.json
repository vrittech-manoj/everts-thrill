{
    "sourceFile": "company/viewsets/aboutus_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1725971928209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725971940473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import AboutUs\n from ..serializers.aboutus_serializers import AboutUsListSerializers, AboutUsRetrieveSerializers, AboutUsWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class aboutusViewsets(viewsets.ModelViewSet):\n     serializer_class = AboutUsListSerializers\n     # permission_classes = [companyPermission]\n"
                }
            ],
            "date": 1725971928209,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import AboutUs\nfrom ..serializers.aboutus_serializers import AboutUsListSerializers, AboutUsRetrieveSerializers, AboutUsWriteSerializers\nfrom ..utilities.importbase import *\n\nclass aboutusViewsets(viewsets.ModelViewSet):\n    serializer_class = AboutUsListSerializers\n    # permission_classes = [companyPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = AboutUs.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return AboutUsWriteSerializers\n        elif self.action == 'retrieve':\n            return AboutUsRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n    \n    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-about-us\")\n    def create_update_about_us(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n\n        if not description:\n            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        about_us = AboutUs.objects.all()\n\n        if about_us.exists():\n            # Update the existing AboutUs entry\n            about_us = about_us.first()\n            about_us.description = description\n            about_us.save()\n            return Response({\"message\": \"About Us section updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new AboutUs entry\n            new_about_us = AboutUs.objects.create(description=description)\n            return Response({\"message\": \"About Us section created successfully.\", \"about_us_id\": new_about_us.id}, status=status.HTTP_201_CREATED)\n\n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-about-us\")\n    def retrieve_update_about_us(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one AboutUs entry, get the first one.\n            about_us = AboutUs.objects.first()\n\n            if not about_us:\n                return Response({\"data\": None}, status=status.HTTP_200_OK)\n\n        except AboutUs.DoesNotExist:\n            return Response({\"error\": \"About Us section not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the About Us entry\n            serializer = AboutUsRetrieveSerializers(about_us)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n\n        elif request.method == 'PUT':\n            description = request.data.get('description', None)\n\n            if not description:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n\n            about_us.description = description\n            about_us.save()\n            return Response({\"message\": \"About Us section updated successfully.\"}, status=status.HTTP_200_OK)\n\n\n"
        }
    ]
}