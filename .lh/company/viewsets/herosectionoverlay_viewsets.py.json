{
    "sourceFile": "company/viewsets/herosectionoverlay_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1725944086489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725944100930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = HeroSectionOverlay.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','']\n+    search_fields = ['id','overlay_text']\n     ordering_fields = ['id']\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1725944106790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = HeroSectionOverlay.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','overlay_text']\n+    search_fields = ['id','overlay_textoverlay_text']\n     ordering_fields = ['id']\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1725944114337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = HeroSectionOverlay.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','overlay_textoverlay_text']\n-    ordering_fields = ['id']\n+    search_fields = ['id','overlay_text']\n+    ordering_fields = ['id','overlay_text']\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1725944119822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,12 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','overlay_text']\n     ordering_fields = ['id','overlay_text']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         #return queryset.filter(user_id=self.request.user.id)\n"
                },
                {
                    "date": 1725944130156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,18 +8,18 @@\n class herosectionoverlayViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionOverlayListSerializers\n     # permission_classes = [companyPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = HeroSectionOverlay.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','overlay_text']\n     ordering_fields = ['id','overlay_text']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'overlay_text': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1725944153082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n \n class herosectionoverlayViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionOverlayListSerializers\n-    # permission_classes = [companyPermission]\n+    permission_classes = [companyPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = HeroSectionOverlay.objects.all()\n \n"
                },
                {
                    "date": 1725944162002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n \n class herosectionoverlayViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionOverlayListSerializers\n     permission_classes = [companyPermission]\n-    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = HeroSectionOverlay.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n@@ -22,9 +21,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return HeroSectionOverlayWriteSerializers\n"
                },
                {
                    "date": 1725958952852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,10 @@\n             return HeroSectionOverlayWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n+    \n+    \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1725958969638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionOverlay\n from ..serializers.herosectionoverlay_serializers import HeroSectionOverlayListSerializers, HeroSectionOverlayRetrieveSerializers, HeroSectionOverlayWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework.decorators import action\n \n class herosectionoverlayViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionOverlayListSerializers\n     permission_classes = [companyPermission]\n@@ -30,10 +33,24 @@\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    \n+    @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n+    def create_hero_section_overlay(self, request, *args, **kwargs):\n+        serializer = HeroSectionOverlaySerializer(data=request.data)\n+        \n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+    @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n+    def list_hero_section_overlays(self, request, *args, **kwargs):\n+        overlays = HeroSectionOverlay.objects.all()\n+        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1725959010970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n+        serializer = HeroSectionOverlayRetrieveSerializers(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1725959024682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         return super().get_serializer_class()\n     \n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlaySerializer(data=request.data)\n+        serializer = HeroSectionOverlayWriteSerializers(data=request.data)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1725959255974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,16 @@\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import HeroSectionOverlay\n-from ..serializers.herosectionoverlay_serializers import HeroSectionOverlayListSerializers, HeroSectionOverlayRetrieveSerializers, HeroSectionOverlayWriteSerializers\n-from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n from rest_framework.decorators import action\n+from rest_framework.viewsets import ViewSet\n+from .models import HeroSectionOverlay\n+from .serializers import HeroSectionOverlaySerializer\n \n-class herosectionoverlayViewsets(viewsets.ModelViewSet):\n-    serializer_class = HeroSectionOverlayListSerializers\n-    permission_classes = [companyPermission]\n-    pagination_class = MyPageNumberPagination\n-    queryset = HeroSectionOverlay.objects.all()\n+class HeroSectionOverlayViewSet(ViewSet):\n \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','overlay_text']\n-    ordering_fields = ['id','overlay_text']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'overlay_text': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return HeroSectionOverlayWriteSerializers\n-        elif self.action == 'retrieve':\n-            return HeroSectionOverlayRetrieveSerializers\n-        return super().get_serializer_class()\n-    \n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlayWriteSerializers(data=request.data)\n+        serializer = HeroSectionOverlaySerializer(data=request.data)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n@@ -46,11 +19,25 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlayRetrieveSerializers(overlays, many=True)\n+        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n+    @action(detail=False, methods=['put'], name=\"update-hero-section-overlay\", url_path=\"update-hero-section-overlay\")\n+    def update_hero_section_overlay(self, request, *args, **kwargs):\n+        overlay_id = request.data.get('id', None)\n+        if not overlay_id:\n+            return Response({\"error\": \"ID is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n \n+        try:\n+            overlay = HeroSectionOverlay.objects.get(id=overlay_id)\n+        except HeroSectionOverlay.DoesNotExist:\n+            return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+        serializer = HeroSectionOverlaySerializer(overlay, data=request.data, partial=True)\n+        \n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1725959263174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,43 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import HeroSectionOverlay\n+from ..serializers.herosectionoverlay_serializers import HeroSectionOverlayListSerializers, HeroSectionOverlayRetrieveSerializers, HeroSectionOverlayWriteSerializers\n+from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n from rest_framework.decorators import action\n-from rest_framework.viewsets import ViewSet\n-from .models import HeroSectionOverlay\n-from .serializers import HeroSectionOverlaySerializer\n \n-class HeroSectionOverlayViewSet(ViewSet):\n+class herosectionoverlayViewsets(viewsets.ModelViewSet):\n+    serializer_class = HeroSectionOverlayListSerializers\n+    permission_classes = [companyPermission]\n+    pagination_class = MyPageNumberPagination\n+    queryset = HeroSectionOverlay.objects.all()\n \n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','overlay_text']\n+    ordering_fields = ['id','overlay_text']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'overlay_text': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return HeroSectionOverlayWriteSerializers\n+        elif self.action == 'retrieve':\n+            return HeroSectionOverlayRetrieveSerializers\n+        return super().get_serializer_class()\n+    \n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlaySerializer(data=request.data)\n+        serializer = HeroSectionOverlayWriteSerializers(data=request.data)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n@@ -19,25 +46,11 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n+        serializer = HeroSectionOverlayRetrieveSerializers(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n-    @action(detail=False, methods=['put'], name=\"update-hero-section-overlay\", url_path=\"update-hero-section-overlay\")\n-    def update_hero_section_overlay(self, request, *args, **kwargs):\n-        overlay_id = request.data.get('id', None)\n-        if not overlay_id:\n-            return Response({\"error\": \"ID is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n \n-        try:\n-            overlay = HeroSectionOverlay.objects.get(id=overlay_id)\n-        except HeroSectionOverlay.DoesNotExist:\n-            return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-        serializer = HeroSectionOverlaySerializer(overlay, data=request.data, partial=True)\n-        \n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1725959269743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,20 @@\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n     \n+   from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework.decorators import action\n+from rest_framework.viewsets import ViewSet\n+from .models import HeroSectionOverlay\n+from .serializers import HeroSectionOverlaySerializer\n+\n+class HeroSectionOverlayViewSet(ViewSet):\n+\n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlayWriteSerializers(data=request.data)\n+        serializer = HeroSectionOverlaySerializer(data=request.data)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n@@ -46,11 +55,26 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlayRetrieveSerializers(overlays, many=True)\n+        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n+    @action(detail=False, methods=['put'], name=\"update-hero-section-overlay\", url_path=\"update-hero-section-overlay\")\n+    def update_hero_section_overlay(self, request, *args, **kwargs):\n+        overlay_id = request.data.get('id', None)\n+        if not overlay_id:\n+            return Response({\"error\": \"ID is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n \n+        try:\n+            overlay = HeroSectionOverlay.objects.get(id=overlay_id)\n+        except HeroSectionOverlay.DoesNotExist:\n+            return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+        serializer = HeroSectionOverlaySerializer(overlay, data=request.data, partial=True)\n+        \n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n"
                },
                {
                    "date": 1725959279185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,9 @@\n             return HeroSectionOverlayWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n-    \n-   from rest_framework.response import Response\n+    from rest_framework.response import Response\n from rest_framework import status\n from rest_framework.decorators import action\n from rest_framework.viewsets import ViewSet\n from .models import HeroSectionOverlay\n"
                },
                {
                    "date": 1725959290743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,9 @@\n             return HeroSectionOverlayWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n-    from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework.decorators import action\n-from rest_framework.viewsets import ViewSet\n-from .models import HeroSectionOverlay\n-from .serializers import HeroSectionOverlaySerializer\n+    \n \n class HeroSectionOverlayViewSet(ViewSet):\n \n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n"
                },
                {
                    "date": 1725959330443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,17 @@\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n     \n+from rest_framework.response import Response\n+from rest_framework import status\n+from rest_framework.decorators import action\n+from rest_framework.viewsets import ViewSet\n+from .models import HeroSectionOverlay\n+from .serializers import HeroSectionOverlaySerializer\n \n-class HeroSectionOverlayViewSet(ViewSet):\n \n+\n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n         serializer = HeroSectionOverlaySerializer(data=request.data)\n         \n"
                },
                {
                    "date": 1725959336686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,18 +32,12 @@\n             return HeroSectionOverlayWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n-    \n-from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework.decorators import action\n-from rest_framework.viewsets import ViewSet\n-from .models import HeroSectionOverlay\n-from .serializers import HeroSectionOverlaySerializer\n \n \n \n+\n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n         serializer = HeroSectionOverlaySerializer(data=request.data)\n         \n"
                },
                {
                    "date": 1725959347301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlaySerializer(data=request.data)\n+        serializer = HeroSectionOverlayWriteSerializers(data=request.data)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1725959356358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n+        serializer = HeroSectionOverlayRetrieveSerializers(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n     @action(detail=False, methods=['put'], name=\"update-hero-section-overlay\", url_path=\"update-hero-section-overlay\")\n     def update_hero_section_overlay(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1725959364412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlayRetrieveSerializers(overlays, many=True)\n+        serializer = HeroSectionOverlayListSerializers(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n     @action(detail=False, methods=['put'], name=\"update-hero-section-overlay\", url_path=\"update-hero-section-overlay\")\n     def update_hero_section_overlay(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1725959373822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n             overlay = HeroSectionOverlay.objects.get(id=overlay_id)\n         except HeroSectionOverlay.DoesNotExist:\n             return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-        serializer = HeroSectionOverlaySerializer(overlay, data=request.data, partial=True)\n+        serializer = HeroSectionOverlayRetrieveSerializers(overlay, data=request.data, partial=True)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1725959381305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n             overlay = HeroSectionOverlay.objects.get(id=overlay_id)\n         except HeroSectionOverlay.DoesNotExist:\n             return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-        serializer = HeroSectionOverlayRetrieveSerializers(overlay, data=request.data, partial=True)\n+        serializer = HeroSectionOverlaySerializer(overlay, data=request.data, partial=True)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1725959412606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,8 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionOverlay\n from ..serializers.herosectionoverlay_serializers import HeroSectionOverlayListSerializers, HeroSectionOverlayRetrieveSerializers, HeroSectionOverlayWriteSerializers\n from ..utilities.importbase import *\n-from rest_framework.response import Response\n-from rest_framework import status\n-from rest_framework.decorators import action\n \n class herosectionoverlayViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionOverlayListSerializers\n     permission_classes = [companyPermission]\n@@ -32,15 +29,12 @@\n             return HeroSectionOverlayWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n-\n-\n-\n-\n+    \n     @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n     def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlayWriteSerializers(data=request.data)\n+        serializer = HeroSectionOverlaySerializer(data=request.data)\n         \n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n@@ -49,26 +43,11 @@\n \n     @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n     def list_hero_section_overlays(self, request, *args, **kwargs):\n         overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlayListSerializers(overlays, many=True)\n+        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n         return Response(serializer.data, status=status.HTTP_200_OK)\n \n-    @action(detail=False, methods=['put'], name=\"update-hero-section-overlay\", url_path=\"update-hero-section-overlay\")\n-    def update_hero_section_overlay(self, request, *args, **kwargs):\n-        overlay_id = request.data.get('id', None)\n-        if not overlay_id:\n-            return Response({\"error\": \"ID is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n \n-        try:\n-            overlay = HeroSectionOverlay.objects.get(id=overlay_id)\n-        except HeroSectionOverlay.DoesNotExist:\n-            return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-        serializer = HeroSectionOverlaySerializer(overlay, data=request.data, partial=True)\n-        \n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n"
                },
                {
                    "date": 1725959476590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,24 +30,5 @@\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    @action(detail=False, methods=['post'], name=\"create-hero-section-overlay\", url_path=\"create-hero-section-overlay\")\n-    def create_hero_section_overlay(self, request, *args, **kwargs):\n-        serializer = HeroSectionOverlaySerializer(data=request.data)\n-        \n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response({\"message\": \"Hero section overlay created successfully.\"}, status=status.HTTP_201_CREATED)\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-    @action(detail=False, methods=['get'], name=\"list-hero-section-overlays\", url_path=\"list-hero-section-overlays\")\n-    def list_hero_section_overlays(self, request, *args, **kwargs):\n-        overlays = HeroSectionOverlay.objects.all()\n-        serializer = HeroSectionOverlaySerializer(overlays, many=True)\n-        return Response(serializer.data, status=status.HTTP_200_OK)\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n+   \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725959527047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,5 +30,24 @@\n         elif self.action == 'retrieve':\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n     \n+    \n+    from rest_framework import serializers\n+from ..models import HeroSectionOverlay\n+\n+class HeroSectionOverlayListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionOverlay\n+        fields = '__all__'\n+\n+class HeroSectionOverlayRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionOverlay\n+        fields = '__all__'\n+\n+class HeroSectionOverlayWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionOverlay\n+        fields = '__all__'\n+    \n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725959543487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,23 +31,75 @@\n             return HeroSectionOverlayRetrieveSerializers\n         return super().get_serializer_class()\n     \n     \n-    from rest_framework import serializers\n-from ..models import HeroSectionOverlay\n+    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-hero-section-overlay\")\n+    def create_update_hero_section_overlay(self, request, *args, **kwargs):\n+        overlay_text = request.data.get('overlay_text', None)\n+        button_text = request.data.get('button_text', None)\n+        button_link = request.data.get('button_link', None)\n+        is_button = request.data.get('is_button', False)\n+        is_overlay_text = request.data.get('is_overlay_text', False)\n \n-class HeroSectionOverlayListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionOverlay\n-        fields = '__all__'\n+        if overlay_text is None and is_overlay_text:\n+            return Response({\"error\": \"Overlay text is required when is_overlay_text is True.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        hero_section_overlay = HeroSectionOverlay.objects.all()\n \n-class HeroSectionOverlayRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionOverlay\n-        fields = '__all__'\n+        if hero_section_overlay.exists():\n+            # Update the existing hero section overlay\n+            hero_section_overlay = hero_section_overlay.first()\n+            hero_section_overlay.overlay_text = overlay_text\n+            hero_section_overlay.button_text = button_text\n+            hero_section_overlay.button_link = button_link\n+            hero_section_overlay.is_button = is_button\n+            hero_section_overlay.is_overlay_text = is_overlay_text\n+            hero_section_overlay.save()\n+            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n+        else:\n+            # Create a new hero section overlay\n+            new_overlay = HeroSectionOverlay.objects.create(\n+                overlay_text=overlay_text,\n+                button_text=button_text,\n+                button_link=button_link,\n+                is_button=is_button,\n+                is_overlay_text=is_overlay_text\n+            )\n+            return Response({\"message\": \"Hero section overlay created successfully.\", \"overlay_id\": new_overlay.id}, status=status.HTTP_201_CREATED)\n \n-class HeroSectionOverlayWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionOverlay\n-        fields = '__all__'\n+    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-hero-section-overlay\")\n+    def retrieve_update_hero_section_overlay(self, request, *args, **kwargs):\n+        try:\n+            # Assuming there's only one hero section overlay, get the first one.\n+            hero_section_overlay = HeroSectionOverlay.objects.first()\n+\n+            if not hero_section_overlay:\n+                return Response({\"data\": None}, status=status.HTTP_200_OK)\n+\n+        except HeroSectionOverlay.DoesNotExist:\n+            return Response({\"error\": \"Hero section overlay not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+        if request.method == 'GET':\n+            # Retrieve the hero section overlay\n+            serializer = HeroSectionOverlayRetrieveSerializers(hero_section_overlay)\n+            return Response(serializer.data, status=status.HTTP_200_OK)\n+\n+        elif request.method == 'PUT':\n+            # Update the hero section overlay\n+            overlay_text = request.data.get('overlay_text', None)\n+            button_text = request.data.get('button_text', None)\n+            button_link = request.data.get('button_link', None)\n+            is_button = request.data.get('is_button', False)\n+            is_overlay_text = request.data.get('is_overlay_text', False)\n+\n+            if overlay_text is None and is_overlay_text:\n+                return Response({\"error\": \"Overlay text is required when is_overlay_text is True.\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+            hero_section_overlay.overlay_text = overlay_text\n+            hero_section_overlay.button_text = button_text\n+            hero_section_overlay.button_link = button_link\n+            hero_section_overlay.is_button = is_button\n+            hero_section_overlay.is_overlay_text = is_overlay_text\n+            hero_section_overlay.save()\n+            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n     \n    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725959560238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n from rest_framework import viewsets\n+from rest_framework import status\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionOverlay\n from ..serializers.herosectionoverlay_serializers import HeroSectionOverlayListSerializers, HeroSectionOverlayRetrieveSerializers, HeroSectionOverlayWriteSerializers\n"
                },
                {
                    "date": 1725959751188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,12 @@\n     def create_update_hero_section_overlay(self, request, *args, **kwargs):\n         overlay_text = request.data.get('overlay_text', None)\n         button_text = request.data.get('button_text', None)\n         button_link = request.data.get('button_link', None)\n-        is_button = request.data.get('is_button', False)\n-        is_overlay_text = request.data.get('is_overlay_text', False)\n+        \n+        # Convert string boolean values to Python booleans\n+        is_button = request.data.get('is_button', 'false').lower() == 'true'\n+        is_overlay_text = request.data.get('is_overlay_text', 'false').lower() == 'true'\n \n         if overlay_text is None and is_overlay_text:\n             return Response({\"error\": \"Overlay text is required when is_overlay_text is True.\"}, status=status.HTTP_400_BAD_REQUEST)\n         \n@@ -90,10 +92,12 @@\n             # Update the hero section overlay\n             overlay_text = request.data.get('overlay_text', None)\n             button_text = request.data.get('button_text', None)\n             button_link = request.data.get('button_link', None)\n-            is_button = request.data.get('is_button', False)\n-            is_overlay_text = request.data.get('is_overlay_text', False)\n+            \n+            # Convert string boolean values to Python booleans\n+            is_button = request.data.get('is_button', 'false').lower() == 'true'\n+            is_overlay_text = request.data.get('is_overlay_text', 'false').lower() == 'true'\n \n             if overlay_text is None and is_overlay_text:\n                 return Response({\"error\": \"Overlay text is required when is_overlay_text is True.\"}, status=status.HTTP_400_BAD_REQUEST)\n \n@@ -102,7 +106,5 @@\n             hero_section_overlay.button_link = button_link\n             hero_section_overlay.is_button = is_button\n             hero_section_overlay.is_overlay_text = is_overlay_text\n             hero_section_overlay.save()\n-            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n-    \n-   \n\\ No newline at end of file\n+            return Response({\"message\": \"Hero section overlay updated successfully.\"}, status=status.HTTP_200_OK)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1725944086489,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import HeroSectionOverlay\nfrom ..serializers.herosectionoverlay_serializers import HeroSectionOverlayListSerializers, HeroSectionOverlayRetrieveSerializers, HeroSectionOverlayWriteSerializers\nfrom ..utilities.importbase import *\n\nclass herosectionoverlayViewsets(viewsets.ModelViewSet):\n    serializer_class = HeroSectionOverlayListSerializers\n    # permission_classes = [companyPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = HeroSectionOverlay.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id','']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return HeroSectionOverlayWriteSerializers\n        elif self.action == 'retrieve':\n            return HeroSectionOverlayRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}