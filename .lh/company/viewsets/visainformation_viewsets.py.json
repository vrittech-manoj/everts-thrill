{
    "sourceFile": "company/viewsets/visainformation_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1725440330098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725440921148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,24 +48,29 @@\n             # Create new visa information\n             new_visa_information = VisaInformation.objects.create(description=description)\n             return Response({\"message\": \"Visa information created successfully.\", \"id\": new_visa_information.id}, status=status.HTTP_201_CREATED)\n     \n+   from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n+\n+class VisaInformationViewSet(viewsets.ModelViewSet):\n+    queryset = VisaInformation.objects.all()\n+    serializer_class = VisaInformationSerializer\n+\n     @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-visa-information\")\n     def retrieve_update_visa_information(self, request, *args, **kwargs):\n-        try:\n-            # Assuming there's only one visa information, get the first one.\n-            visa_information = VisaInformation.objects.first()\n-            \n-            if not visa_information:\n-                return Response({\"error\": \"Visa information not found.\"}, status=status.HTTP_404_NOT_FOUND)\n-        \n-        except VisaInformation.DoesNotExist:\n-            return Response({\"error\": \"Visa information not found.\"}, status=status.HTTP_404_NOT_FOUND)\n+        # Get the first visa information\n+        visa_information = VisaInformation.objects.first()\n \n+        # If no visa information exists, return null\n+        if not visa_information:\n+            return Response({\"data\": None}, status=status.HTTP_200_OK)\n+\n         if request.method == 'GET':\n             # Retrieve the visa information\n             serializer = VisaInformationRetrieveSerializers(visa_information)\n-            return Response(serializer.data, status=status.HTTP_200_OK)\n+            return Response({\"data\": serializer.data}, status=status.HTTP_200_OK)\n         \n         elif request.method == 'PUT':\n             # Update the visa information\n             description = request.data.get('description', None)\n"
                },
                {
                    "date": 1725440928484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n             # Create new visa information\n             new_visa_information = VisaInformation.objects.create(description=description)\n             return Response({\"message\": \"Visa information created successfully.\", \"id\": new_visa_information.id}, status=status.HTTP_201_CREATED)\n     \n-   from rest_framework.decorators import action\n+    from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n \n class VisaInformationViewSet(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1725440937612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,16 +48,10 @@\n             # Create new visa information\n             new_visa_information = VisaInformation.objects.create(description=description)\n             return Response({\"message\": \"Visa information created successfully.\", \"id\": new_visa_information.id}, status=status.HTTP_201_CREATED)\n     \n-    from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework import status\n+   \n \n-class VisaInformationViewSet(viewsets.ModelViewSet):\n-    queryset = VisaInformation.objects.all()\n-    serializer_class = VisaInformationSerializer\n-\n     @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-visa-information\")\n     def retrieve_update_visa_information(self, request, *args, **kwargs):\n         # Get the first visa information\n         visa_information = VisaInformation.objects.first()\n"
                },
                {
                    "date": 1725440944500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,8 @@\n             # Create new visa information\n             new_visa_information = VisaInformation.objects.create(description=description)\n             return Response({\"message\": \"Visa information created successfully.\", \"id\": new_visa_information.id}, status=status.HTTP_201_CREATED)\n     \n-   \n-\n     @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-visa-information\")\n     def retrieve_update_visa_information(self, request, *args, **kwargs):\n         # Get the first visa information\n         visa_information = VisaInformation.objects.first()\n"
                }
            ],
            "date": 1725440330098,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import VisaInformation\nfrom ..serializers.visainformation_serializers import VisaInformationListSerializers, VisaInformationRetrieveSerializers, VisaInformationWriteSerializers\nfrom ..utilities.importbase import *\n\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass visainformationViewsets(viewsets.ModelViewSet):\n    serializer_class = VisaInformationListSerializers\n    permission_classes = [companyPermission]\n    pagination_class = MyPageNumberPagination\n    queryset = VisaInformation.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    def get_queryset(self):\n        return super().get_queryset()\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return VisaInformationWriteSerializers\n        elif self.action == 'retrieve':\n            return VisaInformationRetrieveSerializers\n        return super().get_serializer_class()\n\n    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-update-visa-information\")\n    def action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n        \n        visa_information = VisaInformation.objects.all()\n        \n        if visa_information.exists():\n            # Update the existing visa information\n            visa_information = visa_information.first()\n            visa_information.description = description\n            visa_information.save()\n            return Response({\"message\": \"Visa information updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create new visa information\n            new_visa_information = VisaInformation.objects.create(description=description)\n            return Response({\"message\": \"Visa information created successfully.\", \"id\": new_visa_information.id}, status=status.HTTP_201_CREATED)\n    \n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-visa-information\")\n    def retrieve_update_visa_information(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one visa information, get the first one.\n            visa_information = VisaInformation.objects.first()\n            \n            if not visa_information:\n                return Response({\"error\": \"Visa information not found.\"}, status=status.HTTP_404_NOT_FOUND)\n        \n        except VisaInformation.DoesNotExist:\n            return Response({\"error\": \"Visa information not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the visa information\n            serializer = VisaInformationRetrieveSerializers(visa_information)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the visa information\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            visa_information.description = description\n            visa_information.save()\n            return Response({\"message\": \"Visa information updated successfully.\"}, status=status.HTTP_200_OK)\n"
        }
    ]
}