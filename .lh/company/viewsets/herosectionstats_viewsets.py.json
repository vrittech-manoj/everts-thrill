{
    "sourceFile": "company/viewsets/herosectionstats_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 40,
            "patches": [
                {
                    "date": 1726116425629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726116437301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return HeroSectionStatsWriteSerializers\n"
                },
                {
                    "date": 1726116447666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n     # permission_classes = [companyPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = HeroSectionStats.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n"
                },
                {
                    "date": 1726116452772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n \n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n-    # permission_classes = [companyPermission]\n+    permission_classes = [companyPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = HeroSectionStats.objects.all()\n \n"
                },
                {
                    "date": 1726206978354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,23 @@\n             return HeroSectionStatsWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n+    \n+     def create(self, request, *args, **kwargs):\n+        # Extract the 'stats' data from the request\n+        data = request.data.get('stats', [])\n+        \n+        # If stats is a list, pass many=True\n+        if isinstance(data, list):\n+            serializer = self.get_serializer(data=data, many=True)\n+        else:\n+            serializer = self.get_serializer(data=data)\n \n+        serializer.is_valid(raise_exception=True)\n+        self.perform_create(serializer)\n+        return Response(serializer.data)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1726206991646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionStats\n from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.response import Response\n \n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n     permission_classes = [companyPermission]\n@@ -30,9 +31,9 @@\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     \n-     def create(self, request, *args, **kwargs):\n+    def create(self, request, *args, **kwargs):\n         # Extract the 'stats' data from the request\n         data = request.data.get('stats', [])\n         \n         # If stats is a list, pass many=True\n"
                },
                {
                    "date": 1726207884807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,22 +31,15 @@\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    def create(self, request, *args, **kwargs):\n-        # Extract the 'stats' data from the request\n-        data = request.data.get('stats', [])\n-        \n-        # If stats is a list, pass many=True\n-        if isinstance(data, list):\n-            serializer = self.get_serializer(data=data, many=True)\n-        else:\n-            serializer = self.get_serializer(data=data)\n+     def post(self, request, *args, **kwargs):\n+        serializer = HeroSectionStatsArraySerializer(data=request.data)\n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response({\"message\": \"Hero section stats saved successfully\"}, status=status.HTTP_201_CREATED)\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-        serializer.is_valid(raise_exception=True)\n-        self.perform_create(serializer)\n-        return Response(serializer.data)\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1726207897042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,11 @@\n from ..models import HeroSectionStats\n from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n     permission_classes = [companyPermission]\n"
                },
                {
                    "date": 1726207905523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,8 @@\n from ..models import HeroSectionStats\n from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n-from rest_framework.views import APIView\n-from rest_framework.response import Response\n from rest_framework import status\n \n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n"
                },
                {
                    "date": 1726207913932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     \n-     def post(self, request, *args, **kwargs):\n+    def post(self, request, *args, **kwargs):\n         serializer = HeroSectionStatsArraySerializer(data=request.data)\n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section stats saved successfully\"}, status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1726207920983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionStats\n-from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n+from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers, He\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n \n"
                },
                {
                    "date": 1726208855774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionStats\n-from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers, He\n+from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers, HeroSectionStatsArraySerializer\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n \n@@ -39,8 +39,10 @@\n             serializer.save()\n             return Response({\"message\": \"Hero section stats saved successfully\"}, status=status.HTTP_201_CREATED)\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n+    def put(self, request, *args, **kwargs):\n+        serializer = HeroSectionStatsArraySerializer(data=request.data)\n+        if serializer.is_valid():\n+            serializer.update(instance=None, validated_data=serializer.validated_data)\n+            return Response({\"message\": \"Hero section stats updated successfully\"}, status=status.HTTP_200_OK)\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726209022223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,8 @@\n             serializer.save()\n             return Response({\"message\": \"Hero section stats saved successfully\"}, status=status.HTTP_201_CREATED)\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-    def put(self, request, *args, **kwargs):\n-        serializer = HeroSectionStatsArraySerializer(data=request.data)\n-        if serializer.is_valid():\n-            serializer.update(instance=None, validated_data=serializer.validated_data)\n-            return Response({\"message\": \"Hero section stats updated successfully\"}, status=status.HTTP_200_OK)\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1726209028945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionStats\n-from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers, HeroSectionStatsArraySerializer\n+from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n \n@@ -32,9 +32,9 @@\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    def post(self, request, *args, **kwargs):\n+     def post(self, request, *args, **kwargs):\n         serializer = HeroSectionStatsArraySerializer(data=request.data)\n         if serializer.is_valid():\n             serializer.save()\n             return Response({\"message\": \"Hero section stats saved successfully\"}, status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1726209035739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,8 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionStats\n from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n-from rest_framework.response import Response\n-from rest_framework import status\n \n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n     permission_classes = [companyPermission]\n@@ -32,15 +30,22 @@\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     \n-     def post(self, request, *args, **kwargs):\n-        serializer = HeroSectionStatsArraySerializer(data=request.data)\n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response({\"message\": \"Hero section stats saved successfully\"}, status=status.HTTP_201_CREATED)\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+     def create(self, request, *args, **kwargs):\n+        # Extract the 'stats' data from the request\n+        data = request.data.get('stats', [])\n+        \n+        # If stats is a list, pass many=True\n+        if isinstance(data, list):\n+            serializer = self.get_serializer(data=data, many=True)\n+        else:\n+            serializer = self.get_serializer(data=data)\n \n+        serializer.is_valid(raise_exception=True)\n+        self.perform_create(serializer)\n+        return Response(serializer.data)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1726210878807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,23 +29,13 @@\n             return HeroSectionStatsWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n+\n+    def create()\n     \n-     def create(self, request, *args, **kwargs):\n-        # Extract the 'stats' data from the request\n-        data = request.data.get('stats', [])\n-        \n-        # If stats is a list, pass many=True\n-        if isinstance(data, list):\n-            serializer = self.get_serializer(data=data, many=True)\n-        else:\n-            serializer = self.get_serializer(data=data)\n+    \n \n-        serializer.is_valid(raise_exception=True)\n-        self.perform_create(serializer)\n-        return Response(serializer.data)\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1726210885609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n \n-    def create()\n+    def create(self, request, *args, **kwargs):\n+        return super().create(request, *args, **kwargs)\n     \n     \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1726210949173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,11 +29,20 @@\n             return HeroSectionStatsWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n+def create(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects)\n+        if isinstance(request.data, list):\n+            serializer = self.get_serializer(data=request.data, many=True)\n+        else:\n+            serializer = self.get_serializer(data=request.data)\n \n-    def create(self, request, *args, **kwargs):\n-        return super().create(request, *args, **kwargs)\n+        serializer.is_valid(raise_exception=True)\n+        self.perform_create(serializer)\n+        \n+        headers = self.get_success_headers(serializer.data)\n+        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n     \n     \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1726210959912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import HeroSectionStats\n from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework import status\n+from rest_framework.response import Response\n \n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n     permission_classes = [companyPermission]\n@@ -29,9 +31,9 @@\n             return HeroSectionStatsWriteSerializers\n         elif self.action == 'retrieve':\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n-def create(self, request, *args, **kwargs):\n+    def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         if isinstance(request.data, list):\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211008595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n         headers = self.get_success_headers(serializer.data)\n         return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n     \n     \n+    \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1726211019885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,11 @@\n from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n from ..utilities.importbase import *\n from rest_framework import status\n from rest_framework.response import Response\n+from rest_framework.exceptions import ValidationError\n \n+\n class herosectionstatsViewsets(viewsets.ModelViewSet):\n     serializer_class = HeroSectionStatsListSerializers\n     permission_classes = [companyPermission]\n     # authentication_classes = [JWTAuthentication]\n@@ -44,8 +46,30 @@\n         \n         headers = self.get_success_headers(serializer.data)\n         return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n     \n+    def update(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects to update)\n+        if isinstance(request.data, list):\n+            partial = kwargs.pop('partial', False)\n+            # Loop through the list of data to update each object\n+            updated_data = []\n+            for item in request.data:\n+                # Each item should contain the `id` of the instance to be updated\n+                try:\n+                    instance = self.get_queryset().get(id=item['id'])\n+                except self.get_queryset().model.DoesNotExist:\n+                    raise ValidationError(f\"Object with id {item['id']} not found.\")\n+                \n+                serializer = self.get_serializer(instance, data=item, partial=partial)\n+                serializer.is_valid(raise_exception=True)\n+                self.perform_update(serializer)\n+                updated_data.append(serializer.data)\n+\n+            return Response(updated_data, status=status.HTTP_200_OK)\n+\n+        # Fallback to standard update for a single object\n+        return super().update(request, *args, **kwargs)\n     \n     \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1726211106583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import HeroSectionStats\n+from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework import status\n+from rest_framework.response import Response\n+from rest_framework.exceptions import ValidationError\n+\n+\n+class herosectionstatsViewsets(viewsets.ModelViewSet):\n+    serializer_class = HeroSectionStatsListSerializers\n+    permission_classes = [companyPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = HeroSectionStats.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return HeroSectionStatsWriteSerializers\n+        elif self.action == 'retrieve':\n+            return HeroSectionStatsRetrieveSerializers\n+        return super().get_serializer_class()\n+    def create(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects)\n+        if isinstance(request.data, list):\n+            \n+            serializer = self.get_serializer(data=request.data, many=True)\n+        else:\n+            serializer = self.get_serializer(data=request.data)\n+\n+        serializer.is_valid(raise_exception=True)\n+        self.perform_create(serializer)\n+        \n+        headers = self.get_success_headers(serializer.data)\n+        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n+    \n+    def update(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects to update)\n+        if isinstance(request.data, list):\n+            partial = kwargs.pop('partial', False)\n+            # Loop through the list of data to update each object\n+            updated_data = []\n+            for item in request.data:\n+                # Each item should contain the `id` of the instance to be updated\n+                try:\n+                    instance = self.get_queryset().get(id=item['id'])\n+                except self.get_queryset().model.DoesNotExist:\n+                    raise ValidationError(f\"Object with id {item['id']} not found.\")\n+                \n+                serializer = self.get_serializer(instance, data=item, partial=partial)\n+                serializer.is_valid(raise_exception=True)\n+                self.perform_update(serializer)\n+                updated_data.append(serializer.data)\n+\n+            return Response(updated_data, status=status.HTTP_200_OK)\n+\n+        # Fallback to standard update for a single object\n+        return super().update(request, *args, **kwargs)\n+    \n+    \n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1726211115341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         if isinstance(request.data, list):\n-            \n+            print(\"\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n             serializer = self.get_serializer(data=request.data)\n \n@@ -76,82 +76,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import HeroSectionStats\n-from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework import status\n-from rest_framework.response import Response\n-from rest_framework.exceptions import ValidationError\n-\n-\n-class herosectionstatsViewsets(viewsets.ModelViewSet):\n-    serializer_class = HeroSectionStatsListSerializers\n-    permission_classes = [companyPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = HeroSectionStats.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return HeroSectionStatsWriteSerializers\n-        elif self.action == 'retrieve':\n-            return HeroSectionStatsRetrieveSerializers\n-        return super().get_serializer_class()\n-    def create(self, request, *args, **kwargs):\n-        # Check if the request data is a list (indicating multiple objects)\n-        if isinstance(request.data, list):\n-            serializer = self.get_serializer(data=request.data, many=True)\n-        else:\n-            serializer = self.get_serializer(data=request.data)\n-\n-        serializer.is_valid(raise_exception=True)\n-        self.perform_create(serializer)\n-        \n-        headers = self.get_success_headers(serializer.data)\n-        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n-    \n-    def update(self, request, *args, **kwargs):\n-        # Check if the request data is a list (indicating multiple objects to update)\n-        if isinstance(request.data, list):\n-            partial = kwargs.pop('partial', False)\n-            # Loop through the list of data to update each object\n-            updated_data = []\n-            for item in request.data:\n-                # Each item should contain the `id` of the instance to be updated\n-                try:\n-                    instance = self.get_queryset().get(id=item['id'])\n-                except self.get_queryset().model.DoesNotExist:\n-                    raise ValidationError(f\"Object with id {item['id']} not found.\")\n-                \n-                serializer = self.get_serializer(instance, data=item, partial=partial)\n-                serializer.is_valid(raise_exception=True)\n-                self.perform_update(serializer)\n-                updated_data.append(serializer.data)\n-\n-            return Response(updated_data, status=status.HTTP_200_OK)\n-\n-        # Fallback to standard update for a single object\n-        return super().update(request, *args, **kwargs)\n-    \n-    \n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n"
                },
                {
                    "date": 1726211121040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         if isinstance(request.data, list):\n-            print(\"\")\n+            print(\"creatinggggggggg\\n\\n\\n\\\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n             serializer = self.get_serializer(data=request.data)\n \n"
                },
                {
                    "date": 1726211178883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,12 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         if isinstance(request.data, list):\n-            print(\"creatinggggggggg\\n\\n\\n\\\")\n+            print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n+            \n             serializer = self.get_serializer(data=request.data)\n \n         serializer.is_valid(raise_exception=True)\n         self.perform_create(serializer)\n"
                },
                {
                    "date": 1726211186953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n-            \n+            print(\"line 43\")\n             serializer = self.get_serializer(data=request.data)\n \n         serializer.is_valid(raise_exception=True)\n         self.perform_create(serializer)\n"
                },
                {
                    "date": 1726211194768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n+        print(\"\")\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211203914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n-        print(\"\")\n+        print(isinstance(request.data, list))\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211212509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             return HeroSectionStatsRetrieveSerializers\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n-        print(isinstance(request.data, list))\n+        print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211285112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n+        \n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211292703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n-        \n+        data = \n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211303748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import HeroSectionStats\n+from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework import status\n+from rest_framework.response import Response\n+from rest_framework.exceptions import ValidationError\n+\n+\n+class herosectionstatsViewsets(viewsets.ModelViewSet):\n+    serializer_class = HeroSectionStatsListSerializers\n+    permission_classes = [companyPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = HeroSectionStats.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return HeroSectionStatsWriteSerializers\n+        elif self.action == 'retrieve':\n+            return HeroSectionStatsRetrieveSerializers\n+        return super().get_serializer_class()\n+    def create(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects)\n+        print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n+        data = request.data\n+        if isinstance(request.data, list):\n+            print(\"creatinggggggggg\\n\\n\\n\\n\")\n+            serializer = self.get_serializer(data=request.data, many=True)\n+        else:\n+            print(\"line 43\")\n+            serializer = self.get_serializer(data=request.data)\n+\n+        serializer.is_valid(raise_exception=True)\n+        self.perform_create(serializer)\n+        \n+        headers = self.get_success_headers(serializer.data)\n+        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n+    \n+    def update(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects to update)\n+        if isinstance(request.data, list):\n+            partial = kwargs.pop('partial', False)\n+            # Loop through the list of data to update each object\n+            updated_data = []\n+            for item in request.data:\n+                # Each item should contain the `id` of the instance to be updated\n+                try:\n+                    instance = self.get_queryset().get(id=item['id'])\n+                except self.get_queryset().model.DoesNotExist:\n+                    raise ValidationError(f\"Object with id {item['id']} not found.\")\n+                \n+                serializer = self.get_serializer(instance, data=item, partial=partial)\n+                serializer.is_valid(raise_exception=True)\n+                self.perform_update(serializer)\n+                updated_data.append(serializer.data)\n+\n+            return Response(updated_data, status=status.HTTP_200_OK)\n+\n+        # Fallback to standard update for a single object\n+        return super().update(request, *args, **kwargs)\n+    \n+    \n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1726211309125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,86 +79,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import HeroSectionStats\n-from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework import status\n-from rest_framework.response import Response\n-from rest_framework.exceptions import ValidationError\n-\n-\n-class herosectionstatsViewsets(viewsets.ModelViewSet):\n-    serializer_class = HeroSectionStatsListSerializers\n-    permission_classes = [companyPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = HeroSectionStats.objects.all()\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return HeroSectionStatsWriteSerializers\n-        elif self.action == 'retrieve':\n-            return HeroSectionStatsRetrieveSerializers\n-        return super().get_serializer_class()\n-    def create(self, request, *args, **kwargs):\n-        # Check if the request data is a list (indicating multiple objects)\n-        print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n-        data = \n-        if isinstance(request.data, list):\n-            print(\"creatinggggggggg\\n\\n\\n\\n\")\n-            serializer = self.get_serializer(data=request.data, many=True)\n-        else:\n-            print(\"line 43\")\n-            serializer = self.get_serializer(data=request.data)\n-\n-        serializer.is_valid(raise_exception=True)\n-        self.perform_create(serializer)\n-        \n-        headers = self.get_success_headers(serializer.data)\n-        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n-    \n-    def update(self, request, *args, **kwargs):\n-        # Check if the request data is a list (indicating multiple objects to update)\n-        if isinstance(request.data, list):\n-            partial = kwargs.pop('partial', False)\n-            # Loop through the list of data to update each object\n-            updated_data = []\n-            for item in request.data:\n-                # Each item should contain the `id` of the instance to be updated\n-                try:\n-                    instance = self.get_queryset().get(id=item['id'])\n-                except self.get_queryset().model.DoesNotExist:\n-                    raise ValidationError(f\"Object with id {item['id']} not found.\")\n-                \n-                serializer = self.get_serializer(instance, data=item, partial=partial)\n-                serializer.is_valid(raise_exception=True)\n-                self.perform_update(serializer)\n-                updated_data.append(serializer.data)\n-\n-            return Response(updated_data, status=status.HTTP_200_OK)\n-\n-        # Fallback to standard update for a single object\n-        return super().update(request, *args, **kwargs)\n-    \n-    \n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n"
                },
                {
                    "date": 1726211315295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n         data = request.data\n+        \n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211320814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n         data = request.data\n-        \n+        print(type(data))\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211326451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n         data = request.data\n-        print(type(data))\n+        print(type(data),\"data type\")\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211452249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n         data = request.data\n+        \n         print(type(data),\"data type\")\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n"
                },
                {
                    "date": 1726211461329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n         data = request.data\n         \n-        print(type(data),\"data type\")\n+        print(type(data),\"data type\",)\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211596531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,11 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n-        data = request.data\n+        data = request.data[]\n         \n-        print(type(data),\"data type\",)\n+        print(type(data),\"data type\",data)\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n             serializer = self.get_serializer(data=request.data, many=True)\n         else:\n"
                },
                {
                    "date": 1726211601640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         return super().get_serializer_class()\n     def create(self, request, *args, **kwargs):\n         # Check if the request data is a list (indicating multiple objects)\n         print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n-        data = request.data['t']\n+        data = request.data['']\n         \n         print(type(data),\"data type\",data)\n         if isinstance(request.data, list):\n             print(\"creatinggggggggg\\n\\n\\n\\n\")\n"
                },
                {
                    "date": 1726211802508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import HeroSectionStats\n+from ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework import status\n+from rest_framework.response import Response\n+from rest_framework.exceptions import ValidationError\n+\n+\n+class herosectionstatsViewsets(viewsets.ModelViewSet):\n+    serializer_class = HeroSectionStatsListSerializers\n+    permission_classes = [companyPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = HeroSectionStats.objects.all()\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return HeroSectionStatsWriteSerializers\n+        elif self.action == 'retrieve':\n+            return HeroSectionStatsRetrieveSerializers\n+        return super().get_serializer_class()\n+    def create(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects)\n+        print(isinstance(request.data, list),\"\\n\\n\\n\\n\\\\n\\n\\n\\n\\n\\n\\n\")\n+        data = request.data['stats']\n+        \n+        print(type(data),\"data type\",data)\n+        if isinstance(data, list):\n+            print(\"creatinggggggggg\\n\\n\\n\\n\")\n+            serializer = self.get_serializer(data=.data, many=True)\n+        else:\n+            print(\"line 43\")\n+            serializer = self.get_serializer(data=request.data)\n+\n+        serializer.is_valid(raise_exception=True)\n+        self.perform_create(serializer)\n+        \n+        headers = self.get_success_headers(serializer.data)\n+        return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)\n+    \n+    def update(self, request, *args, **kwargs):\n+        # Check if the request data is a list (indicating multiple objects to update)\n+        if isinstance(request.data, list):\n+            partial = kwargs.pop('partial', False)\n+            # Loop through the list of data to update each object\n+            updated_data = []\n+            for item in request.data:\n+                # Each item should contain the `id` of the instance to be updated\n+                try:\n+                    instance = self.get_queryset().get(id=item['id'])\n+                except self.get_queryset().model.DoesNotExist:\n+                    raise ValidationError(f\"Object with id {item['id']} not found.\")\n+                \n+                serializer = self.get_serializer(instance, data=item, partial=partial)\n+                serializer.is_valid(raise_exception=True)\n+                self.perform_update(serializer)\n+                updated_data.append(serializer.data)\n+\n+            return Response(updated_data, status=status.HTTP_200_OK)\n+\n+        # Fallback to standard update for a single object\n+        return super().update(request, *args, **kwargs)\n+    \n+    \n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                }
            ],
            "date": 1726116425629,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import HeroSectionStats\nfrom ..serializers.herosectionstats_serializers import HeroSectionStatsListSerializers, HeroSectionStatsRetrieveSerializers, HeroSectionStatsWriteSerializers\nfrom ..utilities.importbase import *\n\nclass herosectionstatsViewsets(viewsets.ModelViewSet):\n    serializer_class = HeroSectionStatsListSerializers\n    # permission_classes = [companyPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = HeroSectionStats.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    filterset_fields = {\n        'id': ['exact'],\n    }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return HeroSectionStatsWriteSerializers\n        elif self.action == 'retrieve':\n            return HeroSectionStatsRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}