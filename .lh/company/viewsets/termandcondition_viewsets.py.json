{
    "sourceFile": "company/viewsets/termandcondition_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1725441018122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1725441018122,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import TermAndCondition\nfrom ..serializers.termandcondition_serializers import TermAndConditionListSerializers, TermAndConditionRetrieveSerializers, TermAndConditionWriteSerializers\nfrom ..utilities.importbase import *\n\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\nclass termandconditionViewsets(viewsets.ModelViewSet):\n    serializer_class = TermAndConditionListSerializers\n    permission_classes = [companyPermission]\n    pagination_class = MyPageNumberPagination\n    queryset = TermAndCondition.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return TermAndConditionWriteSerializers\n        elif self.action == 'retrieve':\n            return TermAndConditionRetrieveSerializers\n        return super().get_serializer_class()\n\n    @action(detail=False, methods=['post'], name=\"create-update\", url_path=\"create-terms-and-conditions\")\n    def action_name(self, request, *args, **kwargs):\n        description = request.data.get('description', None)\n        \n        if description is None:\n            return Response({\"data\": None}, status=status.HTTP_200_OK)\n        \n        term_and_condition = TermAndCondition.objects.all()\n        \n        if term_and_condition.exists():\n            # Update the existing term and condition\n            term_and_condition = term_and_condition.first()\n            term_and_condition.description = description\n            term_and_condition.save()\n            return Response({\"message\": \"Terms and conditions updated successfully.\"}, status=status.HTTP_200_OK)\n        else:\n            # Create a new term and condition\n            new_term_and_condition = TermAndCondition.objects.create(description=description)\n            return Response({\"message\": \"Terms and conditions created successfully.\", \"id\": new_term_and_condition.id}, status=status.HTTP_201_CREATED)\n        \n    @action(detail=False, methods=['get', 'put'], name=\"retrieve-update\", url_path=\"detail-terms-and-conditions\")\n    def retrieve_update_term_and_condition(self, request, *args, **kwargs):\n        try:\n            # Assuming there's only one term and condition, get the first one.\n            term_and_condition = TermAndCondition.objects.first()\n            \n            if not term_and_condition:\n                return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n        \n        except TermAndCondition.DoesNotExist:\n            return Response({\"error\": \"Term and Condition not found.\"}, status=status.HTTP_404_NOT_FOUND)\n\n        if request.method == 'GET':\n            # Retrieve the term and condition\n            serializer = TermAndConditionRetrieveSerializers(term_and_condition)\n            return Response(serializer.data, status=status.HTTP_200_OK)\n        \n        elif request.method == 'PUT':\n            # Update the term and condition\n            description = request.data.get('description', None)\n            \n            if description is None:\n                return Response({\"error\": \"Description is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n            \n            term_and_condition.description = description\n            term_and_condition.save()\n            return Response({\"message\": \"Term and Condition updated successfully.\"}, status=status.HTTP_200_OK)"
        }
    ]
}