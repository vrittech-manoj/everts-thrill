{
    "sourceFile": "company/viewsets/meetteam_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1726114691731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726114700773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,15 @@\n     queryset = MeetTeam.objects.all()\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','member_name','position']\n-    ordering_fields = ['id','member_name','position']\n+    ordering_fields = ['id','member_name','position','index']\n \n     filterset_fields = {\n         'id': ['exact'],\n         'member_name': ['exact'],\n         'position': ['exact'],\n-        'position': ['exact'],\n+        'index': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1726397122718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class meetteamViewsets(viewsets.ModelViewSet):\n     serializer_class = MeetTeamListSerializers\n     permission_classes = [companyPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = MeetTeam.objects.all()\n+    queryset = MeetTeam.objects.all().\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','member_name','position']\n     ordering_fields = ['id','member_name','position','index']\n"
                },
                {
                    "date": 1726397151843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class meetteamViewsets(viewsets.ModelViewSet):\n     serializer_class = MeetTeamListSerializers\n     permission_classes = [companyPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = MeetTeam.objects.all().\n+    queryset = MeetTeam.objects.all().order_by(\"-created_date\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','member_name','position']\n     ordering_fields = ['id','member_name','position','index']\n"
                },
                {
                    "date": 1726397158255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class meetteamViewsets(viewsets.ModelViewSet):\n     serializer_class = MeetTeamListSerializers\n     permission_classes = [companyPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = MeetTeam.objects.all().order_by(\"-created_date\")\n+    queryset = MeetTeam.objects.all().order_by(\"index\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','member_name','position']\n     ordering_fields = ['id','member_name','position','index']\n"
                },
                {
                    "date": 1726480180855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,13 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import MeetTeam\n from ..serializers.meetteam_serializers import MeetTeamListSerializers, MeetTeamRetrieveSerializers, MeetTeamWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n \n class meetteamViewsets(viewsets.ModelViewSet):\n     serializer_class = MeetTeamListSerializers\n-    permission_classes = [companyPermission]\n+    # permission_classes = [companyPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = MeetTeam.objects.all().order_by(\"index\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n@@ -32,8 +33,48 @@\n         elif self.action == 'retrieve':\n             return MeetTeamRetrieveSerializers\n         return super().get_serializer_class()\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n+    @action(detail=False, methods=['get'], name=\"dragable\", url_path=\"drag-team\")\n+    def Dragable(self, request, *args, **kwargs):\n+        target = request.GET.get('target')  # ID of the target object (elephant)\n+        goal = request.GET.get('goal')  # ID of the goal object (ball)\n \n+        from rest_framework.response import Response\n+\n+        # Fetch the target and goal objects\n+        try:\n+            target_obj = MeetTeam.objects.get(id=target)\n+            goal_obj = MeetTeam.objects.get(id=goal)\n+        except MeetTeam.DoesNotExist:\n+            return Response({\"error\": \"Target or Goal object not found\"}, status=400)\n+\n+        target_index = target_obj.index\n+        goal_index = goal_obj.index\n+\n+        if target_index < goal_index:\n+            # Moving target down (target goes after goal)\n+            affected_objs = MeetTeam.objects.filter(index__gt=target_index, index__lte=goal_index).order_by('index')\n+            \n+            # Decrement index of all affected objects\n+            for obj in affected_objs:\n+                obj.index -= 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index\n+            target_obj.save()\n+\n+        else:\n+            # Moving target up (target goes before goal)\n+            affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            \n+            # Increment index of all affected objects\n+            for obj in affected_objs:\n+                obj.index += 1\n+                obj.save()\n+            \n+            # Set target object's new index\n+            target_obj.index = goal_index+1  # Ensure target is placed right after the goal\n+            target_obj.save()\n+\n+        return Response({\"status\": \"success\"})\n"
                },
                {
                    "date": 1726480477461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n             target_obj.save()\n \n         else:\n             # Moving target up (target goes before goal)\n-            affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+            affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gt=goal_index).order_by('-index')\n             \n             # Increment index of all affected objects\n             for obj in affected_objs:\n                 obj.index += 1\n"
                },
                {
                    "date": 1726480487255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,8 @@\n                 obj.index += 1\n                 obj.save()\n             \n             # Set target object's new index\n-            target_obj.index = goal_index+1  # Ensure target is placed right after the goal\n+            target_obj.index = goal_index  # Ensure target is placed right after the goal\n             target_obj.save()\n \n         return Response({\"status\": \"success\"})\n"
                },
                {
                    "date": 1726481116846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,8 @@\n                 obj.index += 1\n                 obj.save()\n             \n             # Set target object's new index\n-            target_obj.index = goal_index  # Ensure target is placed right after the goal\n+            target_obj.index = goal_index+1  # Ensure target is placed right after the goal\n             target_obj.save()\n \n         return Response({\"status\": \"success\"})\n"
                },
                {
                    "date": 1726481209238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,17 +64,18 @@\n             target_obj.index = goal_index\n             target_obj.save()\n \n         else:\n-            # Moving target up (target goes before goal)\n-            affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gt=goal_index).order_by('-index')\n-            \n-            # Increment index of all affected objects\n-            for obj in affected_objs:\n-                obj.index += 1\n-                obj.save()\n-            \n-            # Set target object's new index\n-            target_obj.index = goal_index+1  # Ensure target is placed right after the goal\n-            target_obj.save()\n+          # Moving target up (target goes before goal)\n+affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n+# Increment index of all affected objects by 1\n+for obj in affected_objs:\n+    obj.index += 1\n+    obj.save()\n+\n+# Set target object's new index (exact position of the goal)\n+target_obj.index = goal_index  # Place the target in the goal's position\n+target_obj.save()\n+\n+\n         return Response({\"status\": \"success\"})\n"
                },
                {
                    "date": 1726481214555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,17 +65,17 @@\n             target_obj.save()\n \n         else:\n           # Moving target up (target goes before goal)\n-affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n+        affected_objs = MeetTeam.objects.filter(index__lt=target_index, index__gte=goal_index).order_by('-index')\n \n-# Increment index of all affected objects by 1\n-for obj in affected_objs:\n-    obj.index += 1\n-    obj.save()\n+        # Increment index of all affected objects by 1\n+        for obj in affected_objs:\n+            obj.index += 1\n+            obj.save()\n \n-# Set target object's new index (exact position of the goal)\n-target_obj.index = goal_index  # Place the target in the goal's position\n-target_obj.save()\n+        # Set target object's new index (exact position of the goal)\n+        target_obj.index = goal_index  # Place the target in the goal's position\n+        target_obj.save()\n \n \n         return Response({\"status\": \"success\"})\n"
                }
            ],
            "date": 1726114691731,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import MeetTeam\nfrom ..serializers.meetteam_serializers import MeetTeamListSerializers, MeetTeamRetrieveSerializers, MeetTeamWriteSerializers\nfrom ..utilities.importbase import *\n\nclass meetteamViewsets(viewsets.ModelViewSet):\n    serializer_class = MeetTeamListSerializers\n    permission_classes = [companyPermission]\n    pagination_class = MyPageNumberPagination\n    queryset = MeetTeam.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id','member_name','position']\n    ordering_fields = ['id','member_name','position']\n\n    filterset_fields = {\n        'id': ['exact'],\n        'member_name': ['exact'],\n        'position': ['exact'],\n        'position': ['exact'],\n    }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return MeetTeamWriteSerializers\n        elif self.action == 'retrieve':\n            return MeetTeamRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}