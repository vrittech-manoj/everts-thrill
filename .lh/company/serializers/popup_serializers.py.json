{
    "sourceFile": "company/serializers/popup_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 136,
            "patches": [
                {
                    "date": 1725600608506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725600797967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n+                \n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725600804758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,10 @@\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                \n+            \n+            elif\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725600812084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,11 @@\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n             \n-            elif\n+            elif not popup_instance.url:\n+    popup_instance.url = popup_instance.image.url\n+\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725600819871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,9 @@\n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n             \n             elif not popup_instance.url:\n-    popup_instance.url = popup_instance.image.url\n-\n+                popup_instance.url = popup_instance.image.url\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725600847846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n             \n-            elif not popup_instance.url:\n+            elif popup_instance.url:\n                 popup_instance.url = popup_instance.image.url\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n"
                },
                {
                    "date": 1725600853015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    def create(self, validated_data):\n+        popups = []\n+        request = self.context['request']\n+\n+        index = 0\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n+\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+            \n+            elif popup_instance.url:\n+                popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n+\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n+# TODO return all the data in payload\n+        return popups[0]\n+\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725601362728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,10 @@\n \n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n+             if not popups:\n+            raise serializers.ValidationError(\"No popups were created.\")\n # TODO return all the data in payload\n         return popups[0]\n \n     def to_representation(self, instance):\n@@ -56,65 +58,5 @@\n             \"image\": instance.image.url if instance.image else None,\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n-        }\n-from rest_framework import serializers\n-from ..models import Popup\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n-\n-        index = 0\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n-\n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n-\n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-            \n-            elif popup_instance.url:\n-                popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n-\n-            popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n-# TODO return all the data in payload\n-        return popups[0]\n-\n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n         }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725601367842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n-             if not popups:\n+        if not popups:\n             raise serializers.ValidationError(\"No popups were created.\")\n # TODO return all the data in payload\n         return popups[0]\n \n"
                },
                {
                    "date": 1725601374115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n \n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n+            \n         if not popups:\n             raise serializers.ValidationError(\"No popups were created.\")\n # TODO return all the data in payload\n         return popups[0]\n"
                },
                {
                    "date": 1725601595737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,9 @@\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-            \n-            elif popup_instance.url:\n-                popup_instance.url = popup_instance.image.url\n+\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725601608314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,9 @@\n             if not title:\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n             if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-\n+                popup_instance = Popup.objects.create(title=title, image=image)\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725601625526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n             popups.append(popup_instance)\n             index += 1\n             \n         if not popups:\n-            raise serializers.ValidationError(\"No popups were created.\")\n+            print(\"No popups were created.\")\n # TODO return all the data in payload\n         return popups[0]\n \n     def to_representation(self, instance):\n"
                },
                {
                    "date": 1725601652711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n             popups.append(popup_instance)\n-            index += 1\n             \n+            \n         if not popups:\n             print(\"No popups were created.\")\n # TODO return all the data in payload\n         return popups[0]\n"
                },
                {
                    "date": 1725601670028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n             popups.append(popup_instance)\n+            index += 1\n             \n-            \n         if not popups:\n             print(\"No popups were created.\")\n # TODO return all the data in payload\n         return popups[0]\n"
                },
                {
                    "date": 1725601779125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n         while f'data[{index}][title]' in request.data:\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n+            print\n \n             if not title:\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n"
                },
                {
                    "date": 1725601784382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         while f'data[{index}][title]' in request.data:\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n-            print\n+            print(title)\n \n             if not title:\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n"
                },
                {
                    "date": 1725601790287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,10 @@\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n             print(title)\n+            print(url)\n+            print(title)\n \n             if not title:\n                 raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n"
                },
                {
                    "date": 1725601870430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,37 +16,40 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n+    popups = []\n+    request = self.context['request']\n \n-        index = 0\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n-            print(title)\n-            print(url)\n-            print(title)\n+    # Log the incoming request data for debugging\n+    print(f\"Request data: {request.data}\")\n+    print(f\"Request files: {request.FILES}\")\n \n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+    index = 0\n+    while f'data[{index}][title]' in request.data:\n+        title = request.data.get(f'data[{index}][title]')\n+        url = request.data.get(f'data[{index}][url]')\n+        image = request.FILES.get(f'data[{index}][image]', None)\n \n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image)\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+        if not title:\n+            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n-            \n-        if not popups:\n-            print(\"No popups were created.\")\n-# TODO return all the data in payload\n-        return popups[0]\n+        if image:\n+            popup_instance = Popup.objects.create(title=title, image=image)\n+        else:\n+            popup_instance = Popup.objects.create(title=title, url=url)\n \n+        popup_instance.save()\n+        popups.append(popup_instance)\n+        index += 1\n+\n+    # Ensure at least one popup was created\n+    if not popups:\n+        raise serializers.ValidationError(\"No popups were created.\")\n+\n+    return popups[0]  # or return popups if multiple popups are created\n+\n+\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725601889385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,38 +16,38 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    popups = []\n-    request = self.context['request']\n+        popups = []\n+        request = self.context['request']\n \n-    # Log the incoming request data for debugging\n-    print(f\"Request data: {request.data}\")\n-    print(f\"Request files: {request.FILES}\")\n+        # Log the incoming request data for debugging\n+        print(f\"Request data: {request.data}\")\n+        print(f\"Request files: {request.FILES}\")\n \n-    index = 0\n-    while f'data[{index}][title]' in request.data:\n-        title = request.data.get(f'data[{index}][title]')\n-        url = request.data.get(f'data[{index}][url]')\n-        image = request.FILES.get(f'data[{index}][image]', None)\n+        index = 0\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n \n-        if not title:\n-            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-        if image:\n-            popup_instance = Popup.objects.create(title=title, image=image)\n-        else:\n-            popup_instance = Popup.objects.create(title=title, url=url)\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image)\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-        popup_instance.save()\n-        popups.append(popup_instance)\n-        index += 1\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n \n-    # Ensure at least one popup was created\n-    if not popups:\n-        raise serializers.ValidationError(\"No popups were created.\")\n+        # Ensure at least one popup was created\n+        if not popups:\n+            raise serializers.ValidationError(\"No popups were created.\")\n \n-    return popups[0]  # or return popups if multiple popups are created\n+        return popups[0]  # or return popups if multiple popups are created\n \n \n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n"
                },
                {
                    "date": 1725601963244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,40 +16,31 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n+    request = self.context['request']\n \n-        # Log the incoming request data for debugging\n-        print(f\"Request data: {request.data}\")\n-        print(f\"Request files: {request.FILES}\")\n+    # Extract title, url, and image directly from request\n+    title = request.data.get('title')\n+    url = request.data.get('url', '')  # Default to empty string if no URL is provided\n+    image = request.FILES.get('image', None)\n \n-        index = 0\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n+    if not title:\n+        raise serializers.ValidationError(\"Title is required for the popup.\")\n \n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+    # Create the popup instance\n+    if image:\n+        popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+    else:\n+        popup_instance = Popup.objects.create(title=title, url=url)\n \n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image)\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+    popup_instance.save()\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n+    # Return the created popup instance\n+    return popup_instance\n \n-        # Ensure at least one popup was created\n-        if not popups:\n-            raise serializers.ValidationError(\"No popups were created.\")\n \n-        return popups[0]  # or return popups if multiple popups are created\n \n-\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725601968859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,28 +16,28 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    request = self.context['request']\n+        request = self.context['request']\n \n-    # Extract title, url, and image directly from request\n-    title = request.data.get('title')\n-    url = request.data.get('url', '')  # Default to empty string if no URL is provided\n-    image = request.FILES.get('image', None)\n+        # Extract title, url, and image directly from request\n+        title = request.data.get('title')\n+        url = request.data.get('url', '')  # Default to empty string if no URL is provided\n+        image = request.FILES.get('image', None)\n \n-    if not title:\n-        raise serializers.ValidationError(\"Title is required for the popup.\")\n+        if not title:\n+            raise serializers.ValidationError(\"Title is required for the popup.\")\n \n-    # Create the popup instance\n-    if image:\n-        popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-    else:\n-        popup_instance = Popup.objects.create(title=title, url=url)\n+        # Create the popup instance\n+        if image:\n+            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+        else:\n+            popup_instance = Popup.objects.create(title=title, url=url)\n \n-    popup_instance.save()\n+        popup_instance.save()\n \n-    # Return the created popup instance\n-    return popup_instance\n+        # Return the created popup instance\n+        return popup_instance\n \n \n \n     def to_representation(self, instance):\n"
                },
                {
                    "date": 1725602110620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,37 +10,43 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n+def create(self, validated_data):\n+    request = self.context['request']\n+    popups = []\n \n-    def create(self, validated_data):\n-        request = self.context['request']\n+    # Assuming that the request contains a list of popups in the 'popups' key\n+    popup_data_list = request.data.get('popups', [])\n \n-        # Extract title, url, and image directly from request\n-        title = request.data.get('title')\n-        url = request.data.get('url', '')  # Default to empty string if no URL is provided\n-        image = request.FILES.get('image', None)\n+    # Loop through each popup data\n+    for index, popup_data in enumerate(popup_data_list):\n+        title = popup_data.get('title')\n+        url = popup_data.get('url', '')  # Default to an empty string if no URL is provided\n+        image = request.FILES.get(f'image_{index}', None)  # Assuming image keys are like 'image_0', 'image_1', etc.\n \n         if not title:\n-            raise serializers.ValidationError(\"Title is required for the popup.\")\n+            raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n         # Create the popup instance\n         if image:\n             popup_instance = Popup.objects.create(title=title, image=image, url=url)\n         else:\n             popup_instance = Popup.objects.create(title=title, url=url)\n \n         popup_instance.save()\n+        popups.append(popup_instance)\n \n-        # Return the created popup instance\n-        return popup_instance\n+    # Ensure at least one popup was created\n+    if not popups:\n+        raise serializers.ValidationError(\"No popups were created.\")\n \n+    # Return the list of created popups\n+    return popups\n \n \n+\n+\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725602126166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,39 +10,39 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n-def create(self, validated_data):\n-    request = self.context['request']\n-    popups = []\n+    def create(self, validated_data):\n+        request = self.context['request']\n+        popups = []\n \n-    # Assuming that the request contains a list of popups in the 'popups' key\n-    popup_data_list = request.data.get('popups', [])\n+        # Assuming that the request contains a list of popups in the 'popups' key\n+        popup_data_list = request.data.get('popups', [])\n \n-    # Loop through each popup data\n-    for index, popup_data in enumerate(popup_data_list):\n-        title = popup_data.get('title')\n-        url = popup_data.get('url', '')  # Default to an empty string if no URL is provided\n-        image = request.FILES.get(f'image_{index}', None)  # Assuming image keys are like 'image_0', 'image_1', etc.\n+        # Loop through each popup data\n+        for index, popup_data in enumerate(popup_data_list):\n+            title = popup_data.get('title')\n+            url = popup_data.get('url', '')  # Default to an empty string if no URL is provided\n+            image = request.FILES.get(f'image_{index}', None)  # Assuming image keys are like 'image_0', 'image_1', etc.\n \n-        if not title:\n-            raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n-        # Create the popup instance\n-        if image:\n-            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-        else:\n-            popup_instance = Popup.objects.create(title=title, url=url)\n+            # Create the popup instance\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-        popup_instance.save()\n-        popups.append(popup_instance)\n+            popup_instance.save()\n+            popups.append(popup_instance)\n \n-    # Ensure at least one popup was created\n-    if not popups:\n-        raise serializers.ValidationError(\"No popups were created.\")\n+        # Ensure at least one popup was created\n+        if not popups:\n+            raise serializers.ValidationError(\"No popups were created.\")\n \n-    # Return the list of created popups\n-    return popups\n+        # Return the list of created popups\n+        return popups\n \n \n \n \n"
                },
                {
                    "date": 1725602226878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n         if not popups:\n             raise serializers.ValidationError(\"No popups were created.\")\n \n         # Return the list of created popups\n-        return popups\n+        return popups   \n \n \n \n \n"
                },
                {
                    "date": 1725602235302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,17 +14,15 @@\n     def create(self, validated_data):\n         request = self.context['request']\n         popups = []\n \n-        # Assuming that the request contains a list of popups in the 'popups' key\n-        popup_data_list = request.data.get('popups', [])\n+        index = 0\n+        # Loop until no more title, url, or image is found\n+        while f'title_{index}' in request.data:\n+            title = request.data.get(f'title_{index}')\n+            url = request.data.get(f'url_{index}', '')  # Default to an empty string if no URL is provided\n+            image = request.FILES.get(f'image_{index}', None)  # Get the image for the corresponding index\n \n-        # Loop through each popup data\n-        for index, popup_data in enumerate(popup_data_list):\n-            title = popup_data.get('title')\n-            url = popup_data.get('url', '')  # Default to an empty string if no URL is provided\n-            image = request.FILES.get(f'image_{index}', None)  # Assuming image keys are like 'image_0', 'image_1', etc.\n-\n             if not title:\n                 raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n             # Create the popup instance\n@@ -35,18 +33,21 @@\n \n             popup_instance.save()\n             popups.append(popup_instance)\n \n+            index += 1\n+\n         # Ensure at least one popup was created\n         if not popups:\n             raise serializers.ValidationError(\"No popups were created.\")\n \n         # Return the list of created popups\n-        return popups   \n+        return popups\n \n \n \n \n+\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725602332303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,15 +14,17 @@\n     def create(self, validated_data):\n         request = self.context['request']\n         popups = []\n \n-        index = 0\n-        # Loop until no more title, url, or image is found\n-        while f'title_{index}' in request.data:\n-            title = request.data.get(f'title_{index}')\n-            url = request.data.get(f'url_{index}', '')  # Default to an empty string if no URL is provided\n-            image = request.FILES.get(f'image_{index}', None)  # Get the image for the corresponding index\n+        # Assuming that the request contains a list of popups in the 'popups' key\n+        popup_data_list = request.data.get('popups', [])\n \n+        # Loop through each popup data\n+        for index, popup_data in enumerate(popup_data_list):\n+            title = popup_data.get('title')\n+            url = popup_data.get('url', '')  # Default to an empty string if no URL is provided\n+            image = request.FILES.get(f'image_{index}', None)  # Assuming image keys are like 'image_0', 'image_1', etc.\n+\n             if not title:\n                 raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n             # Create the popup instance\n@@ -33,21 +35,18 @@\n \n             popup_instance.save()\n             popups.append(popup_instance)\n \n-            index += 1\n-\n         # Ensure at least one popup was created\n         if not popups:\n             raise serializers.ValidationError(\"No popups were created.\")\n \n         # Return the list of created popups\n-        return popups\n+        return popups   \n \n \n \n \n-\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725602338550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,43 +10,37 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n     def create(self, validated_data):\n         request = self.context['request']\n-        popups = []\n \n-        # Assuming that the request contains a list of popups in the 'popups' key\n-        popup_data_list = request.data.get('popups', [])\n+        # Extract title, url, and image directly from request\n+        title = request.data.get('title')\n+        url = request.data.get('url', '')  # Default to empty string if no URL is provided\n+        image = request.FILES.get('image', None)\n \n-        # Loop through each popup data\n-        for index, popup_data in enumerate(popup_data_list):\n-            title = popup_data.get('title')\n-            url = popup_data.get('url', '')  # Default to an empty string if no URL is provided\n-            image = request.FILES.get(f'image_{index}', None)  # Assuming image keys are like 'image_0', 'image_1', etc.\n+        if not title:\n+            raise serializers.ValidationError(\"Title is required for the popup.\")\n \n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n+        # Create the popup instance\n+        if image:\n+            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+        else:\n+            popup_instance = Popup.objects.create(title=title, url=url)\n \n-            # Create the popup instance\n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+        popup_instance.save()\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n+        # Return the created popup instance\n+        return popup_instance\n \n-        # Ensure at least one popup was created\n-        if not popups:\n-            raise serializers.ValidationError(\"No popups were created.\")\n \n-        # Return the list of created popups\n-        return popups   \n \n-\n-\n-\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725602348891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,31 +16,42 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        request = self.context['request']\n+    request = self.context['request']\n+    popups = []\n \n-        # Extract title, url, and image directly from request\n-        title = request.data.get('title')\n-        url = request.data.get('url', '')  # Default to empty string if no URL is provided\n-        image = request.FILES.get('image', None)\n+    index = 0\n+    # Loop until no more title, url, or image is found\n+    while f'title_{index}' in request.data:\n+        title = request.data.get(f'title_{index}')\n+        url = request.data.get(f'url_{index}', '')  # Default to an empty string if no URL is provided\n+        image = request.FILES.get(f'image_{index}', None)  # Get the image for the corresponding index\n \n         if not title:\n-            raise serializers.ValidationError(\"Title is required for the popup.\")\n+            raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n         # Create the popup instance\n         if image:\n             popup_instance = Popup.objects.create(title=title, image=image, url=url)\n         else:\n             popup_instance = Popup.objects.create(title=title, url=url)\n \n         popup_instance.save()\n+        popups.append(popup_instance)\n \n-        # Return the created popup instance\n-        return popup_instance\n+        index += 1\n \n+    # Ensure at least one popup was created\n+    if not popups:\n+        raise serializers.ValidationError(\"No popups were created.\")\n \n+    # Return the list of created popups\n+    return popups\n \n+\n+\n+\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725602355734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,38 +16,38 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    request = self.context['request']\n-    popups = []\n+        request = self.context['request']\n+        popups = []\n \n-    index = 0\n-    # Loop until no more title, url, or image is found\n-    while f'title_{index}' in request.data:\n-        title = request.data.get(f'title_{index}')\n-        url = request.data.get(f'url_{index}', '')  # Default to an empty string if no URL is provided\n-        image = request.FILES.get(f'image_{index}', None)  # Get the image for the corresponding index\n+        index = 0\n+        # Loop until no more title, url, or image is found\n+        while f'title_{index}' in request.data:\n+            title = request.data.get(f'title_{index}')\n+            url = request.data.get(f'url_{index}', '')  # Default to an empty string if no URL is provided\n+            image = request.FILES.get(f'image_{index}', None)  # Get the image for the corresponding index\n \n-        if not title:\n-            raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n-        # Create the popup instance\n-        if image:\n-            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-        else:\n-            popup_instance = Popup.objects.create(title=title, url=url)\n+            # Create the popup instance\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-        popup_instance.save()\n-        popups.append(popup_instance)\n+            popup_instance.save()\n+            popups.append(popup_instance)\n \n-        index += 1\n+            index += 1\n \n-    # Ensure at least one popup was created\n-    if not popups:\n-        raise serializers.ValidationError(\"No popups were created.\")\n+        # Ensure at least one popup was created\n+        if not popups:\n+            raise serializers.ValidationError(\"No popups were created.\")\n \n-    # Return the list of created popups\n-    return popups\n+        # Return the list of created popups\n+        return popups\n \n \n \n \n"
                },
                {
                    "date": 1725602434295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         fields = '__all__'\n \n     def create(self, validated_data):\n         request = self.context['request']\n+        print (request)\n         popups = []\n \n         index = 0\n         # Loop until no more title, url, or image is found\n"
                },
                {
                    "date": 1725602494181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,43 +16,43 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        request = self.context['request']\n-        print (request)\n-        popups = []\n+    request = self.context['request']\n \n-        index = 0\n-        # Loop until no more title, url, or image is found\n-        while f'title_{index}' in request.data:\n-            title = request.data.get(f'title_{index}')\n-            url = request.data.get(f'url_{index}', '')  # Default to an empty string if no URL is provided\n-            image = request.FILES.get(f'image_{index}', None)  # Get the image for the corresponding index\n+    # Log the incoming request data and files\n+    print(f\"Request data: {request.data}\")\n+    print(f\"Request files: {request.FILES}\")\n \n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n+    popups = []\n \n-            # Create the popup instance\n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+    index = 0\n+    while f'title_{index}' in request.data:\n+        title = request.data.get(f'title_{index}')\n+        url = request.data.get(f'url_{index}', '')\n+        image = request.FILES.get(f'image_{index}', None)\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n+        if not title:\n+            raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n-            index += 1\n+        if image:\n+            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+        else:\n+            popup_instance = Popup.objects.create(title=title, url=url)\n \n-        # Ensure at least one popup was created\n-        if not popups:\n-            raise serializers.ValidationError(\"No popups were created.\")\n+        popup_instance.save()\n+        popups.append(popup_instance)\n+        index += 1\n \n-        # Return the list of created popups\n-        return popups\n+    if not popups:\n+        raise serializers.ValidationError(\"No popups were created.\")\n \n+    return popups\n \n \n \n+\n+\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n"
                },
                {
                    "date": 1725602539053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,38 +16,38 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    request = self.context['request']\n+        request = self.context['request']\n \n-    # Log the incoming request data and files\n-    print(f\"Request data: {request.data}\")\n-    print(f\"Request files: {request.FILES}\")\n+        # Log the incoming request data and files\n+        print(f\"Request data: {request.data}\")\n+        print(f\"Request files: {request.FILES}\")\n \n-    popups = []\n+        popups = []\n \n-    index = 0\n-    while f'title_{index}' in request.data:\n-        title = request.data.get(f'title_{index}')\n-        url = request.data.get(f'url_{index}', '')\n-        image = request.FILES.get(f'image_{index}', None)\n+        index = 0\n+        while f'title_{index}' in request.data:\n+            title = request.data.get(f'title_{index}')\n+            url = request.data.get(f'url_{index}', '')\n+            image = request.FILES.get(f'image_{index}', None)\n \n-        if not title:\n-            raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n \n-        if image:\n-            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-        else:\n-            popup_instance = Popup.objects.create(title=title, url=url)\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-        popup_instance.save()\n-        popups.append(popup_instance)\n-        index += 1\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n \n-    if not popups:\n-        raise serializers.ValidationError(\"No popups were created.\")\n+        if not popups:\n+            raise serializers.ValidationError(\"No popups were created.\")\n \n-    return popups\n+        return popups\n \n \n \n \n"
                },
                {
                    "date": 1725606387871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,43 +16,32 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n+        popups = []\n         request = self.context['request']\n \n-        # Log the incoming request data and files\n-        print(f\"Request data: {request.data}\")\n-        print(f\"Request files: {request.FILES}\")\n-\n-        popups = []\n-\n         index = 0\n-        while f'title_{index}' in request.data:\n-            title = request.data.get(f'title_{index}')\n-            url = request.data.get(f'url_{index}', '')\n-            image = request.FILES.get(f'image_{index}', None)\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n \n             if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index + 1}.\")\n+                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n+# TODO return all the data in payload\n+        return popups[0]\n \n-        if not popups:\n-            raise serializers.ValidationError(\"No popups were created.\")\n-\n-        return popups\n-\n-\n-\n-\n-\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n@@ -65,5 +54,7 @@\n             \"image\": instance.image.url if instance.image else None,\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n-        }\n\\ No newline at end of file\n+        }\n+        \n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725606394747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,5 +56,5 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-        \n\\ No newline at end of file\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725606402641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,5 +56,44 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    \n\\ No newline at end of file\n+    def upda(self, validated_data):\n+        popups = []\n+        request = self.context['request']\n+\n+        index = 0\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n+\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n+\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n+# TODO return all the data in payload\n+        return popups[0]\n+\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725606420663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    def upda(self, validated_data):\n+    def cre(self, validated_data):\n         popups = []\n         request = self.context['request']\n \n         index = 0\n"
                },
                {
                    "date": 1725606513912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,44 +56,57 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    def cre(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n+    def update(self, instance, validated_data):\n+    request = self.context['request']\n+    index = 0\n+    popups = []\n \n-        index = 0\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n+    # Loop through the incoming data just like in the create method\n+    while f'data[{index}][title]' in request.data:\n+        title = request.data.get(f'data[{index}][title]')\n+        url = request.data.get(f'data[{index}][url]')\n+        image = request.FILES.get(f'data[{index}][image]', None)\n+        popup_id = request.data.get(f'data[{index}][id]', None)\n \n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+        # Check if a popup instance with the given ID exists\n+        try:\n+            popup_instance = Popup.objects.get(id=popup_id)\n+        except Popup.DoesNotExist:\n+            raise serializers.ValidationError(f\"Popup with id {popup_id} does not exist.\")\n \n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+        # Validate that the title is not empty\n+        if not title:\n+            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n\\ No newline at end of file\n-# TODO return all the data in payload\n-        return popups[0]\n+        # Update the fields\n+        popup_instance.title = title\n+        popup_instance.url = url\n \n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n+        # Update image if provided\n+        if image:\n+            popup_instance.image = image\n \n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n+        popup_instance.save()  # Save the updated instance\n+        popups.append(popup_instance)\n+\n+        index += 1\n+\n+    # Return the list of updated popups\n+    return popups\n+\n+def to_representation(self, instance):\n+    \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    if isinstance(instance, list):\n+        return [self.single_representation(popup) for popup in instance]\n+    return self.single_representation(instance)\n+\n+def single_representation(self, instance):\n+    return {\n+        \"id\": instance.id,\n+        \"title\": instance.title,\n+        \"image\": instance.image.url if instance.image else None,\n+        \"url\": instance.url,\n+        \"created_date\": instance.created_date,\n+        \"updated_date\": instance.updated_date\n+    }\n"
                },
                {
                    "date": 1725606521069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,56 +57,56 @@\n             \"updated_date\": instance.updated_date\n         }\n         \n     def update(self, instance, validated_data):\n-    request = self.context['request']\n-    index = 0\n-    popups = []\n+        request = self.context['request']\n+        index = 0\n+        popups = []\n \n-    # Loop through the incoming data just like in the create method\n-    while f'data[{index}][title]' in request.data:\n-        title = request.data.get(f'data[{index}][title]')\n-        url = request.data.get(f'data[{index}][url]')\n-        image = request.FILES.get(f'data[{index}][image]', None)\n-        popup_id = request.data.get(f'data[{index}][id]', None)\n+        # Loop through the incoming data just like in the create method\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n+            popup_id = request.data.get(f'data[{index}][id]', None)\n \n-        # Check if a popup instance with the given ID exists\n-        try:\n-            popup_instance = Popup.objects.get(id=popup_id)\n-        except Popup.DoesNotExist:\n-            raise serializers.ValidationError(f\"Popup with id {popup_id} does not exist.\")\n+            # Check if a popup instance with the given ID exists\n+            try:\n+                popup_instance = Popup.objects.get(id=popup_id)\n+            except Popup.DoesNotExist:\n+                raise serializers.ValidationError(f\"Popup with id {popup_id} does not exist.\")\n \n-        # Validate that the title is not empty\n-        if not title:\n-            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+            # Validate that the title is not empty\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-        # Update the fields\n-        popup_instance.title = title\n-        popup_instance.url = url\n+            # Update the fields\n+            popup_instance.title = title\n+            popup_instance.url = url\n \n-        # Update image if provided\n-        if image:\n-            popup_instance.image = image\n+            # Update image if provided\n+            if image:\n+                popup_instance.image = image\n \n-        popup_instance.save()  # Save the updated instance\n-        popups.append(popup_instance)\n+            popup_instance.save()  # Save the updated instance\n+            popups.append(popup_instance)\n \n-        index += 1\n+            index += 1\n \n-    # Return the list of updated popups\n-    return popups\n+        # Return the list of updated popups\n+        return popups\n \n-def to_representation(self, instance):\n-    \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    if isinstance(instance, list):\n-        return [self.single_representation(popup) for popup in instance]\n-    return self.single_representation(instance)\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n \n-def single_representation(self, instance):\n-    return {\n-        \"id\": instance.id,\n-        \"title\": instance.title,\n-        \"image\": instance.image.url if instance.image else None,\n-        \"url\": instance.url,\n-        \"created_date\": instance.created_date,\n-        \"updated_date\": instance.updated_date\n-    }\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n"
                },
                {
                    "date": 1725613568885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n                 raise serializers.ValidationError(f\"Popup with id {popup_id} does not exist.\")\n \n             # Validate that the title is not empty\n             if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                print(f\"Title is required for popup {index}.\")\n \n             # Update the fields\n             popup_instance.title = title\n             popup_instance.url = url\n"
                },
                {
                    "date": 1725613574412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n                 raise serializers.ValidationError(f\"Popup with id {popup_id} does not exist.\")\n \n             # Validate that the title is not empty\n             if not title:\n-                print(f\"Title is required for popup {index}.\")\n+                print(\"Title is required for popup {index}.\")\n \n             # Update the fields\n             popup_instance.title = title\n             popup_instance.url = url\n"
                },
                {
                    "date": 1725613584867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             # Check if a popup instance with the given ID exists\n             try:\n                 popup_instance = Popup.objects.get(id=popup_id)\n             except Popup.DoesNotExist:\n-                raise serializers.ValidationError(f\"Popup with id {popup_id} does not exist.\")\n+                print(f\"Popup with id {popup_id} does not exist.\")\n \n             # Validate that the title is not empty\n             if not title:\n                 print(\"Title is required for popup {index}.\")\n"
                },
                {
                    "date": 1725613590680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n                 print(f\"Popup with id {popup_id} does not exist.\")\n \n             # Validate that the title is not empty\n             if not title:\n-                print(\"Title is required for popup {index}.\")\n+                print(f\"Title is required for popup {index}.\")\n \n             # Update the fields\n             popup_instance.title = title\n             popup_instance.url = url\n"
                },
                {
                    "date": 1725613655265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n \n             if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                Print(f\"Title is required for popup {index}.\")\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # popup_instance.url = popup_instance.image.url\n"
                },
                {
                    "date": 1725613719421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n \n             if not title:\n-                Print(f\"Title is required for popup {index}.\")\n+                print(f\"Title is required for popup {index}.\")\n \n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # popup_instance.url = popup_instance.image.url\n@@ -56,57 +56,57 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    def update(self, instance, validated_data):\n-        request = self.context['request']\n-        index = 0\n-        popups = []\n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n \n-        # Loop through the incoming data just like in the create method\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n-            popup_id = request.data.get(f'data[{index}][id]', None)\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n \n-            # Check if a popup instance with the given ID exists\n-            try:\n-                popup_instance = Popup.objects.get(id=popup_id)\n-            except Popup.DoesNotExist:\n-                print(f\"Popup with id {popup_id} does not exist.\")\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n \n-            # Validate that the title is not empty\n-            if not title:\n-                print(f\"Title is required for popup {index}.\")\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n \n-            # Update the fields\n-            popup_instance.title = title\n-            popup_instance.url = url\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n \n-            # Update image if provided\n-            if image:\n-                popup_instance.image = image\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n \n-            popup_instance.save()  # Save the updated instance\n-            popups.append(popup_instance)\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n \n-            index += 1\n+    #         index += 1\n \n-        # Return the list of updated popups\n-        return popups\n+    #     # Return the list of updated popups\n+    #     return popups\n \n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n \n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725774480164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,32 +15,89 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n+    @transaction.atomic\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n \n-        index = 0\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n+        try:\n+            # Check if the content type is form data or JSON\n+            if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                data_entries = request.data.get('data', [])\n+                if isinstance(data_entries, list):\n+                    for index, data in enumerate(data_entries):\n+                        title = data.get('title')\n+                        url = data.get('url')\n \n-            if not title:\n-                print(f\"Title is required for popup {index}.\")\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n \n+                        # Debugging: Log to verify fields\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                        # Create and save popup\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n+                        popups.append(popup_instance)\n+\n+                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                else:\n+                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+            \n+            elif request.content_type.startswith('multipart/form-data'):\n+                # Handle form-encoded data\n+                index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: Log the title and URL\n+                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+\n+                    # Create and save popup\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                    # If you need to handle images later, you can add that logic here\n+                    if image:\n+                        popup_instance.image = image\n+                        popup_instance.save()\n+\n+                    popups.append(popup_instance)\n+                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    index += 1\n+            else:\n+                raise ValidationError(\"Unsupported content type.\")\n+\n+            # Return the saved popup instances\n+            return popups\n+        \n+        except Exception as e:\n+            # Rollback the transaction in case of error and log the issue\n+            transaction.set_rollback(True)\n+            print(f\"Error occurred: {e}\")\n+            raise\n+\n+    def create_popup_instance(self, title, url, image):\n+        \"\"\"Helper function to create a Popup instance.\"\"\"\n+        try:\n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # popup_instance.url = popup_instance.image.url\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n-# TODO return all the data in payload\n-        return popups[0]\n+            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+            return popup_instance\n+        except Exception as e:\n+            print(f\"Error while saving popup: {e}\")\n+            raise\n \n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n@@ -55,8 +112,9 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n+\n         \n     # def update(self, instance, validated_data):\n     #     request = self.context['request']\n     #     index = 0\n"
                },
                {
                    "date": 1725774495466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from rest_framework import serializers\n from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n \n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n"
                },
                {
                    "date": 1725774662812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,38 +18,17 @@\n         model = Popup\n         fields = '__all__'\n \n     @transaction.atomic\n-    def create(self, validated_data):\n+   def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n-\n+        data_entries = request.data.get('data', [])\n+        print(data_entries)\n         try:\n-            # Check if the content type is form data or JSON\n-            if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                data_entries = request.data.get('data', [])\n-                if isinstance(data_entries, list):\n-                    for index, data in enumerate(data_entries):\n-                        title = data.get('title')\n-                        url = data.get('url')\n-\n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        # Debugging: Log to verify fields\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                        # Create and save popup\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n-                        popups.append(popup_instance)\n-\n-                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                else:\n-                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-            \n-            elif request.content_type.startswith('multipart/form-data'):\n-                # Handle form-encoded data\n+            # Check if the request data is a list (array) or a single object\n+            if isinstance(request.data.get('data'), list):\n+                # Handle array type data\n                 index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n@@ -57,28 +36,47 @@\n \n                     if not title:\n                         raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                    # Debugging: Log the title and URL\n-                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+                    index += 1\n+            elif isinstance(data_entries, list):\n+                 # Handle array type data\n+                for index, data in enumerate(data_entries):\n+                    title = data.get('title')\n+                    url = data.get('url')\n \n-                    # Create and save popup\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: Log to verify fields\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                    # Attempt to create the popup instance without image\n                     popup_instance = Popup.objects.create(title=title, url=url)\n+                    popup_instance.save()\n \n-                    # If you need to handle images later, you can add that logic here\n-                    if image:\n-                        popup_instance.image = image\n-                        popup_instance.save()\n-\n                     popups.append(popup_instance)\n-                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    index += 1\n+                    print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n             else:\n-                raise ValidationError(\"Unsupported content type.\")\n+                # Handle single object data\n+                title = request.data.get('data[title]')\n+                url = request.data.get('data[url]')\n+                image = request.FILES.get('data[image]', None)\n \n+                if not title:\n+                    raise ValidationError(\"Title is required for popup.\")\n+\n+                # Debugging: print out the data to verify\n+                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                popup_instance = self.create_popup_instance(title, url, image)\n+                popups.append(popup_instance)\n+\n             # Return the saved popup instances\n             return popups\n-        \n         except Exception as e:\n             # Rollback the transaction in case of error and log the issue\n             transaction.set_rollback(True)\n             print(f\"Error occurred: {e}\")\n@@ -114,9 +112,8 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n-\n         \n     # def update(self, instance, validated_data):\n     #     request = self.context['request']\n     #     index = 0\n"
                },
                {
                    "date": 1725774671082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,17 +103,17 @@\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n         return self.single_representation(instance)\n \n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n+        def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n         \n     # def update(self, instance, validated_data):\n     #     request = self.context['request']\n     #     index = 0\n"
                },
                {
                    "date": 1725774687406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,22 +18,22 @@\n         model = Popup\n         fields = '__all__'\n \n     @transaction.atomic\n-   def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n-        data_entries = request.data.get('data', [])\n-        print(data_entries)\n-        try:\n-            # Check if the request data is a list (array) or a single object\n-            if isinstance(request.data.get('data'), list):\n-                # Handle array type data\n-                index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if isinstance(request.data.get('data'), list):\n+                    # Handle array type data\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n \n                     if not title:\n                         raise ValidationError(f\"Title is required for popup {index}.\")\n \n"
                },
                {
                    "date": 1725774697902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if isinstance(request.data.get('data'), list):\n+                    # Handle array type data\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        # Debugging: print out the data to verify\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                        popup_instance = self.create_popup_instance(title, url, image)\n+                        popups.append(popup_instance)\n+                        index += 1\n+                elif isinstance(data_entries, list):\n+                    # Handle array type data\n+                    for index, data in enumerate(data_entries):\n+                        title = data.get('title')\n+                        url = data.get('url')\n+\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        # Debugging: Log to verify fields\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                        # Attempt to create the popup instance without image\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n+                        popup_instance.save()\n+\n+                        popups.append(popup_instance)\n+                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                else:\n+                    # Handle single object data\n+                    title = request.data.get('data[title]')\n+                    url = request.data.get('data[url]')\n+                    image = request.FILES.get('data[image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(\"Title is required for popup.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+\n+                # Return the saved popup instances\n+                return popups\n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+        def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n+\n+        def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725774704090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,13 +97,13 @@\n             except Exception as e:\n                 print(f\"Error while saving popup: {e}\")\n                 raise\n \n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n+        def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n \n         def single_representation(self, instance):\n             return {\n                 \"id\": instance.id,\n@@ -166,173 +166,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if isinstance(request.data.get('data'), list):\n-                    # Handle array type data\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n-                    popups.append(popup_instance)\n-                    index += 1\n-            elif isinstance(data_entries, list):\n-                 # Handle array type data\n-                for index, data in enumerate(data_entries):\n-                    title = data.get('title')\n-                    url = data.get('url')\n-\n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: Log to verify fields\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                    # Attempt to create the popup instance without image\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-                    popup_instance.save()\n-\n-                    popups.append(popup_instance)\n-                    print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-            else:\n-                # Handle single object data\n-                title = request.data.get('data[title]')\n-                url = request.data.get('data[url]')\n-                image = request.FILES.get('data[image]', None)\n-\n-                if not title:\n-                    raise ValidationError(\"Title is required for popup.\")\n-\n-                # Debugging: print out the data to verify\n-                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n-                popup_instance = self.create_popup_instance(title, url, image)\n-                popups.append(popup_instance)\n-\n-            # Return the saved popup instances\n-            return popups\n-        except Exception as e:\n-            # Rollback the transaction in case of error and log the issue\n-            transaction.set_rollback(True)\n-            print(f\"Error occurred: {e}\")\n-            raise\n-\n-    def create_popup_instance(self, title, url, image):\n-        \"\"\"Helper function to create a Popup instance.\"\"\"\n-        try:\n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n-\n-            popup_instance.save()\n-            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-            return popup_instance\n-        except Exception as e:\n-            print(f\"Error while saving popup: {e}\")\n-            raise\n-\n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n-\n-        def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725774731963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n                 transaction.set_rollback(True)\n                 print(f\"Error occurred: {e}\")\n                 raise\n \n-        def create_popup_instance(self, title, url, image):\n+    def create_popup_instance(self, title, url, image):\n             \"\"\"Helper function to create a Popup instance.\"\"\"\n             try:\n                 if image:\n                     popup_instance = Popup.objects.create(title=title, image=image, url=url)\n"
                },
                {
                    "date": 1725774737308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if isinstance(request.data.get('data'), list):\n+                    # Handle array type data\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        # Debugging: print out the data to verify\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                        popup_instance = self.create_popup_instance(title, url, image)\n+                        popups.append(popup_instance)\n+                        index += 1\n+                elif isinstance(data_entries, list):\n+                    # Handle array type data\n+                    for index, data in enumerate(data_entries):\n+                        title = data.get('title')\n+                        url = data.get('url')\n+\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        # Debugging: Log to verify fields\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                        # Attempt to create the popup instance without image\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n+                        popup_instance.save()\n+\n+                        popups.append(popup_instance)\n+                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                else:\n+                    # Handle single object data\n+                    title = request.data.get('data[title]')\n+                    url = request.data.get('data[url]')\n+                    image = request.FILES.get('data[image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(\"Title is required for popup.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+\n+                # Return the saved popup instances\n+                return popups\n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725774913724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,26 +25,12 @@\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n-                if isinstance(request.data.get('data'), list):\n-                    # Handle array type data\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        # Debugging: print out the data to verify\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                        popup_instance = self.create_popup_instance(title, url, image)\n-                        popups.append(popup_instance)\n-                        index += 1\n-                elif isinstance(data_entries, list):\n-                    # Handle array type data\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                data_entries = request.data.get('data', [])\n+                if isinstance(data_entries, list):\n                     for index, data in enumerate(data_entries):\n                         title = data.get('title')\n                         url = data.get('url')\n \n@@ -53,15 +39,16 @@\n \n                         # Debugging: Log to verify fields\n                         print(f\"Creating popup {index} with title: {title}, url: {url}\")\n \n-                        # Attempt to create the popup instance without image\n+                        # Create and save popup\n                         popup_instance = Popup.objects.create(title=title, url=url)\n-                        popup_instance.save()\n+                        popups.append(popup_instance)\n \n-                        popups.append(popup_instance)\n                         print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                 else:\n+                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                else:\n                     # Handle single object data\n                     title = request.data.get('data[title]')\n                     url = request.data.get('data[url]')\n                     image = request.FILES.get('data[image]', None)\n@@ -166,173 +153,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if isinstance(request.data.get('data'), list):\n-                    # Handle array type data\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        # Debugging: print out the data to verify\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                        popup_instance = self.create_popup_instance(title, url, image)\n-                        popups.append(popup_instance)\n-                        index += 1\n-                elif isinstance(data_entries, list):\n-                    # Handle array type data\n-                    for index, data in enumerate(data_entries):\n-                        title = data.get('title')\n-                        url = data.get('url')\n-\n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        # Debugging: Log to verify fields\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                        # Attempt to create the popup instance without image\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n-                        popup_instance.save()\n-\n-                        popups.append(popup_instance)\n-                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                else:\n-                    # Handle single object data\n-                    title = request.data.get('data[title]')\n-                    url = request.data.get('data[url]')\n-                    image = request.FILES.get('data[image]', None)\n-\n-                    if not title:\n-                        raise ValidationError(\"Title is required for popup.\")\n-\n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n-                    popups.append(popup_instance)\n-\n-                # Return the saved popup instances\n-                return popups\n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n-        def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n-\n-        def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725774925585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n                         print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                 else:\n                     raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                else:\n+             else:\n                     # Handle single object data\n                     title = request.data.get('data[title]')\n                     url = request.data.get('data[url]')\n                     image = request.FILES.get('data[image]', None)\n"
                },
                {
                    "date": 1725774935583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n                         print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                 else:\n                     raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-             else:\n+                else:\n                     # Handle single object data\n                     title = request.data.get('data[title]')\n                     url = request.data.get('data[url]')\n                     image = request.FILES.get('data[image]', None)\n"
                },
                {
                    "date": 1725774942592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,11 @@\n                         popup_instance = Popup.objects.create(title=title, url=url)\n                         popups.append(popup_instance)\n \n                         print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                # else:\n+                #     raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n-                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                else:\n                     # Handle single object data\n                     title = request.data.get('data[title]')\n                     url = request.data.get('data[url]')\n                     image = request.FILES.get('data[image]', None)\n"
                },
                {
                    "date": 1725774954768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,27 +27,27 @@\n             try:\n                 # Check if the request data is a list (array) or a single object\n                 if request.content_type == 'application/json':\n                 # Handle JSON array data\n-                data_entries = request.data.get('data', [])\n-                if isinstance(data_entries, list):\n-                    for index, data in enumerate(data_entries):\n-                        title = data.get('title')\n-                        url = data.get('url')\n+                    data_entries = request.data.get('data', [])\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n \n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                        # Debugging: Log to verify fields\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n \n-                        # Create and save popup\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n-                        popups.append(popup_instance)\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n \n-                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                # else:\n-                #     raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    # else:\n+                    #     raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n                     # Handle single object data\n                     title = request.data.get('data[title]')\n                     url = request.data.get('data[url]')\n"
                },
                {
                    "date": 1725774993215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n                             popup_instance = Popup.objects.create(title=title, url=url)\n                             popups.append(popup_instance)\n \n                             print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    # else:\n-                    #     raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n                     # Handle single object data\n                     title = request.data.get('data[title]')\n                     url = request.data.get('data[url]')\n"
                },
                {
                    "date": 1725775021016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    data_entries = request.data.get('data', [])\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n+\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n+\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                else:\n+                    index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: Log the title and URL\n+                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+\n+                    # Create and save popup\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                    # If you need to handle images later, you can add that logic here\n+                    if image:\n+                        popup_instance.image = image\n+                        popup_instance.save()\n+\n+                    popups.append(popup_instance)\n+                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    index += 1\n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725775044060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,10 @@\n \n                     popups.append(popup_instance)\n                     print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                     index += 1\n+                \n+                    \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n                 print(f\"Error occurred: {e}\")\n@@ -161,160 +163,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    data_entries = request.data.get('data', [])\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                else:\n-                    # Handle single object data\n-                    title = request.data.get('data[title]')\n-                    url = request.data.get('data[url]')\n-                    image = request.FILES.get('data[image]', None)\n-\n-                    if not title:\n-                        raise ValidationError(\"Title is required for popup.\")\n-\n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n-                    popups.append(popup_instance)\n-\n-                # Return the saved popup instances\n-                return popups\n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n-    def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725775057860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,12 @@\n \n                     popups.append(popup_instance)\n                     print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                     index += 1\n-                \n                     \n+                    return popups[0]\n+\n+                    \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n                 print(f\"Error occurred: {e}\")\n"
                },
                {
                    "date": 1725775067040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n                     popups.append(popup_instance)\n                     print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                     index += 1\n                     \n-                    return popups[0]\n+                return popups[0]\n \n                     \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n"
                },
                {
                    "date": 1725775080692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n                             popup_instance = Popup.objects.create(title=title, url=url)\n                             popups.append(popup_instance)\n \n                             print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n                     index = 0\n"
                },
                {
                    "date": 1725775086567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n                             popups.append(popup_instance)\n \n                             print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                             \n+                            return pop\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n                     index = 0\n"
                },
                {
                    "date": 1725775097797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n                             popups.append(popup_instance)\n \n                             print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                             \n-                            return pop\n+                            return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n                     index = 0\n@@ -73,9 +73,9 @@\n                     popups.append(popup_instance)\n                     print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                     index += 1\n                     \n-                return popups[0]\n+                \n \n                     \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n"
                },
                {
                    "date": 1725775103264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,12 +72,10 @@\n \n                     popups.append(popup_instance)\n                     print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                     index += 1\n-                    \n-                \n-\n-                    \n+                    return popups[0]\n+          \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n                 print(f\"Error occurred: {e}\")\n"
                },
                {
                    "date": 1725776446551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,6 @@\n from rest_framework import serializers\n from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n \n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n@@ -17,102 +15,48 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n-    @transaction.atomic\n     def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    data_entries = request.data.get('data', [])\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n+        popups = []\n+        request = self.context['request']\n \n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n+        index = 0\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n \n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+            if not title:\n+                print(f\"Title is required for popup {index}.\")\n \n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                            return popups\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                else:\n-                    index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n+# TODO return all the data in payload\n+        return popups[0]\n \n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: Log the title and URL\n-                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n-\n-                    # Create and save popup\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                    # If you need to handle images later, you can add that logic here\n-                    if image:\n-                        popup_instance.image = image\n-                        popup_instance.save()\n-\n-                    popups.append(popup_instance)\n-                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    index += 1\n-                    return popups[0]\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n     def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n \n     def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n         \n     # def update(self, instance, validated_data):\n     #     request = self.context['request']\n     #     index = 0\n"
                },
                {
                    "date": 1725776607342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,57 +56,57 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n+    def update(self, instance, validated_data):\n+        request = self.context['request']\n+        index = 0\n+        popups = []\n \n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+        # Loop through the incoming data just like in the create method\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n+            popup_id = request.data.get(f'data[{index}][id]', None)\n \n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n+            # Check if a popup instance with the given ID exists\n+            try:\n+                popup_instance = Popup.objects.get(id=popup_id)\n+            except Popup.DoesNotExist:\n+                print(f\"Popup with id {popup_id} does not exist.\")\n \n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n+            # Validate that the title is not empty\n+            if not title:\n+                print(f\"Title is required for popup {index}.\")\n \n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n+            # Update the fields\n+            popup_instance.title = title\n+            popup_instance.url = url\n \n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n+            # Update image if provided\n+            if image:\n+                popup_instance.image = image\n \n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n+            popup_instance.save()  # Save the updated instance\n+            popups.append(popup_instance)\n \n-    #         index += 1\n+            index += 1\n \n-    #     # Return the list of updated popups\n-    #     return popups\n+        # Return the list of updated popups\n+        return popups\n \n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n \n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n"
                },
                {
                    "date": 1725780972170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from rest_framework import serializers\n from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n \n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n@@ -15,98 +17,153 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n+    @transaction.atomic\n     def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if isinstance(request.data.get('data'), list):\n+                    # Handle array type data\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n \n-        index = 0\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n \n-            if not title:\n-                print(f\"Title is required for popup {index}.\")\n+                        # Debugging: print out the data to verify\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                        popup_instance = self.create_popup_instance(title, url, image)\n+                        popups.append(popup_instance)\n+                        index += 1\n+                elif isinstance(data_entries, list):\n+                    # Handle array type data\n+                    for index, data in enumerate(data_entries):\n+                        title = data.get('title')\n+                        url = data.get('url')\n \n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n-# TODO return all the data in payload\n-        return popups[0]\n+                        # Debugging: Log to verify fields\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n \n+                        # Attempt to create the popup instance without image\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n+                        popup_instance.save()\n+\n+                        popups.append(popup_instance)\n+                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                else:\n+                    # Handle single object data\n+                    title = request.data.get('data[title]')\n+                    url = request.data.get('data[url]')\n+                    image = request.FILES.get('data[image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(\"Title is required for popup.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+\n+                # Return the saved popup instances\n+                return popups\n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n     def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n \n     def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n         \n-    def update(self, instance, validated_data):\n-        request = self.context['request']\n-        index = 0\n-        popups = []\n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n \n-        # Loop through the incoming data just like in the create method\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n-            popup_id = request.data.get(f'data[{index}][id]', None)\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n \n-            # Check if a popup instance with the given ID exists\n-            try:\n-                popup_instance = Popup.objects.get(id=popup_id)\n-            except Popup.DoesNotExist:\n-                print(f\"Popup with id {popup_id} does not exist.\")\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n \n-            # Validate that the title is not empty\n-            if not title:\n-                print(f\"Title is required for popup {index}.\")\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n \n-            # Update the fields\n-            popup_instance.title = title\n-            popup_instance.url = url\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n \n-            # Update image if provided\n-            if image:\n-                popup_instance.image = image\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n \n-            popup_instance.save()  # Save the updated instance\n-            popups.append(popup_instance)\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n \n-            index += 1\n+    #         index += 1\n \n-        # Return the list of updated popups\n-        return popups\n+    #     # Return the list of updated popups\n+    #     return popups\n \n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n \n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725781049313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,58 +25,57 @@\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n-                if isinstance(request.data.get('data'), list):\n-                    # Handle array type data\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    data_entries = request.data.get('data', [])\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n \n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                        # Debugging: print out the data to verify\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                        popup_instance = self.create_popup_instance(title, url, image)\n-                        popups.append(popup_instance)\n-                        index += 1\n-                elif isinstance(data_entries, list):\n-                    # Handle array type data\n-                    for index, data in enumerate(data_entries):\n-                        title = data.get('title')\n-                        url = data.get('url')\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n \n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n \n-                        # Debugging: Log to verify fields\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                        # Attempt to create the popup instance without image\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n-                        popup_instance.save()\n-\n-                        popups.append(popup_instance)\n-                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n+                            return popups\n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 else:\n-                    # Handle single object data\n-                    title = request.data.get('data[title]')\n-                    url = request.data.get('data[url]')\n-                    image = request.FILES.get('data[image]', None)\n+                    index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n \n                     if not title:\n-                        raise ValidationError(\"Title is required for popup.\")\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n+                    # Debugging: Log the title and URL\n+                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+\n+                    # Create and save popup\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                    # If you need to handle images later, you can add that logic here\n+                    if image:\n+                        popup_instance.image = image\n+                        popup_instance.save()\n+\n                     popups.append(popup_instance)\n-\n-                # Return the saved popup instances\n-                return popups\n+                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    index += 1\n+                    return popups[0]\n+          \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n                 print(f\"Error occurred: {e}\")\n"
                },
                {
                    "date": 1725781078682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                             \n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                else:\n+                elif \n                     index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725781089963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                             \n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif \n+                elif request.content_type == \n                     index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725781158887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                             \n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == \n+                elif request.content_type == '/'\n                     index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725781171353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                             \n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == '/'\n+                elif request.content_type == 'multipart/form-data'\n                     index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725781192763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                             \n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data'\n+                elif request.content_type == 'multipart/form-data':\n                     index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725781198092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    data_entries = request.data.get('data', [])\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n+\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n+\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n+                            return popups\n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                elif request.content_type == 'multipart/form-data':\n+                    index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: Log the title and URL\n+                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+\n+                    # Create and save popup\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                    # If you need to handle images later, you can add that logic here\n+                    if image:\n+                        popup_instance.image = image\n+                        popup_instance.save()\n+\n+                    popups.append(popup_instance)\n+                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    index += 1\n+                    return popups[0]\n+          \n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725781215364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,31 +50,31 @@\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n                     index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n \n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                    # Debugging: Log the title and URL\n-                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+                        # Debugging: Log the title and URL\n+                        print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n \n-                    # Create and save popup\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n+                        # Create and save popup\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n \n-                    # If you need to handle images later, you can add that logic here\n-                    if image:\n-                        popup_instance.image = image\n-                        popup_instance.save()\n+                        # If you need to handle images later, you can add that logic here\n+                        if image:\n+                            popup_instance.image = image\n+                            popup_instance.save()\n \n-                    popups.append(popup_instance)\n-                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    index += 1\n-                    return popups[0]\n+                        popups.append(popup_instance)\n+                        print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                        index += 1\n+                        return popups[0]\n           \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n@@ -165,172 +165,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    data_entries = request.data.get('data', [])\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                            return popups\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data':\n-                    index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: Log the title and URL\n-                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n-\n-                    # Create and save popup\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                    # If you need to handle images later, you can add that logic here\n-                    if image:\n-                        popup_instance.image = image\n-                        popup_instance.save()\n-\n-                    popups.append(popup_instance)\n-                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    index += 1\n-                    return popups[0]\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n-    def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725781224887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n                         popups.append(popup_instance)\n                         print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                         index += 1\n                         return popups[0]\n+                \n           \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n"
                },
                {
                    "date": 1725781230581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,10 @@\n                         popups.append(popup_instance)\n                         print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                         index += 1\n                         return popups[0]\n-                \n+                else:\n+                    \n           \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n"
                },
                {
                    "date": 1725781244080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n                         print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                         index += 1\n                         return popups[0]\n                 else:\n-                    \n+                    print(\"handle Single Dtaa\")\n           \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n"
                },
                {
                    "date": 1725781367975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                         # Debugging: Log the title and URL\n                         print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n \n                         # Create and save popup\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n+                        popup_instance = Popup.objects.create(title=title,  url=url)\n \n                         # If you need to handle images later, you can add that logic here\n                         if image:\n                             popup_instance.image = image\n@@ -74,9 +74,9 @@\n                         print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                         index += 1\n                         return popups[0]\n                 else:\n-                    print(\"handle Single Dtaa\")\n+                    print(\"handle Single Data\")\n           \n             except Exception as e:\n                 # Rollback the transaction in case of error and log the issue\n                 transaction.set_rollback(True)\n"
                },
                {
                    "date": 1725781409389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,30 +51,26 @@\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n                     index = 0\n                     while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n \n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n+            if not title:\n+                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-                        # Debugging: Log the title and URL\n-                        print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-                        # Create and save popup\n-                        popup_instance = Popup.objects.create(title=title,  url=url)\n-\n-                        # If you need to handle images later, you can add that logic here\n-                        if image:\n-                            popup_instance.image = image\n-                            popup_instance.save()\n-\n-                        popups.append(popup_instance)\n-                        print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                        index += 1\n-                        return popups[0]\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n+# TODO return all the data in payload\n+        return popups[0]\n                 else:\n                     print(\"handle Single Data\")\n           \n             except Exception as e:\n"
                },
                {
                    "date": 1725781416255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n # TODO return all the data in payload\n-        return popups[0]\n+        r  eturn popups[0]\n                 else:\n                     print(\"handle Single Data\")\n           \n             except Exception as e:\n"
                },
                {
                    "date": 1725781421605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n # TODO return all the data in payload\n-        r  eturn popups[0]\n+            return popups[0]\n                 else:\n                     print(\"handle Single Data\")\n           \n             except Exception as e:\n"
                },
                {
                    "date": 1725781427504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n # TODO return all the data in payload\n-            return popups[0]\n+            return popups[0]    \n                 else:\n                     print(\"handle Single Data\")\n           \n             except Exception as e:\n"
                },
                {
                    "date": 1725781437942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,26 +51,26 @@\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n                     index = 0\n                     while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n \n-            if not title:\n-                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                        if not title:\n+                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+                        if image:\n+                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                            popup_instance.url = popup_instance.image.url\n+                        else:\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n \n-            popup_instance.save()\n-            popups.append(popup_instance)\n-            index += 1\n-# TODO return all the data in payload\n-            return popups[0]    \n+                        popup_instance.save()\n+                        popups.append(popup_instance)\n+                        index += 1\n+            # TODO return all the data in payload\n+                        return popups[0]    \n                 else:\n                     print(\"handle Single Data\")\n           \n             except Exception as e:\n"
                },
                {
                    "date": 1725781445527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n                         popup_instance.save()\n                         popups.append(popup_instance)\n                         index += 1\n             # TODO return all the data in payload\n-                        return popups[0]    \n+                    return popups[0]    \n                 else:\n                     print(\"handle Single Data\")\n           \n             except Exception as e:\n"
                },
                {
                    "date": 1725785060582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,9 @@\n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n+                    print()\n                     index = 0\n                     while f'data[{index}][title]' in request.data:\n                         title = request.data.get(f'data[{index}][title]')\n                         url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725785072259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n                 if request.content_type == 'application/json':\n+                     print(\"multipart\")\n                 # Handle JSON array data\n                     data_entries = request.data.get('data', [])\n                     if isinstance(data_entries, list):\n                         for index, data in enumerate(data_entries):\n@@ -49,9 +50,9 @@\n                             return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n-                    print()\n+                    print(\"multipart\")\n                     index = 0\n                     while f'data[{index}][title]' in request.data:\n                         title = request.data.get(f'data[{index}][title]')\n                         url = request.data.get(f'data[{index}][url]')\n"
                },
                {
                    "date": 1725785080440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n                 if request.content_type == 'application/json':\n-                     print(\"multipart\")\n+                    \n                 # Handle JSON array data\n                     data_entries = request.data.get('data', [])\n                     if isinstance(data_entries, list):\n                         for index, data in enumerate(data_entries):\n"
                },
                {
                    "date": 1725785092547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n                 if request.content_type == 'application/json':\n-                    \n                 # Handle JSON array data\n+                 print(\"json\")\n                     data_entries = request.data.get('data', [])\n                     if isinstance(data_entries, list):\n                         for index, data in enumerate(data_entries):\n                             title = data.get('title')\n"
                },
                {
                    "date": 1725785098176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,11 @@\n             try:\n                 # Check if the request data is a list (array) or a single object\n                 if request.content_type == 'application/json':\n                 # Handle JSON array data\n-                 print(\"json\")\n+                    print(\"json\")\n                     data_entries = request.data.get('data', [])\n+                     print(\"json\")\n                     if isinstance(data_entries, list):\n                         for index, data in enumerate(data_entries):\n                             title = data.get('title')\n                             url = data.get('url')\n"
                },
                {
                    "date": 1725785106272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    print(\"json\")\n+                    data_entries = request.data.get('data', [])\n+                    print(\"data_entries\")\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n+\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n+\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n+                            return popups\n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                elif request.content_type == 'multipart/form-data':\n+                    print(\"multipart\")\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                        if not title:\n+                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        if image:\n+                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                            popup_instance.url = popup_instance.image.url\n+                        else:\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                        popup_instance.save()\n+                        popups.append(popup_instance)\n+                        index += 1\n+            # TODO return all the data in payload\n+                    return popups[0]    \n+                else:\n+                    print(\"handle Single Data\")\n+          \n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725785117052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n                 if request.content_type == 'application/json':\n                 # Handle JSON array data\n                     print(\"json\")\n                     data_entries = request.data.get('data', [])\n-                    print(\"data_entries\")\n+                    print(\"data_entries\",data_entries)\n                     if isinstance(data_entries, list):\n                         for index, data in enumerate(data_entries):\n                             title = data.get('title')\n                             url = data.get('url')\n@@ -166,173 +166,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    print(\"json\")\n-                    data_entries = request.data.get('data', [])\n-                     print(\"json\")\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                            return popups\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data':\n-                    print(\"multipart\")\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                        if not title:\n-                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        if image:\n-                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                            popup_instance.url = popup_instance.image.url\n-                        else:\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                        popup_instance.save()\n-                        popups.append(popup_instance)\n-                        index += 1\n-            # TODO return all the data in payload\n-                    return popups[0]    \n-                else:\n-                    print(\"handle Single Data\")\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n-    def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725785197589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n             popups = []\n             request = self.context['request']\n+            print\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n"
                },
                {
                    "date": 1725785203543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            print(\"request\")\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    print(\"json\")\n+                    data_entries = request.data.get('data', [])\n+                    print(\"data_entries\",data_entries)\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n+\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n+\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n+                            return popups\n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                elif request.content_type == 'multipart/form-data':\n+                    print(\"multipart\")\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                        if not title:\n+                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        if image:\n+                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                            popup_instance.url = popup_instance.image.url\n+                        else:\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                        popup_instance.save()\n+                        popups.append(popup_instance)\n+                        index += 1\n+            # TODO return all the data in payload\n+                    return popups[0]    \n+                else:\n+                    print(\"handle Single Data\")\n+          \n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725785208957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n             popups = []\n             request = self.context['request']\n-            print(\"request\")\n+            print(\"request\",re)\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n@@ -167,174 +167,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            print\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    print(\"json\")\n-                    data_entries = request.data.get('data', [])\n-                    print(\"data_entries\",data_entries)\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                            return popups\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data':\n-                    print(\"multipart\")\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                        if not title:\n-                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        if image:\n-                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                            popup_instance.url = popup_instance.image.url\n-                        else:\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                        popup_instance.save()\n-                        popups.append(popup_instance)\n-                        index += 1\n-            # TODO return all the data in payload\n-                    return popups[0]    \n-                else:\n-                    print(\"handle Single Data\")\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n-    def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725785217618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n             popups = []\n             request = self.context['request']\n-            print(\"request\",re)\n+            print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n"
                },
                {
                    "date": 1725785425371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+            popups = []\n+            request = self.context['request']\n+            print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    print(\"json\")\n+                    data_entries = request.data.get('data', [])\n+                    print(\"data_entries\",data_entries)\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n+\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n+\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n+                            return popups[0]  \n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                elif request.content_type == 'multipart/form-data':\n+                    print(\"multipart\")\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                        if not title:\n+                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        if image:\n+                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                            popup_instance.url = popup_instance.image.url\n+                        else:\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                        popup_instance.save()\n+                        popups.append(popup_instance)\n+                        index += 1\n+            # TODO return all the data in payload\n+                    return popups[0]    \n+                else:\n+                    print(\"handle Single Data\")\n+          \n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n+    def create_popup_instance(self, title, url, image):\n+            \"\"\"Helper function to create a Popup instance.\"\"\"\n+            try:\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    # popup_instance.url = popup_instance.image.url\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                popup_instance.save()\n+                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+                return popup_instance\n+            except Exception as e:\n+                print(f\"Error while saving popup: {e}\")\n+                raise\n+\n+    def to_representation(self, instance):\n+            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+            if isinstance(instance, list):\n+                return [self.single_representation(popup) for popup in instance]\n+            return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+            return {\n+                \"id\": instance.id,\n+                \"title\": instance.title,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"url\": instance.url,\n+                \"created_date\": instance.created_date,\n+                \"updated_date\": instance.updated_date\n+            }\n+        \n+    # def update(self, instance, validated_data):\n+    #     request = self.context['request']\n+    #     index = 0\n+    #     popups = []\n+\n+    #     # Loop through the incoming data just like in the create method\n+    #     while f'data[{index}][title]' in request.data:\n+    #         title = request.data.get(f'data[{index}][title]')\n+    #         url = request.data.get(f'data[{index}][url]')\n+    #         image = request.FILES.get(f'data[{index}][image]', None)\n+    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+\n+    #         # Check if a popup instance with the given ID exists\n+    #         try:\n+    #             popup_instance = Popup.objects.get(id=popup_id)\n+    #         except Popup.DoesNotExist:\n+    #             print(f\"Popup with id {popup_id} does not exist.\")\n+\n+    #         # Validate that the title is not empty\n+    #         if not title:\n+    #             print(f\"Title is required for popup {index}.\")\n+\n+    #         # Update the fields\n+    #         popup_instance.title = title\n+    #         popup_instance.url = url\n+\n+    #         # Update image if provided\n+    #         if image:\n+    #             popup_instance.image = image\n+\n+    #         popup_instance.save()  # Save the updated instance\n+    #         popups.append(popup_instance)\n+\n+    #         index += 1\n+\n+    #     # Return the list of updated popups\n+    #     return popups\n+\n+    # def to_representation(self, instance):\n+    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+    #     if isinstance(instance, list):\n+    #         return [self.single_representation(popup) for popup in instance]\n+    #     return self.single_representation(instance)\n+\n+    # def single_representation(self, instance):\n+    #     return {\n+    #         \"id\": instance.id,\n+    #         \"title\": instance.title,\n+    #         \"image\": instance.image.url if instance.image else None,\n+    #         \"url\": instance.url,\n+    #         \"created_date\": instance.created_date,\n+    #         \"updated_date\": instance.updated_date\n+    #     }\n"
                },
                {
                    "date": 1725785440791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n                             popups.append(popup_instance)\n \n                             print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                             \n-                            return popups[0]  \n+                        return popups[0]  \n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n                     print(\"multipart\")\n@@ -167,174 +167,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    print(\"json\")\n-                    data_entries = request.data.get('data', [])\n-                    print(\"data_entries\",data_entries)\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                            return popups\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data':\n-                    print(\"multipart\")\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                        if not title:\n-                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        if image:\n-                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                            popup_instance.url = popup_instance.image.url\n-                        else:\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                        popup_instance.save()\n-                        popups.append(popup_instance)\n-                        index += 1\n-            # TODO return all the data in payload\n-                    return popups[0]    \n-                else:\n-                    print(\"handle Single Data\")\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n-    def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n-\n-    def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n-        \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n-\n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n-\n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n-\n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n-\n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n-\n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n-\n-    #         index += 1\n-\n-    #     # Return the list of updated popups\n-    #     return popups\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n-\n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n"
                },
                {
                    "date": 1725785468227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n             popups = []\n+            \n             request = self.context['request']\n             print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n"
                },
                {
                    "date": 1725785474888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,10 @@\n         fields = '__all__'\n \n     @transaction.atomic\n     def create(self, validated_data):\n+        print()\n             popups = []\n-            \n             request = self.context['request']\n             print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n"
                },
                {
                    "date": 1725785482266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         fields = '__all__'\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        print()\n+            print(\"line 23\")\n             popups = []\n             request = self.context['request']\n             print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n             data_entries = request.data.get('data', [])\n"
                },
                {
                    "date": 1725785517443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,72 +19,64 @@\n         fields = '__all__'\n \n     @transaction.atomic\n     def create(self, validated_data):\n-            print(\"line 23\")\n-            popups = []\n-            request = self.context['request']\n-            print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    print(\"json\")\n-                    data_entries = request.data.get('data', [])\n-                    print(\"data_entries\",data_entries)\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                        return popups[0]  \n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data':\n-                    print(\"multipart\")\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n-\n+        print(\"line 23\")\n+        popups = []\n+        request = self.context['request']\n+        print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n+        data_entries = request.data.get('data', [])\n+        print(data_entries)\n+        try:\n+            # Check if the request data is a list (array) or a single object\n+            if request.content_type == 'application/json':\n+            # Handle JSON array data\n+                print(\"json\")\n+                data_entries = request.data.get('data', [])\n+                print(\"data_entries\",data_entries)\n+                if isinstance(data_entries, list):\n+                    for index, data in enumerate(data_entries):\n+                        title = data.get('title')\n+                        url = data.get('url')\n                         if not title:\n-                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        if image:\n-                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                            popup_instance.url = popup_instance.image.url\n-                        else:\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                        popup_instance.save()\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n+                        # Debugging: Log to verify fields\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+                        # Create and save popup\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n                         popups.append(popup_instance)\n-                        index += 1\n-            # TODO return all the data in payload\n-                    return popups[0]    \n+                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                        \n+                    return popups[0]  \n                 else:\n-                    print(\"handle Single Data\")\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n-\n+                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+            elif request.content_type == 'multipart/form-data':\n+                print(\"multipart\")\n+                index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n+                    if not title:\n+                        raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                    if image:\n+                        popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                        popup_instance.url = popup_instance.image.url\n+                    else:\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n+                    popup_instance.save()\n+                    popups.append(popup_instance)\n+                    index += 1\n+        # TODO return all the data in payload\n+                return popups[0]    \n+            else:\n+                print(\"handle Single Data\")\n+        \n+        except Exception as e:\n+            # Rollback the transaction in case of error and log the issue\n+            transaction.set_rollback(True)\n+            print(f\"Error occurred: {e}\")\n+            raise\n     def create_popup_instance(self, title, url, image):\n             \"\"\"Helper function to create a Popup instance.\"\"\"\n             try:\n                 if image:\n"
                },
                {
                    "date": 1725785525306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n         except Exception as e:\n             # Rollback the transaction in case of error and log the issue\n             transaction.set_rollback(True)\n             print(f\"Error occurred: {e}\")\n-            raise\n+            raise e\n     def create_popup_instance(self, title, url, image):\n             \"\"\"Helper function to create a Popup instance.\"\"\"\n             try:\n                 if image:\n"
                },
                {
                    "date": 1725785568380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,63 +20,71 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n         print(\"line 23\")\n-        popups = []\n-        request = self.context['request']\n-        print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n-        data_entries = request.data.get('data', [])\n-        print(data_entries)\n-        try:\n-            # Check if the request data is a list (array) or a single object\n-            if request.content_type == 'application/json':\n-            # Handle JSON array data\n-                print(\"json\")\n-                data_entries = request.data.get('data', [])\n-                print(\"data_entries\",data_entries)\n-                if isinstance(data_entries, list):\n-                    for index, data in enumerate(data_entries):\n-                        title = data.get('title')\n-                        url = data.get('url')\n+            popups = []\n+            request = self.context['request']\n+            print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n+            data_entries = request.data.get('data', [])\n+            print(data_entries)\n+            try:\n+                # Check if the request data is a list (array) or a single object\n+                if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                    print(\"json\")\n+                    data_entries = request.data.get('data', [])\n+                    print(\"data_entries\",data_entries)\n+                    if isinstance(data_entries, list):\n+                        for index, data in enumerate(data_entries):\n+                            title = data.get('title')\n+                            url = data.get('url')\n+\n+                            if not title:\n+                                raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                            # Debugging: Log to verify fields\n+                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                            # Create and save popup\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+                            popups.append(popup_instance)\n+\n+                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                            \n+                        return popups[0]  \n+                    else:\n+                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+                elif request.content_type == 'multipart/form-data':\n+                    print(\"multipart\")\n+                    index = 0\n+                    while f'data[{index}][title]' in request.data:\n+                        title = request.data.get(f'data[{index}][title]')\n+                        url = request.data.get(f'data[{index}][url]')\n+                        image = request.FILES.get(f'data[{index}][image]', None)\n+\n                         if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n-                        # Debugging: Log to verify fields\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-                        # Create and save popup\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n+                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        if image:\n+                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                            popup_instance.url = popup_instance.image.url\n+                        else:\n+                            popup_instance = Popup.objects.create(title=title, url=url)\n+\n+                        popup_instance.save()\n                         popups.append(popup_instance)\n-                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                        \n-                    return popups[0]  \n+                        index += 1\n+            # TODO return all the data in payload\n+                    return popups[0]    \n                 else:\n-                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-            elif request.content_type == 'multipart/form-data':\n-                print(\"multipart\")\n-                index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n-                    if not title:\n-                        raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n-                    if image:\n-                        popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                        popup_instance.url = popup_instance.image.url\n-                    else:\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n-                    popup_instance.save()\n-                    popups.append(popup_instance)\n-                    index += 1\n-        # TODO return all the data in payload\n-                return popups[0]    \n-            else:\n-                print(\"handle Single Data\")\n-        \n-        except Exception as e:\n-            # Rollback the transaction in case of error and log the issue\n-            transaction.set_rollback(True)\n-            print(f\"Error occurred: {e}\")\n-            raise e\n+                    print(\"handle Single Data\")\n+          \n+            except Exception as e:\n+                # Rollback the transaction in case of error and log the issue\n+                transaction.set_rollback(True)\n+                print(f\"Error occurred: {e}\")\n+                raise\n+\n     def create_popup_instance(self, title, url, image):\n             \"\"\"Helper function to create a Popup instance.\"\"\"\n             try:\n                 if image:\n"
                },
                {
                    "date": 1725785574263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,21 +19,17 @@\n         fields = '__all__'\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        print(\"line 23\")\n             popups = []\n             request = self.context['request']\n-            print(\"request>>>>>>>>>>>>>>>>>>>>>>>>\",request)\n             data_entries = request.data.get('data', [])\n             print(data_entries)\n             try:\n                 # Check if the request data is a list (array) or a single object\n                 if request.content_type == 'application/json':\n                 # Handle JSON array data\n-                    print(\"json\")\n                     data_entries = request.data.get('data', [])\n-                    print(\"data_entries\",data_entries)\n                     if isinstance(data_entries, list):\n                         for index, data in enumerate(data_entries):\n                             title = data.get('title')\n                             url = data.get('url')\n@@ -49,32 +45,31 @@\n                             popups.append(popup_instance)\n \n                             print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n                             \n-                        return popups[0]  \n+                            return popups\n                     else:\n                         raise ValidationError(\"Expected a list of data entries for JSON array.\")\n                 elif request.content_type == 'multipart/form-data':\n-                    print(\"multipart\")\n                     index = 0\n                     while f'data[{index}][title]' in request.data:\n-                        title = request.data.get(f'data[{index}][title]')\n-                        url = request.data.get(f'data[{index}][url]')\n-                        image = request.FILES.get(f'data[{index}][image]', None)\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n \n-                        if not title:\n-                            raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                    if not title:\n+                        raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n \n-                        if image:\n-                            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                            popup_instance.url = popup_instance.image.url\n-                        else:\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n+                    if image:\n+                        popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                        popup_instance.url = popup_instance.image.url\n+                    else:\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n \n-                        popup_instance.save()\n-                        popups.append(popup_instance)\n-                        index += 1\n-            # TODO return all the data in payload\n+                    popup_instance.save()\n+                    popups.append(popup_instance)\n+                    index += 1\n+        # TODO return all the data in payload\n                     return popups[0]    \n                 else:\n                     print(\"handle Single Data\")\n           \n"
                },
                {
                    "date": 1725785581600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,91 +18,94 @@\n         model = Popup\n         fields = '__all__'\n \n     @transaction.atomic\n-    def create(self, validated_data):\n-            popups = []\n-            request = self.context['request']\n-            data_entries = request.data.get('data', [])\n-            print(data_entries)\n-            try:\n-                # Check if the request data is a list (array) or a single object\n-                if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                    data_entries = request.data.get('data', [])\n-                    if isinstance(data_entries, list):\n-                        for index, data in enumerate(data_entries):\n-                            title = data.get('title')\n-                            url = data.get('url')\n-\n-                            if not title:\n-                                raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                            # Debugging: Log to verify fields\n-                            print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                            # Create and save popup\n-                            popup_instance = Popup.objects.create(title=title, url=url)\n-                            popups.append(popup_instance)\n-\n-                            print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                            \n-                            return popups\n-                    else:\n-                        raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-                elif request.content_type == 'multipart/form-data':\n-                    index = 0\n-                    while f'data[{index}][title]' in request.data:\n+   def create(self, validated_data):\n+        popups = []\n+        request = self.context['request']\n+        data_entries = request.data.get('data', [])\n+        print(data_entries)\n+        try:\n+            # Check if the request data is a list (array) or a single object\n+            if isinstance(request.data.get('data'), list):\n+                # Handle array type data\n+                index = 0\n+                while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n                     image = request.FILES.get(f'data[{index}][image]', None)\n \n                     if not title:\n-                        raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                    if image:\n-                        popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                        popup_instance.url = popup_instance.image.url\n-                    else:\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+                    index += 1\n+            elif isinstance(data_entries, list):\n+                 # Handle array type data\n+                for index, data in enumerate(data_entries):\n+                    title = data.get('title')\n+                    url = data.get('url')\n \n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: Log to verify fields\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                    # Attempt to create the popup instance without image\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n                     popup_instance.save()\n+\n                     popups.append(popup_instance)\n-                    index += 1\n-        # TODO return all the data in payload\n-                    return popups[0]    \n-                else:\n-                    print(\"handle Single Data\")\n-          \n-            except Exception as e:\n-                # Rollback the transaction in case of error and log the issue\n-                transaction.set_rollback(True)\n-                print(f\"Error occurred: {e}\")\n-                raise\n+                    print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+            else:\n+                # Handle single object data\n+                title = request.data.get('data[title]')\n+                url = request.data.get('data[url]')\n+                image = request.FILES.get('data[image]', None)\n \n+                if not title:\n+                    raise ValidationError(\"Title is required for popup.\")\n+\n+                # Debugging: print out the data to verify\n+                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                popup_instance = self.create_popup_instance(title, url, image)\n+                popups.append(popup_instance)\n+\n+            # Return the saved popup instances\n+            return popups\n+        except Exception as e:\n+            # Rollback the transaction in case of error and log the issue\n+            transaction.set_rollback(True)\n+            print(f\"Error occurred: {e}\")\n+            raise\n+\n     def create_popup_instance(self, title, url, image):\n-            \"\"\"Helper function to create a Popup instance.\"\"\"\n-            try:\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                    # popup_instance.url = popup_instance.image.url\n-                else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n+        \"\"\"Helper function to create a Popup instance.\"\"\"\n+        try:\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-                popup_instance.save()\n-                print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-                return popup_instance\n-            except Exception as e:\n-                print(f\"Error while saving popup: {e}\")\n-                raise\n+            popup_instance.save()\n+            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+            return popup_instance\n+        except Exception as e:\n+            print(f\"Error while saving popup: {e}\")\n+            raise\n \n     def to_representation(self, instance):\n-            \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-            if isinstance(instance, list):\n-                return [self.single_representation(popup) for popup in instance]\n-            return self.single_representation(instance)\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n \n-    def single_representation(self, instance):\n+        def single_representation(self, instance):\n             return {\n                 \"id\": instance.id,\n                 \"title\": instance.title,\n                 \"image\": instance.image.url if instance.image else None,\n"
                },
                {
                    "date": 1725785590827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n from rest_framework import serializers\n from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n \n+\n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n         fields = '__all__'\n@@ -18,17 +17,38 @@\n         model = Popup\n         fields = '__all__'\n \n     @transaction.atomic\n-   def create(self, validated_data):\n+    def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n-        data_entries = request.data.get('data', [])\n-        print(data_entries)\n+\n         try:\n-            # Check if the request data is a list (array) or a single object\n-            if isinstance(request.data.get('data'), list):\n-                # Handle array type data\n+            # Check if the content type is form data or JSON\n+            if request.content_type == 'application/json':\n+                # Handle JSON array data\n+                data_entries = request.data.get('data', [])\n+                if isinstance(data_entries, list):\n+                    for index, data in enumerate(data_entries):\n+                        title = data.get('title')\n+                        url = data.get('url')\n+\n+                        if not title:\n+                            raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                        # Debugging: Log to verify fields\n+                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                        # Create and save popup\n+                        popup_instance = Popup.objects.create(title=title, url=url)\n+                        popups.append(popup_instance)\n+\n+                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                else:\n+                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n+            \n+            elif request.content_type.startswith('multipart/form-data'):\n+                # Handle form-encoded data\n                 index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n                     url = request.data.get(f'data[{index}][url]')\n@@ -36,47 +56,28 @@\n \n                     if not title:\n                         raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n-                    popups.append(popup_instance)\n-                    index += 1\n-            elif isinstance(data_entries, list):\n-                 # Handle array type data\n-                for index, data in enumerate(data_entries):\n-                    title = data.get('title')\n-                    url = data.get('url')\n+                    # Debugging: Log the title and URL\n+                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n \n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n+                    # Create and save popup\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n \n-                    # Debugging: Log to verify fields\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+                    # If you need to handle images later, you can add that logic here\n+                    if image:\n+                        popup_instance.image = image\n+                        popup_instance.save()\n \n-                    # Attempt to create the popup instance without image\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-                    popup_instance.save()\n-\n                     popups.append(popup_instance)\n-                    print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+                    index += 1\n             else:\n-                # Handle single object data\n-                title = request.data.get('data[title]')\n-                url = request.data.get('data[url]')\n-                image = request.FILES.get('data[image]', None)\n+                raise ValidationError(\"Unsupported content type.\")\n \n-                if not title:\n-                    raise ValidationError(\"Title is required for popup.\")\n-\n-                # Debugging: print out the data to verify\n-                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n-                popup_instance = self.create_popup_instance(title, url, image)\n-                popups.append(popup_instance)\n-\n             # Return the saved popup instances\n             return popups\n+        \n         except Exception as e:\n             # Rollback the transaction in case of error and log the issue\n             transaction.set_rollback(True)\n             print(f\"Error occurred: {e}\")\n@@ -103,17 +104,18 @@\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n         return self.single_representation(instance)\n \n-        def single_representation(self, instance):\n-            return {\n-                \"id\": instance.id,\n-                \"title\": instance.title,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"url\": instance.url,\n-                \"created_date\": instance.created_date,\n-                \"updated_date\": instance.updated_date\n-            }\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n+\n         \n     # def update(self, instance, validated_data):\n     #     request = self.context['request']\n     #     index = 0\n"
                },
                {
                    "date": 1725785624144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n from rest_framework import serializers\n from ..models import Popup\n \n-\n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n         fields = '__all__'\n@@ -16,90 +15,11 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n-    @transaction.atomic\n     def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n-\n-        try:\n-            # Check if the content type is form data or JSON\n-            if request.content_type == 'application/json':\n-                # Handle JSON array data\n-                data_entries = request.data.get('data', [])\n-                if isinstance(data_entries, list):\n-                    for index, data in enumerate(data_entries):\n-                        title = data.get('title')\n-                        url = data.get('url')\n-\n-                        if not title:\n-                            raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                        # Debugging: Log to verify fields\n-                        print(f\"Creating popup {index} with title: {title}, url: {url}\")\n-\n-                        # Create and save popup\n-                        popup_instance = Popup.objects.create(title=title, url=url)\n-                        popups.append(popup_instance)\n-\n-                        print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                else:\n-                    raise ValidationError(\"Expected a list of data entries for JSON array.\")\n-            \n-            elif request.content_type.startswith('multipart/form-data'):\n-                # Handle form-encoded data\n-                index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: Log the title and URL\n-                    print(f\"Creating form-based popup {index} with title: {title}, url: {url}\")\n-\n-                    # Create and save popup\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n-\n-                    # If you need to handle images later, you can add that logic here\n-                    if image:\n-                        popup_instance.image = image\n-                        popup_instance.save()\n-\n-                    popups.append(popup_instance)\n-                    print(f\"Form-based popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-                    index += 1\n-            else:\n-                raise ValidationError(\"Unsupported content type.\")\n-\n-            # Return the saved popup instances\n-            return popups\n         \n-        except Exception as e:\n-            # Rollback the transaction in case of error and log the issue\n-            transaction.set_rollback(True)\n-            print(f\"Error occurred: {e}\")\n-            raise\n \n-    def create_popup_instance(self, title, url, image):\n-        \"\"\"Helper function to create a Popup instance.\"\"\"\n-        try:\n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n-\n-            popup_instance.save()\n-            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-            return popup_instance\n-        except Exception as e:\n-            print(f\"Error while saving popup: {e}\")\n-            raise\n-\n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n             return [self.single_representation(popup) for popup in instance]\n@@ -113,9 +33,8 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n-\n         \n     # def update(self, instance, validated_data):\n     #     request = self.context['request']\n     #     index = 0\n"
                },
                {
                    "date": 1725785633980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,4 +87,5 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n+\n"
                },
                {
                    "date": 1725785658719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,35 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n+        popups = []\n+        request = self.context['request']\n+\n+        index = 0\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n+\n+            if not title:\n+                print(f\"Title is required for popup {index}.\")\n+\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n+\n+            popup_instance.save()\n+            popups.append(popup_instance)\n+            index += 1\n+            # TODO return all the data in payload\n         \n+        try:\n+            return popups[0]\n+        except:\n+            return []\n \n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n@@ -87,5 +113,4 @@\n     #         \"url\": instance.url,\n     #         \"created_date\": instance.created_date,\n     #         \"updated_date\": instance.updated_date\n     #     }\n-\n"
                },
                {
                    "date": 1725785683489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,57 +60,57 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    # def update(self, instance, validated_data):\n-    #     request = self.context['request']\n-    #     index = 0\n-    #     popups = []\n+    def update(self, instance, validated_data):\n+        request = self.context['request']\n+        index = 0\n+        popups = []\n \n-    #     # Loop through the incoming data just like in the create method\n-    #     while f'data[{index}][title]' in request.data:\n-    #         title = request.data.get(f'data[{index}][title]')\n-    #         url = request.data.get(f'data[{index}][url]')\n-    #         image = request.FILES.get(f'data[{index}][image]', None)\n-    #         popup_id = request.data.get(f'data[{index}][id]', None)\n+        # Loop through the incoming data just like in the create method\n+        while f'data[{index}][title]' in request.data:\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n+            popup_id = request.data.get(f'data[{index}][id]', None)\n \n-    #         # Check if a popup instance with the given ID exists\n-    #         try:\n-    #             popup_instance = Popup.objects.get(id=popup_id)\n-    #         except Popup.DoesNotExist:\n-    #             print(f\"Popup with id {popup_id} does not exist.\")\n+            # Check if a popup instance with the given ID exists\n+            try:\n+                popup_instance = Popup.objects.get(id=popup_id)\n+            except Popup.DoesNotExist:\n+                print(f\"Popup with id {popup_id} does not exist.\")\n \n-    #         # Validate that the title is not empty\n-    #         if not title:\n-    #             print(f\"Title is required for popup {index}.\")\n+            # Validate that the title is not empty\n+            if not title:\n+                print(f\"Title is required for popup {index}.\")\n \n-    #         # Update the fields\n-    #         popup_instance.title = title\n-    #         popup_instance.url = url\n+            # Update the fields\n+            popup_instance.title = title\n+            popup_instance.url = url\n \n-    #         # Update image if provided\n-    #         if image:\n-    #             popup_instance.image = image\n+            # Update image if provided\n+            if image:\n+                popup_instance.image = image\n \n-    #         popup_instance.save()  # Save the updated instance\n-    #         popups.append(popup_instance)\n+            popup_instance.save()  # Save the updated instance\n+            popups.append(popup_instance)\n \n-    #         index += 1\n+            index += 1\n \n-    #     # Return the list of updated popups\n-    #     return popups\n+        # Return the list of updated popups\n+        return popups\n \n-    # def to_representation(self, instance):\n-    #     \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-    #     if isinstance(instance, list):\n-    #         return [self.single_representation(popup) for popup in instance]\n-    #     return self.single_representation(instance)\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n \n-    # def single_representation(self, instance):\n-    #     return {\n-    #         \"id\": instance.id,\n-    #         \"title\": instance.title,\n-    #         \"image\": instance.image.url if instance.image else None,\n-    #         \"url\": instance.url,\n-    #         \"created_date\": instance.created_date,\n-    #         \"updated_date\": instance.updated_date\n-    #     }\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n"
                },
                {
                    "date": 1725786422419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n         }\n         \n     def update(self, instance, validated_data):\n         request = self.context['request']\n+        print\n         index = 0\n         popups = []\n \n         # Loop through the incoming data just like in the create method\n"
                },
                {
                    "date": 1725786643883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,58 +60,5 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n-    def update(self, instance, validated_data):\n-        request = self.context['request']\n-        print\n-        index = 0\n-        popups = []\n-\n-        # Loop through the incoming data just like in the create method\n-        while f'data[{index}][title]' in request.data:\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n-            popup_id = request.data.get(f'data[{index}][id]', None)\n-\n-            # Check if a popup instance with the given ID exists\n-            try:\n-                popup_instance = Popup.objects.get(id=popup_id)\n-            except Popup.DoesNotExist:\n-                print(f\"Popup with id {popup_id} does not exist.\")\n-\n-            # Validate that the title is not empty\n-            if not title:\n-                print(f\"Title is required for popup {index}.\")\n-\n-            # Update the fields\n-            popup_instance.title = title\n-            popup_instance.url = url\n-\n-            # Update image if provided\n-            if image:\n-                popup_instance.image = image\n-\n-            popup_instance.save()  # Save the updated instance\n-            popups.append(popup_instance)\n-\n-            index += 1\n-\n-        # Return the list of updated popups\n-        return popups\n-\n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725787709744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,31 +18,46 @@\n \n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n+        index = 0\n \n-        index = 0\n         while f'data[{index}][title]' in request.data:\n+            popup_id = request.data.get(f'data[{index}][id]', None)\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n \n             if not title:\n                 print(f\"Title is required for popup {index}.\")\n+                index += 1\n+                continue\n \n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n+            # If ID is provided, update the existing record\n+            if popup_id:\n+                try:\n+                    popup_instance = Popup.objects.get(id=popup_id)\n+                    popup_instance.title = title\n+                    popup_instance.url = url\n+                    if image:\n+                        popup_instance.image = image\n+                    popup_instance.save()\n+                except Popup.DoesNotExist:\n+                    print(f\"Popup with id {popup_id} does not exist.\")\n+                    index += 1\n+                    continue\n             else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+                # Create a new Popup instance\n+                if image:\n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                else:\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n \n-            popup_instance.save()\n             popups.append(popup_instance)\n             index += 1\n-            # TODO return all the data in payload\n-        \n+\n         try:\n-            return popups[0]\n+            return popups[0] if popups else []\n         except:\n             return []\n \n     def to_representation(self, instance):\n@@ -59,6 +74,22 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n+\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n         \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725787719587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,22 +74,6 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n-\n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n         \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725787812464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n             popup_id = request.data.get(f'data[{index}][id]', None)\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n+            print(pop)\n \n             if not title:\n                 print(f\"Title is required for popup {index}.\")\n                 index += 1\n"
                },
                {
                    "date": 1725787819050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n             popup_id = request.data.get(f'data[{index}][id]', None)\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n-            print(pop)\n+            print(popup_id,\"######################\")\n \n             if not title:\n                 print(f\"Title is required for popup {index}.\")\n                 index += 1\n"
                },
                {
                    "date": 1725787831615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n \n             # If ID is provided, update the existing record\n             if popup_id:\n                 try:\n+                    print()\n                     popup_instance = Popup.objects.get(id=popup_id)\n                     popup_instance.title = title\n                     popup_instance.url = url\n                     if image:\n"
                },
                {
                    "date": 1725787837307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n             # If ID is provided, update the existing record\n             if popup_id:\n                 try:\n-                    print()\n+                    print(\"line 39\")\n                     popup_instance = Popup.objects.get(id=popup_id)\n                     popup_instance.title = title\n                     popup_instance.url = url\n                     if image:\n"
                },
                {
                    "date": 1725787844641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n                     print(f\"Popup with id {popup_id} does not exist.\")\n                     index += 1\n                     continue\n             else:\n+                \n                 # Create a new Popup instance\n                 if image:\n                     popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 else:\n"
                },
                {
                    "date": 1725787850839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n                     print(f\"Popup with id {popup_id} does not exist.\")\n                     index += 1\n                     continue\n             else:\n-                \n+                 print(\"line 51\")\n                 # Create a new Popup instance\n                 if image:\n                     popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 else:\n"
                },
                {
                    "date": 1725788226490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n \n             # If ID is provided, update the existing record\n             if popup_id:\n                 try:\n-                    print(\"line 39\")\n                     popup_instance = Popup.objects.get(id=popup_id)\n                     popup_instance.title = title\n                     popup_instance.url = url\n                     if image:\n@@ -47,9 +46,9 @@\n                     print(f\"Popup with id {popup_id} does not exist.\")\n                     index += 1\n                     continue\n             else:\n-                 print(\"line 51\")\n+                print(\"line 51\")\n                 # Create a new Popup instance\n                 if image:\n                     popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 else:\n"
                },
                {
                    "date": 1725788234475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n             popup_id = request.data.get(f'data[{index}][id]', None)\n             title = request.data.get(f'data[{index}][title]')\n             url = request.data.get(f'data[{index}][url]')\n             image = request.FILES.get(f'data[{index}][image]', None)\n-            print(popup_id,\"######################\")\n \n             if not title:\n                 print(f\"Title is required for popup {index}.\")\n                 index += 1\n"
                },
                {
                    "date": 1725788265979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,8 @@\n                     print(f\"Popup with id {popup_id} does not exist.\")\n                     index += 1\n                     continue\n             else:\n-                print(\"line 51\")\n                 # Create a new Popup instance\n                 if image:\n                     popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 else:\n"
                },
                {
                    "date": 1725788694376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n                 try:\n                     popup_instance = Popup.objects.get(id=popup_id)\n                     popup_instance.title = title\n                     popup_instance.url = url\n+                    popup_instance.image = image\n                     if image:\n                         popup_instance.image = image\n                     popup_instance.save()\n                 except Popup.DoesNotExist:\n"
                },
                {
                    "date": 1725788700849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n                     popup_instance = Popup.objects.get(id=popup_id)\n                     popup_instance.title = title\n                     popup_instance.url = url\n                     popup_instance.image = image\n-                    if image:\n-                        popup_instance.image = image\n+                    # if image:\n+                    #     popup_instance.image = image\n                     popup_instance.save()\n                 except Popup.DoesNotExist:\n                     print(f\"Popup with id {popup_id} does not exist.\")\n                     index += 1\n"
                },
                {
                    "date": 1725861753772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n                 # Create a new Popup instance\n                 if image:\n                     popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 else:\n-                    popup_instance = Popup.objects.create(title=title, url=url)\n+                    popup_instance = Popup.objects.create(title=title,image=image, url=url)\n \n             popups.append(popup_instance)\n             index += 1\n \n"
                },
                {
                    "date": 1725861766283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,11 +46,12 @@\n                     print(f\"Popup with id {popup_id} does not exist.\")\n                     index += 1\n                     continue\n             else:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # Create a new Popup instance\n                 if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    \n                 else:\n                     popup_instance = Popup.objects.create(title=title,image=image, url=url)\n \n             popups.append(popup_instance)\n"
                },
                {
                    "date": 1725861774232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n             else:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # Create a new Popup instance\n                 if image:\n-                    \n+                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 else:\n                     popup_instance = Popup.objects.create(title=title,image=image, url=url)\n \n             popups.append(popup_instance)\n"
                },
                {
                    "date": 1725862740249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,52 +16,51 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n-        index = 0\n+    popups = []\n+    request = self.context['request']\n+    index = 0\n \n-        while f'data[{index}][title]' in request.data:\n-            popup_id = request.data.get(f'data[{index}][id]', None)\n-            title = request.data.get(f'data[{index}][title]')\n-            url = request.data.get(f'data[{index}][url]')\n-            image = request.FILES.get(f'data[{index}][image]', None)\n+    while f'data[{index}][title]' in request.data:\n+        popup_id = request.data.get(f'data[{index}][id]', None)\n+        title = request.data.get(f'data[{index}][title]')\n+        url = request.data.get(f'data[{index}][url]')\n+        image = request.FILES.get(f'data[{index}][image]', None)\n \n-            if not title:\n-                print(f\"Title is required for popup {index}.\")\n+        if not title:\n+            print(f\"Title is required for popup {index}.\")\n+            index += 1\n+            continue\n+\n+        # If ID is provided, update the existing record\n+        if popup_id:\n+            try:\n+                popup_instance = Popup.objects.get(id=popup_id)\n+                popup_instance.title = title\n+                popup_instance.url = url\n+\n+                # Only update the image if a new image is provided\n+                if image:\n+                    popup_instance.image = image\n+\n+                popup_instance.save()\n+            except Popup.DoesNotExist:\n+                print(f\"Popup with id {popup_id} does not exist.\")\n                 index += 1\n                 continue\n+        else:\n+            # Create a new Popup instance with or without an image\n+            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n \n-            # If ID is provided, update the existing record\n-            if popup_id:\n-                try:\n-                    popup_instance = Popup.objects.get(id=popup_id)\n-                    popup_instance.title = title\n-                    popup_instance.url = url\n-                    popup_instance.image = image\n-                    # if image:\n-                    #     popup_instance.image = image\n-                    popup_instance.save()\n-                except Popup.DoesNotExist:\n-                    print(f\"Popup with id {popup_id} does not exist.\")\n-                    index += 1\n-                    continue\n-            else:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # Create a new Popup instance\n-                if image:\n-                    popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                else:\n-                    popup_instance = Popup.objects.create(title=title,image=image, url=url)\n+        popups.append(popup_instance)\n+        index += 1\n \n-            popups.append(popup_instance)\n-            index += 1\n+    try:\n+        return popups[0] if popups else []\n+    except:\n+        return []\n \n-        try:\n-            return popups[0] if popups else []\n-        except:\n-            return []\n \n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n"
                },
                {
                    "date": 1725862755515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,50 +16,50 @@\n         model = Popup\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    popups = []\n-    request = self.context['request']\n-    index = 0\n+        popups = []\n+        request = self.context['request']\n+        index = 0\n \n-    while f'data[{index}][title]' in request.data:\n-        popup_id = request.data.get(f'data[{index}][id]', None)\n-        title = request.data.get(f'data[{index}][title]')\n-        url = request.data.get(f'data[{index}][url]')\n-        image = request.FILES.get(f'data[{index}][image]', None)\n+        while f'data[{index}][title]' in request.data:\n+            popup_id = request.data.get(f'data[{index}][id]', None)\n+            title = request.data.get(f'data[{index}][title]')\n+            url = request.data.get(f'data[{index}][url]')\n+            image = request.FILES.get(f'data[{index}][image]', None)\n \n-        if not title:\n-            print(f\"Title is required for popup {index}.\")\n-            index += 1\n-            continue\n+            if not title:\n+                print(f\"Title is required for popup {index}.\")\n+                index += 1\n+                continue\n \n-        # If ID is provided, update the existing record\n-        if popup_id:\n-            try:\n-                popup_instance = Popup.objects.get(id=popup_id)\n-                popup_instance.title = title\n-                popup_instance.url = url\n+            # If ID is provided, update the existing record\n+            if popup_id:\n+                try:\n+                    popup_instance = Popup.objects.get(id=popup_id)\n+                    popup_instance.title = title\n+                    popup_instance.url = url\n \n-                # Only update the image if a new image is provided\n-                if image:\n-                    popup_instance.image = image\n+                    # Only update the image if a new image is provided\n+                    if image:\n+                        popup_instance.image = image\n \n-                popup_instance.save()\n-            except Popup.DoesNotExist:\n-                print(f\"Popup with id {popup_id} does not exist.\")\n-                index += 1\n-                continue\n-        else:\n-            # Create a new Popup instance with or without an image\n-            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                    popup_instance.save()\n+                except Popup.DoesNotExist:\n+                    print(f\"Popup with id {popup_id} does not exist.\")\n+                    index += 1\n+                    continue\n+            else:\n+                # Create a new Popup instance with or without an image\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n \n-        popups.append(popup_instance)\n-        index += 1\n+            popups.append(popup_instance)\n+            index += 1\n \n-    try:\n-        return popups[0] if popups else []\n-    except:\n-        return []\n+        try:\n+            return popups[0] if popups else []\n+        except:\n+            return []\n \n \n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n"
                },
                {
                    "date": 1725863148155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,5 +76,6 @@\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n         \n+        \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1725863161021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from rest_framework import serializers\n from ..models import Popup\n+from django.core.exceptions import ValidationError\n \n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n@@ -75,7 +76,14 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n+    \n+    def save(self, **kwargs):\n+        try:\n+            # Call the model's save method which may raise ValidationError\n+            return super().save(**kwargs)\n+        except ValidationError as e:\n+            # Catch the ValidationError and raise a DRF ValidationError\n+            raise serializers.ValidationError({'title': str(e)})\n         \n-        \n     \n\\ No newline at end of file\n"
                }
            ],
            "date": 1725600608506,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Popup\n\nclass PopupListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Popup\n        fields = '__all__'\n\nclass PopupRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Popup\n        fields = '__all__'\n\nclass PopupWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Popup\n        fields = '__all__'\n\n    def create(self, validated_data):\n        popups = []\n        request = self.context['request']\n\n        index = 0\n        while f'data[{index}][title]' in request.data:\n            title = request.data.get(f'data[{index}][title]')\n            url = request.data.get(f'data[{index}][url]')\n            image = request.FILES.get(f'data[{index}][image]', None)\n\n            if not title:\n                raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n\n            if image:\n                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                # popup_instance.url = popup_instance.image.url\n            else:\n                popup_instance = Popup.objects.create(title=title, url=url)\n\n            popup_instance.save()\n            popups.append(popup_instance)\n            index += 1\n# TODO return all the data in payload\n        return popups[0]\n\n    def to_representation(self, instance):\n        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n        if isinstance(instance, list):\n            return [self.single_representation(popup) for popup in instance]\n        return self.single_representation(instance)\n\n    def single_representation(self, instance):\n        return {\n            \"id\": instance.id,\n            \"title\": instance.title,\n            \"image\": instance.image.url if instance.image else None,\n            \"url\": instance.url,\n            \"created_date\": instance.created_date,\n            \"updated_date\": instance.updated_date\n        }"
        }
    ]
}