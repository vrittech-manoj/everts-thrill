{
    "sourceFile": "company/serializers/herosectionstats_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 90,
            "patches": [
                {
                    "date": 1726120849421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726120911360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from rest_framework import serializers\n from ..models import HeroSectionStats\n+import ast\n+from django.db import transaction\n \n class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n"
                },
                {
                    "date": 1726120925293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-class HeroSectionWriteSerializers(serializers.ModelSerializer):\n+class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n     stats = HeroSectionStatsWriteSerializers(many=True, read_only=True)\n \n     def to_internal_value(self, data):\n         # Handle 'stats' data similar to 'packages' in the DestinationWriteSerializers\n"
                },
                {
                    "date": 1726121015650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,72 +12,4 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n-    stats = HeroSectionStatsWriteSerializers(many=True, read_only=True)\n-\n-    def to_internal_value(self, data):\n-        # Handle 'stats' data similar to 'packages' in the DestinationWriteSerializers\n-        if data.get('stats'):\n-            data = str_to_list(data, 'stats')\n-            return super().to_internal_value(data)\n-        return super().to_internal_value(data)\n-\n-    class Meta:\n-        model = HeroSection\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        # Handle 'stats' data (pop to extract it before creating the HeroSection)\n-        stats_data = validated_data.pop('stats', [])\n-        \n-        # Create the HeroSection instance\n-        hero_section = HeroSection.objects.create(**validated_data)\n-\n-        # Process HeroSectionStats data (if provided)\n-        if stats_data:\n-            for stat_data in stats_data:\n-                stat_serializer = HeroSectionStatsWriteSerializers(data=stat_data)\n-                if stat_serializer.is_valid(raise_exception=True):\n-                    stat_serializer.save(hero_section=hero_section)  # Assuming the relation field is `hero_section`\n-\n-        return hero_section\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        # Parse 'stats' data from the validated data\n-        stats_data = validated_data.pop('stats', [])\n-\n-        # Update the HeroSection instance\n-        instance = super().update(instance, validated_data)\n-\n-        if stats_data:\n-            # Get existing stats IDs from the database\n-            existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n-            existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-\n-            # Extract the provided stat IDs from the request data\n-            provided_stat_ids = set([stat.get('id') for stat in stats_data if stat.get('id')])\n-\n-            # Delete stats that are not in the provided data\n-            stats_to_delete = existing_stat_ids - provided_stat_ids\n-            HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n-\n-            # Update or create stats\n-            for stat_data in stats_data:\n-                stat_id = stat_data.pop('id', None)\n-                if stat_id:\n-                    # Update existing stat\n-                    stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n-                    for key, value in stat_data.items():\n-                        setattr(stat_instance, key, value)\n-                    stat_instance.save()\n-                else:\n-                    # Create a new stat if it doesn't exist\n-                    HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n-        else:\n-            # If no stats data, clear existing stats\n-            HeroSectionStats.objects.filter(hero_section=instance).delete()\n-\n-        return instance\n"
                },
                {
                    "date": 1726121029421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,4 +12,58 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n+from rest_framework import serializers\n+from django.db import transaction\n+from .models import HeroSectionStats\n+\n+class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        # Convert stats data if necessary (similar to how 'packages' were handled)\n+        if isinstance(data, list):\n+            return [super().to_internal_value(item) for item in data]\n+        return super().to_internal_value(data)\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        if isinstance(validated_data, list):\n+            # Bulk create if validated_data is a list of dictionaries\n+            stats = HeroSectionStats.objects.bulk_create(\n+                [HeroSectionStats(**item) for item in validated_data]\n+            )\n+        else:\n+            # Create a single stat entry\n+            stats = HeroSectionStats.objects.create(**validated_data)\n+        return stats\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        if isinstance(validated_data, list):\n+            # Handle bulk update\n+            existing_stats = {stat.id: stat for stat in instance}\n+            updated_stats = []\n+\n+            for stat_data in validated_data:\n+                stat_id = stat_data.get('id', None)\n+                if stat_id and stat_id in existing_stats:\n+                    stat_instance = existing_stats[stat_id]\n+                    for attr, value in stat_data.items():\n+                        setattr(stat_instance, attr, value)\n+                    stat_instance.save()\n+                    updated_stats.append(stat_instance)\n+                else:\n+                    # Create a new stat if not already existing\n+                    new_stat = HeroSectionStats.objects.create(**stat_data)\n+                    updated_stats.append(new_stat)\n+\n+            return updated_stats\n+        else:\n+            # Handle single instance update\n+            for attr, value in validated_data.items():\n+                setattr(instance, attr, value)\n+            instance.save()\n+            return instance\n"
                },
                {
                    "date": 1726121038961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,8 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-from rest_framework import serializers\n-from django.db import transaction\n-from .models import HeroSectionStats\n-\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n"
                },
                {
                    "date": 1726121067478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n         model = HeroSectionStats\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n-        # Convert stats data if necessary (similar to how 'packages' were handled)\n         if isinstance(data, list):\n             return [super().to_internal_value(item) for item in data]\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726121112534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,8 @@\n                         setattr(stat_instance, attr, value)\n                     stat_instance.save()\n                     updated_stats.append(stat_instance)\n                 else:\n-                    # Create a new stat if not already existing\n                     new_stat = HeroSectionStats.objects.create(**stat_data)\n                     updated_stats.append(new_stat)\n \n             return updated_stats\n"
                },
                {
                    "date": 1726204883735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,34 +12,48 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n+from rest_framework import serializers\n+from django.db import transaction\n+from .models import HeroSectionStats\n+\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n-        if isinstance(data, list):\n-            return [super().to_internal_value(item) for item in data]\n+        \"\"\"\n+        Converts the incoming nested dictionary (or list of dictionaries) into \n+        a format suitable for the serializer.\n+        \"\"\"\n+        if isinstance(data, dict):\n+            stats = data.get('stats', [])\n+            if isinstance(stats, list):\n+                return [super().to_internal_value(item) for item in stats]\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n+        \"\"\"\n+        Handles bulk creation if validated_data is a list of dictionaries.\n+        \"\"\"\n         if isinstance(validated_data, list):\n-            # Bulk create if validated_data is a list of dictionaries\n             stats = HeroSectionStats.objects.bulk_create(\n                 [HeroSectionStats(**item) for item in validated_data]\n             )\n+            return stats\n         else:\n-            # Create a single stat entry\n-            stats = HeroSectionStats.objects.create(**validated_data)\n-        return stats\n+            stat = HeroSectionStats.objects.create(**validated_data)\n+            return stat\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles bulk update if validated_data is a list.\n+        \"\"\"\n         if isinstance(validated_data, list):\n-            # Handle bulk update\n             existing_stats = {stat.id: stat for stat in instance}\n             updated_stats = []\n \n             for stat_data in validated_data:\n@@ -55,9 +69,8 @@\n                     updated_stats.append(new_stat)\n \n             return updated_stats\n         else:\n-            # Handle single instance update\n             for attr, value in validated_data.items():\n                 setattr(instance, attr, value)\n             instance.save()\n             return instance\n"
                },
                {
                    "date": 1726204891099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,8 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-from rest_framework import serializers\n-from django.db import transaction\n-from .models import HeroSectionStats\n \n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n"
                },
                {
                    "date": 1726205672643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n"
                },
                {
                    "date": 1726206220177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,26 +21,32 @@\n     def to_internal_value(self, data):\n         \"\"\"\n         Converts the incoming nested dictionary (or list of dictionaries) into \n         a format suitable for the serializer.\n+        Handles:\n+        1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n-        if isinstance(data, dict):\n-            stats = data.get('stats', [])\n-            if isinstance(stats, list):\n-                return [super().to_internal_value(item) for item in stats]\n+        # Check if the incoming data has 'stats' key and is a dictionary\n+        if 'stats' in data and isinstance(data['stats'], list):\n+            # Convert the list of stats to internal values\n+            return [self.__class__(data=item).to_internal_value(item) for item in data['stats']]\n+        \n+        # Otherwise, process data as usual\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles bulk creation if validated_data is a list of dictionaries.\n         \"\"\"\n         if isinstance(validated_data, list):\n+            # Bulk create all stats\n             stats = HeroSectionStats.objects.bulk_create(\n                 [HeroSectionStats(**item) for item in validated_data]\n             )\n             return stats\n         else:\n+            # Create a single stat entry\n             stat = HeroSectionStats.objects.create(**validated_data)\n             return stat\n \n     @transaction.atomic\n@@ -48,25 +54,29 @@\n         \"\"\"\n         Handles bulk update if validated_data is a list.\n         \"\"\"\n         if isinstance(validated_data, list):\n+            # Map existing stats by their IDs for update\n             existing_stats = {stat.id: stat for stat in instance}\n             updated_stats = []\n \n             for stat_data in validated_data:\n                 stat_id = stat_data.get('id', None)\n                 if stat_id and stat_id in existing_stats:\n                     stat_instance = existing_stats[stat_id]\n+                    # Update existing stat\n                     for attr, value in stat_data.items():\n                         setattr(stat_instance, attr, value)\n                     stat_instance.save()\n                     updated_stats.append(stat_instance)\n                 else:\n+                    # Create new stat if it doesn't exist\n                     new_stat = HeroSectionStats.objects.create(**stat_data)\n                     updated_stats.append(new_stat)\n \n             return updated_stats\n         else:\n+            # Handle update for a single stat instance\n             for attr, value in validated_data.items():\n                 setattr(instance, attr, value)\n             instance.save()\n-            return instance\n+            return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726206573571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,10 @@\n         a format suitable for the serializer.\n         Handles:\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n-        # Check if the incoming data has 'stats' key and is a dictionary\n+        # Handle case where data is wrapped in 'stats' key\n         if 'stats' in data and isinstance(data['stats'], list):\n-            # Convert the list of stats to internal values\n             return [self.__class__(data=item).to_internal_value(item) for item in data['stats']]\n         \n         # Otherwise, process data as usual\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1726206856096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         Handles:\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         # Handle case where data is wrapped in 'stats' key\n-        if 'stats' in data and isinstance(data['stats'], list):\n+        if 'stats' in data and isinstance(data['stats'], []]):\n             return [self.__class__(data=item).to_internal_value(item) for item in data['stats']]\n         \n         # Otherwise, process data as usual\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1726206941307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,70 +12,4 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-    def to_internal_value(self, data):\n-        \"\"\"\n-        Converts the incoming nested dictionary (or list of dictionaries) into \n-        a format suitable for the serializer.\n-        Handles:\n-        1. {stats: [{...}, {...}]} - as in the provided payload.\n-        \"\"\"\n-        # Handle case where data is wrapped in 'stats' key\n-        if 'stats' in data and isinstance(data['stats'], []]):\n-            return [self.__class__(data=item).to_internal_value(item) for item in data['stats']]\n-        \n-        # Otherwise, process data as usual\n-        return super().to_internal_value(data)\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles bulk creation if validated_data is a list of dictionaries.\n-        \"\"\"\n-        if isinstance(validated_data, list):\n-            # Bulk create all stats\n-            stats = HeroSectionStats.objects.bulk_create(\n-                [HeroSectionStats(**item) for item in validated_data]\n-            )\n-            return stats\n-        else:\n-            # Create a single stat entry\n-            stat = HeroSectionStats.objects.create(**validated_data)\n-            return stat\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles bulk update if validated_data is a list.\n-        \"\"\"\n-        if isinstance(validated_data, list):\n-            # Map existing stats by their IDs for update\n-            existing_stats = {stat.id: stat for stat in instance}\n-            updated_stats = []\n-\n-            for stat_data in validated_data:\n-                stat_id = stat_data.get('id', None)\n-                if stat_id and stat_id in existing_stats:\n-                    stat_instance = existing_stats[stat_id]\n-                    # Update existing stat\n-                    for attr, value in stat_data.items():\n-                        setattr(stat_instance, attr, value)\n-                    stat_instance.save()\n-                    updated_stats.append(stat_instance)\n-                else:\n-                    # Create new stat if it doesn't exist\n-                    new_stat = HeroSectionStats.objects.create(**stat_data)\n-                    updated_stats.append(new_stat)\n-\n-            return updated_stats\n-        else:\n-            # Handle update for a single stat instance\n-            for attr, value in validated_data.items():\n-                setattr(instance, attr, value)\n-            instance.save()\n-            return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726206948024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,4 +12,38 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n+class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        \"\"\"\n+        Converts the incoming nested dictionary (or list of dictionaries) into \n+        a format suitable for the serializer.\n+        Handles:\n+        1. {stats: [{...}, {...}]} - as in the provided payload.\n+        \"\"\"\n+        if isinstance(data, dict):\n+            # Handle case where the 'stats' key is present\n+            stats = data.get('stats', [])\n+            if isinstance(stats, list):\n+                return stats\n+        return super().to_internal_value(data)\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles bulk creation if validated_data is a list of dictionaries.\n+        \"\"\"\n+        # If validated_data is a list, create objects for each entry\n+        if isinstance(validated_data, list):\n+            stats = HeroSectionStats.objects.bulk_create(\n+                [HeroSectionStats(**item) for item in validated_data]\n+            )\n+            return stats\n+        else:\n+            # Create a single stat entry\n+            stat = HeroSectionStats.objects.create(**validated_data)\n+            return stat\n"
                },
                {
                    "date": 1726207017189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,10 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n+from django.db import transaction\n+\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n@@ -25,9 +27,8 @@\n         Handles:\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         if isinstance(data, dict):\n-            # Handle case where the 'stats' key is present\n             stats = data.get('stats', [])\n             if isinstance(stats, list):\n                 return stats\n         return super().to_internal_value(data)\n@@ -36,14 +37,44 @@\n     def create(self, validated_data):\n         \"\"\"\n         Handles bulk creation if validated_data is a list of dictionaries.\n         \"\"\"\n-        # If validated_data is a list, create objects for each entry\n         if isinstance(validated_data, list):\n             stats = HeroSectionStats.objects.bulk_create(\n                 [HeroSectionStats(**item) for item in validated_data]\n             )\n             return stats\n         else:\n-            # Create a single stat entry\n             stat = HeroSectionStats.objects.create(**validated_data)\n             return stat\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles bulk update if validated_data is a list.\n+        \"\"\"\n+        if isinstance(validated_data, list):\n+            # Build a map of existing stats by their ID\n+            existing_stats = {stat.id: stat for stat in instance}\n+            updated_stats = []\n+\n+            for stat_data in validated_data:\n+                stat_id = stat_data.get('id', None)\n+                if stat_id and stat_id in existing_stats:\n+                    # Update existing stat\n+                    stat_instance = existing_stats[stat_id]\n+                    for attr, value in stat_data.items():\n+                        setattr(stat_instance, attr, value)\n+                    stat_instance.save()\n+                    updated_stats.append(stat_instance)\n+                else:\n+                    # Create new stat if it doesn't exist\n+                    new_stat = HeroSectionStats.objects.create(**stat_data)\n+                    updated_stats.append(new_stat)\n+\n+            return updated_stats\n+        else:\n+            # Handle the single instance update\n+            for attr, value in validated_data.items():\n+                setattr(instance, attr, value)\n+            instance.save()\n+            return instance\n"
                },
                {
                    "date": 1726207429654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+from rest_framework import serializers\n+from ..models import HeroSectionStats\n+import ast\n+from django.db import transaction\n+\n+class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+from django.db import transaction\n+\n+class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        \"\"\"\n+        Converts the incoming nested dictionary (or list of dictionaries) into \n+        a format suitable for the serializer.\n+        Handles:\n+        1. {stats: [{...}, {...}]} - as in the provided payload.\n+        \"\"\"\n+        if isinstance(data, dict):\n+            stats = data.get('stats', [])\n+            \n+            if isinstance(stats, list):\n+                return stats\n+        return super().to_internal_value(data)\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles bulk creation if validated_data is a list of dictionaries.\n+        \"\"\"\n+        if isinstance(validated_data, list):\n+            stats = HeroSectionStats.objects.bulk_create(\n+                [HeroSectionStats(**item) for item in validated_data]\n+            )\n+            return stats\n+        else:\n+            stat = HeroSectionStats.objects.create(**validated_data)\n+            return stat\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles bulk update if validated_data is a list.\n+        \"\"\"\n+        if isinstance(validated_data, list):\n+            # Build a map of existing stats by their ID\n+            existing_stats = {stat.id: stat for stat in instance}\n+            updated_stats = []\n+\n+            for stat_data in validated_data:\n+                stat_id = stat_data.get('id', None)\n+                if stat_id and stat_id in existing_stats:\n+                    # Update existing stat\n+                    stat_instance = existing_stats[stat_id]\n+                    for attr, value in stat_data.items():\n+                        setattr(stat_instance, attr, value)\n+                    stat_instance.save()\n+                    updated_stats.append(stat_instance)\n+                else:\n+                    # Create new stat if it doesn't exist\n+                    new_stat = HeroSectionStats.objects.create(**stat_data)\n+                    updated_stats.append(new_stat)\n+\n+            return updated_stats\n+        else:\n+            # Handle the single instance update\n+            for attr, value in validated_data.items():\n+                setattr(instance, attr, value)\n+            instance.save()\n+            return instance\n"
                },
                {
                    "date": 1726207449300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         if isinstance(data, dict):\n             stats = data.get('stats', [])\n+            print()\n             \n             if isinstance(stats, list):\n                 return stats\n         return super().to_internal_value(data)\n@@ -78,84 +79,4 @@\n             for attr, value in validated_data.items():\n                 setattr(instance, attr, value)\n             instance.save()\n             return instance\n-from rest_framework import serializers\n-from ..models import HeroSectionStats\n-import ast\n-from django.db import transaction\n-\n-class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-from django.db import transaction\n-\n-class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-    def to_internal_value(self, data):\n-        \"\"\"\n-        Converts the incoming nested dictionary (or list of dictionaries) into \n-        a format suitable for the serializer.\n-        Handles:\n-        1. {stats: [{...}, {...}]} - as in the provided payload.\n-        \"\"\"\n-        if isinstance(data, dict):\n-            stats = data.get('stats', [])\n-            if isinstance(stats, list):\n-                return stats\n-        return super().to_internal_value(data)\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles bulk creation if validated_data is a list of dictionaries.\n-        \"\"\"\n-        if isinstance(validated_data, list):\n-            stats = HeroSectionStats.objects.bulk_create(\n-                [HeroSectionStats(**item) for item in validated_data]\n-            )\n-            return stats\n-        else:\n-            stat = HeroSectionStats.objects.create(**validated_data)\n-            return stat\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles bulk update if validated_data is a list.\n-        \"\"\"\n-        if isinstance(validated_data, list):\n-            # Build a map of existing stats by their ID\n-            existing_stats = {stat.id: stat for stat in instance}\n-            updated_stats = []\n-\n-            for stat_data in validated_data:\n-                stat_id = stat_data.get('id', None)\n-                if stat_id and stat_id in existing_stats:\n-                    # Update existing stat\n-                    stat_instance = existing_stats[stat_id]\n-                    for attr, value in stat_data.items():\n-                        setattr(stat_instance, attr, value)\n-                    stat_instance.save()\n-                    updated_stats.append(stat_instance)\n-                else:\n-                    # Create new stat if it doesn't exist\n-                    new_stat = HeroSectionStats.objects.create(**stat_data)\n-                    updated_stats.append(new_stat)\n-\n-            return updated_stats\n-        else:\n-            # Handle the single instance update\n-            for attr, value in validated_data.items():\n-                setattr(instance, attr, value)\n-            instance.save()\n-            return instance\n"
                },
                {
                    "date": 1726207455870,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,9 @@\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         if isinstance(data, dict):\n             stats = data.get('stats', [])\n-            print()\n-            \n+            print(stats)\n             if isinstance(stats, list):\n                 return stats\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726207463321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         if isinstance(data, dict):\n             stats = data.get('stats', [])\n-            print(stats)\n+            print(\"#########\"stats)\n             if isinstance(stats, list):\n                 return stats\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726207484160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         if isinstance(data, dict):\n             stats = data.get('stats', [])\n-            print(\"#########\"stats)\n+            print(\"#########\",stats)\n             if isinstance(stats, list):\n                 return stats\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726207735165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n         Handles:\n         1. {stats: [{...}, {...}]} - as in the provided payload.\n         \"\"\"\n         if isinstance(data, dict):\n-            stats = data.get('stats', [])\n+            stats = redata.get('stats', [])\n             print(\"#########\",stats)\n             if isinstance(stats, list):\n                 return stats\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1726207757732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,65 +17,5 @@\n \n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n-        fields = '__all__'\n-\n-    def to_internal_value(self, data):\n-        \"\"\"\n-        Converts the incoming nested dictionary (or list of dictionaries) into \n-        a format suitable for the serializer.\n-        Handles:\n-        1. {stats: [{...}, {...}]} - as in the provided payload.\n-        \"\"\"\n-        if isinstance(data, dict):\n-            stats = redata.get('stats', [])\n-            print(\"#########\",stats)\n-            if isinstance(stats, list):\n-                return stats\n-        return super().to_internal_value(data)\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles bulk creation if validated_data is a list of dictionaries.\n-        \"\"\"\n-        if isinstance(validated_data, list):\n-            stats = HeroSectionStats.objects.bulk_create(\n-                [HeroSectionStats(**item) for item in validated_data]\n-            )\n-            return stats\n-        else:\n-            stat = HeroSectionStats.objects.create(**validated_data)\n-            return stat\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles bulk update if validated_data is a list.\n-        \"\"\"\n-        if isinstance(validated_data, list):\n-            # Build a map of existing stats by their ID\n-            existing_stats = {stat.id: stat for stat in instance}\n-            updated_stats = []\n-\n-            for stat_data in validated_data:\n-                stat_id = stat_data.get('id', None)\n-                if stat_id and stat_id in existing_stats:\n-                    # Update existing stat\n-                    stat_instance = existing_stats[stat_id]\n-                    for attr, value in stat_data.items():\n-                        setattr(stat_instance, attr, value)\n-                    stat_instance.save()\n-                    updated_stats.append(stat_instance)\n-                else:\n-                    # Create new stat if it doesn't exist\n-                    new_stat = HeroSectionStats.objects.create(**stat_data)\n-                    updated_stats.append(new_stat)\n-\n-            return updated_stats\n-        else:\n-            # Handle the single instance update\n-            for attr, value in validated_data.items():\n-                setattr(instance, attr, value)\n-            instance.save()\n-            return instance\n+        fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726207866009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n \n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n-        fields = '__all__'\n\\ No newline at end of file\n+        fields = '__all__'\n"
                },
                {
                    "date": 1726208741038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,4 +18,20 @@\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n+\n+class HeroSectionStatsArraySerializer(serializers.Serializer):\n+    stats = HeroSectionStatsWriteSerializers(many=True)\n+\n+    def create(self, validated_data):\n+        stats_data = validated_data.pop('stats')\n+        \n+        stats_objects = []\n+        for stat_data in stats_data:\n+            stats_object = HeroSectionStats.objects.create(**stat_data)\n+            stats_objects.append(stats_object)\n+        return stats_objects\n+\n+    def update(self, instance, validated_data):\n+        # If updating logic is needed, write it here\n+        pass\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726208749998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     stats = HeroSectionStatsWriteSerializers(many=True)\n \n     def create(self, validated_data):\n         stats_data = validated_data.pop('stats')\n-        \n+        print(\"stats Data\")\n         stats_objects = []\n         for stat_data in stats_data:\n             stats_object = HeroSectionStats.objects.create(**stat_data)\n             stats_objects.append(stats_object)\n"
                },
                {
                    "date": 1726208759248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     stats = HeroSectionStatsWriteSerializers(many=True)\n \n     def create(self, validated_data):\n         stats_data = validated_data.pop('stats')\n-        print(\"stats Data\")\n+        print(\"stats Data\",stats_data)\n         stats_objects = []\n         for stat_data in stats_data:\n             stats_object = HeroSectionStats.objects.create(**stat_data)\n             stats_objects.append(stats_object)\n"
                },
                {
                    "date": 1726208770142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n         print(\"stats Data\",stats_data)\n         stats_objects = []\n         for stat_data in stats_data:\n             stats_object = HeroSectionStats.objects.create(**stat_data)\n+            print(\"stats Data\",stats_data)\n             stats_objects.append(stats_object)\n         return stats_objects\n \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1726208775381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         print(\"stats Data\",stats_data)\n         stats_objects = []\n         for stat_data in stats_data:\n             stats_object = HeroSectionStats.objects.create(**stat_data)\n-            print(\"stats Data\",stats_data)\n+            print(\"stats stats_object\",stats_object)\n             stats_objects.append(stats_object)\n         return stats_objects\n \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1726208838139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,33 @@\n     stats = HeroSectionStatsWriteSerializers(many=True)\n \n     def create(self, validated_data):\n         stats_data = validated_data.pop('stats')\n-        print(\"stats Data\",stats_data)\n+        print(\"Creating stats:\", stats_data)  # Log the incoming data\n         stats_objects = []\n         for stat_data in stats_data:\n-            stats_object = HeroSectionStats.objects.create(**stat_data)\n-            print(\"stats stats_object\",stats_object)\n-            stats_objects.append(stats_object)\n+            stat_instance = HeroSectionStats.objects.create(**stat_data)\n+            stats_objects.append(stat_instance)\n         return stats_objects\n \n\\ No newline at end of file\n     def update(self, instance, validated_data):\n-        # If updating logic is needed, write it here\n-        pass\n+        stats_data = validated_data.get('stats')\n+        print(\"Updating stats:\", stats_data)  # Log the incoming data\n+        stats_objects = []\n+\n+        for stat_data in stats_data:\n+            stat_id = stat_data.get('id', None)\n+            if stat_id:\n+                try:\n+                    stat_instance = HeroSectionStats.objects.get(id=stat_id)\n+                    stat_instance.stat_text = stat_data.get('stat_text', stat_instance.stat_text)\n+                    stat_instance.stat_description = stat_data.get('stat_description', stat_instance.stat_description)\n+                    stat_instance.stat_number = stat_data.get('stat_number', stat_instance.stat_number)\n+                    stat_instance.save()\n+                except HeroSectionStats.DoesNotExist:\n+                    stat_instance = HeroSectionStats.objects.create(**stat_data)\n+            else:\n+                stat_instance = HeroSectionStats.objects.create(**stat_data)\n+\n+            stats_objects.append(stat_instance)\n+\n+        return stats_objects\n"
                },
                {
                    "date": 1726209050208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,38 +19,4 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-class HeroSectionStatsArraySerializer(serializers.Serializer):\n-    stats = HeroSectionStatsWriteSerializers(many=True)\n-\n-    def create(self, validated_data):\n-        stats_data = validated_data.pop('stats')\n-        print(\"Creating stats:\", stats_data)  # Log the incoming data\n-        stats_objects = []\n-        for stat_data in stats_data:\n-            stat_instance = HeroSectionStats.objects.create(**stat_data)\n-            stats_objects.append(stat_instance)\n-        return stats_objects\n-\n-    def update(self, instance, validated_data):\n-        stats_data = validated_data.get('stats')\n-        print(\"Updating stats:\", stats_data)  # Log the incoming data\n-        stats_objects = []\n-\n-        for stat_data in stats_data:\n-            stat_id = stat_data.get('id', None)\n-            if stat_id:\n-                try:\n-                    stat_instance = HeroSectionStats.objects.get(id=stat_id)\n-                    stat_instance.stat_text = stat_data.get('stat_text', stat_instance.stat_text)\n-                    stat_instance.stat_description = stat_data.get('stat_description', stat_instance.stat_description)\n-                    stat_instance.stat_number = stat_data.get('stat_number', stat_instance.stat_number)\n-                    stat_instance.save()\n-                except HeroSectionStats.DoesNotExist:\n-                    stat_instance = HeroSectionStats.objects.create(**stat_data)\n-            else:\n-                stat_instance = HeroSectionStats.objects.create(**stat_data)\n-\n-            stats_objects.append(stat_instance)\n-\n-        return stats_objects\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726209137517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,83 @@\n         fields = '__all__'\n \n from django.db import transaction\n \n+from rest_framework import serializers\n+from django.db import transaction\n+from ..models import HeroSectionStats\n+import ast\n+\n+def str_to_list(data, value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except Exception:\n+        mutable_data = data\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+\n+\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n+    def to_internal_value(self, data):\n+        # Check if 'hero_stats' is provided and needs conversion\n+        if data.get('hero_stats'):\n+            data = str_to_list(data, 'hero_stats')\n+        return super().to_internal_value(data)\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        hero_stats_data = validated_data.pop('hero_stats', [])\n+\n+        # Create the HeroSectionStats instance\n+        hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n+\n+        # Save hero stats data if provided\n+        if hero_stats_data:\n+            for stat in hero_stats_data:\n+                HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat)\n+\n+        return hero_section_stats\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        hero_stats_data = validated_data.pop('hero_stats', [])\n+\n+        # Update the HeroSectionStats instance\n+        instance = super().update(instance, validated_data)\n+\n+        # Update or create new hero stats if provided\n+        if hero_stats_data:\n+            existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n+            existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n+            provided_stat_ids = set([stat.get('id') for stat in hero_stats_data if stat.get('id')])\n+\n+            # Delete the stats that are not in the new data\n+            stats_to_delete = existing_stat_ids - provided_stat_ids\n+            HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n+\n+            # Update or create stats\n+            for stat_data in hero_stats_data:\n+                stat_id = stat_data.pop('id', None)\n+\n+                if stat_id:\n+                    # Update existing stat\n+                    stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n+                    for key, value in stat_data.items():\n+                        setattr(stat_instance, key, value)\n+                    stat_instance.save()\n+                else:\n+                    # Create a new stat\n+                    HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n+\n+        return instance\n+\n"
                },
                {
                    "date": 1726209142696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n         return hero_section_stats\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n-        hero_stats_data = validated_data.pop('hero_stats', [])\n+        hero_stats_data = validated_data.pop('stats', [])\n \n         # Update the HeroSectionStats instance\n         instance = super().update(instance, validated_data)\n \n"
                },
                {
                    "date": 1726209150593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        hero_stats_data = validated_data.pop('hero_stats', [])\n+        hero_stats_data = validated_data.pop('stats', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209190909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n         # Check if 'hero_stats' is provided and needs conversion\n-        if data.get('hero_stats'):\n+        if data.get('stats'):\n             data = str_to_list(data, 'hero_stats')\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n"
                },
                {
                    "date": 1726209196067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \n     def to_internal_value(self, data):\n         # Check if 'hero_stats' is provided and needs conversion\n         if data.get('stats'):\n-            data = str_to_list(data, 'hero_stats')\n+            data = str_to_list(data, 'stats')\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n"
                },
                {
                    "date": 1726209345406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,8 @@\n         model = HeroSectionStats\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n-        # Check if 'hero_stats' is provided and needs conversion\n         if data.get('stats'):\n             data = str_to_list(data, 'stats')\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726209396593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n         hero_stats_data = validated_data.pop('stats', [])\n+        print\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209402024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n         hero_stats_data = validated_data.pop('stats', [])\n-        print\n+        print(hero_stats_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209408738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n         hero_stats_data = validated_data.pop('stats', [])\n-        print(hero_stats_data)\n+        print(\"\"h'ero_stats_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209416715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n         hero_stats_data = validated_data.pop('stats', [])\n-        print(\"\"h'ero_stats_data)\n+        print(\"hero_stats_data\",hero_stats_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209442618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n \n         # Save hero stats data if provided\n         if hero_stats_data:\n             for stat in hero_stats_data:\n+                print()\n                 HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat)\n \n         return hero_section_stats\n \n"
                },
                {
                    "date": 1726209448006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n         # Save hero stats data if provided\n         if hero_stats_data:\n             for stat in hero_stats_data:\n-                print()\n+                print(\"stattttts\",stat)\n                 HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat)\n \n         return hero_section_stats\n \n"
                },
                {
                    "date": 1726209606455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        hero_stats_data = validated_data.pop('stats', [])\n+        hero_stats_data = self.context.get('request').data.get('departures')\n         print(\"hero_stats_data\",hero_stats_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n"
                },
                {
                    "date": 1726209732231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,63 +35,70 @@\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n \n \n+class HeroSectionStatsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = ['stat_text', 'stat_description', 'stat_number']\n+\n+\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n+    hero_stats_data = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n+\n     class Meta:\n         model = HeroSectionStats\n-        fields = '__all__'\n+        fields = ['id', 'hero_section_title', 'hero_stats_data']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n-        if data.get('stats'):\n-            data = str_to_list(data, 'stats')\n+        # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n+        if 'hero_stats_data' in data and isinstance(data['hero_stats_data'], str):\n+            try:\n+                data['hero_stats_data'] = ast.literal_eval(data['hero_stats_data'])\n+            except ValueError as e:\n+                raise serializers.ValidationError({\"hero_stats_data\": f\"Invalid data format: {str(e)}\"})\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        hero_stats_data = self.context.get('request').data.get('departures')\n-        print(\"hero_stats_data\",hero_stats_data)\n+        hero_stats_data = validated_data.pop('hero_stats_data', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n-        # Save hero stats data if provided\n-        if hero_stats_data:\n-            for stat in hero_stats_data:\n-                print(\"stattttts\",stat)\n-                HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat)\n+        # Create each stat entry in hero_stats_data\n+        for stat_data in hero_stats_data:\n+            HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n \n         return hero_section_stats\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n-        hero_stats_data = validated_data.pop('stats', [])\n+        hero_stats_data = validated_data.pop('hero_stats_data', [])\n \n         # Update the HeroSectionStats instance\n         instance = super().update(instance, validated_data)\n \n         # Update or create new hero stats if provided\n-        if hero_stats_data:\n-            existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n-            existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-            provided_stat_ids = set([stat.get('id') for stat in hero_stats_data if stat.get('id')])\n+        existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n+        existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n+        provided_stat_ids = set([stat.get('id') for stat in hero_stats_data if stat.get('id')])\n \n-            # Delete the stats that are not in the new data\n-            stats_to_delete = existing_stat_ids - provided_stat_ids\n-            HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n+        # Delete stats that are not in the new data\n+        stats_to_delete = existing_stat_ids - provided_stat_ids\n+        HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n \n-            # Update or create stats\n-            for stat_data in hero_stats_data:\n-                stat_id = stat_data.pop('id', None)\n+        # Update or create stats\n+        for stat_data in hero_stats_data:\n+            stat_id = stat_data.pop('id', None)\n \n-                if stat_id:\n-                    # Update existing stat\n-                    stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n-                    for key, value in stat_data.items():\n-                        setattr(stat_instance, key, value)\n-                    stat_instance.save()\n-                else:\n-                    # Create a new stat\n-                    HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n+            if stat_id:\n+                # Update existing stat\n+                stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n+                for key, value in stat_data.items():\n+                    setattr(stat_instance, key, value)\n+                stat_instance.save()\n+            else:\n+                # Create a new stat\n+                HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n \n-        return instance\n-\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726209774129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        hero_stats_data = validated_data.pop('hero_stats_data', [])\n+        hero_stats_data = validated_data.pop('hero_stats', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209782057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,14 +54,14 @@\n         if 'hero_stats_data' in data and isinstance(data['hero_stats_data'], str):\n             try:\n                 data['hero_stats_data'] = ast.literal_eval(data['hero_stats_data'])\n             except ValueError as e:\n-                raise serializers.ValidationError({\"hero_stats_data\": f\"Invalid data format: {str(e)}\"})\n+                raise serializers.ValidationError({\"stats_data\": f\"Invalid data format: {str(e)}\"})\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        hero_stats_data = validated_data.pop('hero_stats', [])\n+        hero_stats_data = validated_data.pop('stats', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1726209789122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,13 +50,13 @@\n         fields = ['id', 'hero_section_title', 'hero_stats_data']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n-        if 'hero_stats_data' in data and isinstance(data['hero_stats_data'], str):\n+        if 'hero_stats_data' in data and isinstance(data['stats_data'], str):\n             try:\n                 data['hero_stats_data'] = ast.literal_eval(data['hero_stats_data'])\n             except ValueError as e:\n-                raise serializers.ValidationError({\"stats_data\": f\"Invalid data format: {str(e)}\"})\n+                raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n"
                },
                {
                    "date": 1726209800141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,13 +46,13 @@\n     hero_stats_data = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'hero_section_title', 'hero_stats_data']  # Include any other fields you need\n+        fields = \n \n     def to_internal_value(self, data):\n         # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n-        if 'hero_stats_data' in data and isinstance(data['stats_data'], str):\n+        if 'hero_stats_data' in data and isinstance(data['stats'], str):\n             try:\n                 data['hero_stats_data'] = ast.literal_eval(data['hero_stats_data'])\n             except ValueError as e:\n                 raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n"
                },
                {
                    "date": 1726209817765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,15 +46,15 @@\n     hero_stats_data = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = \n+        fields = '__all__'\n \n     def to_internal_value(self, data):\n         # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n         if 'hero_stats_data' in data and isinstance(data['stats'], str):\n             try:\n-                data['hero_stats_data'] = ast.literal_eval(data['hero_stats_data'])\n+                data['hero_stats_data'] = ast.literal_eval(data['stats_data'])\n             except ValueError as e:\n                 raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726209884665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,11 +50,11 @@\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n         # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n-        if 'hero_stats_data' in data and isinstance(data['stats'], str):\n+        if 'stats_data' in data and isinstance(data['stats'], str):\n             try:\n-                data['hero_stats_data'] = ast.literal_eval(data['stats_data'])\n+                data['hero_stats_data'] = ast.literal_eval(data['stats'])\n             except ValueError as e:\n                 raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726209893689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+from rest_framework import serializers\n+from ..models import HeroSectionStats\n+import ast\n+from django.db import transaction\n+\n+class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+from django.db import transaction\n+\n+from rest_framework import serializers\n+from django.db import transaction\n+from ..models import HeroSectionStats\n+import ast\n+\n+def str_to_list(data, value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except Exception:\n+        mutable_data = data\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+\n+\n+class HeroSectionStatsSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = ['stat_text', 'stat_description', 'stat_number']\n+\n+\n+class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n+    hero_stats_data = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n+\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n+        if 'stats' in data and isinstance(data['stats'], str):\n+            try:\n+                data['stats'] = ast.literal_eval(data['stats'])\n+            except ValueError as e:\n+                raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n+        return super().to_internal_value(data)\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        hero_stats_data = validated_data.pop('stats', [])\n+\n+        # Create the HeroSectionStats instance\n+        hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n+\n+        # Create each stat entry in hero_stats_data\n+        for stat_data in hero_stats_data:\n+            HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n+\n+        return hero_section_stats\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        hero_stats_data = validated_data.pop('hero_stats_data', [])\n+\n+        # Update the HeroSectionStats instance\n+        instance = super().update(instance, validated_data)\n+\n+        # Update or create new hero stats if provided\n+        existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n+        existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n+        provided_stat_ids = set([stat.get('id') for stat in hero_stats_data if stat.get('id')])\n+\n+        # Delete stats that are not in the new data\n+        stats_to_delete = existing_stat_ids - provided_stat_ids\n+        HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n+\n+        # Update or create stats\n+        for stat_data in hero_stats_data:\n+            stat_id = stat_data.pop('id', None)\n+\n+            if stat_id:\n+                # Update existing stat\n+                stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n+                for key, value in stat_data.items():\n+                    setattr(stat_instance, key, value)\n+                stat_instance.save()\n+            else:\n+                # Create a new stat\n+                HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n+\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726209899136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         model = HeroSectionStats\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n-        # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n+        # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n             try:\n                 data['stats'] = ast.literal_eval(data['stats'])\n             except ValueError as e:\n@@ -59,14 +59,14 @@\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        hero_stats_data = validated_data.pop('stats', [])\n+        stats = validated_data.pop('stats', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n-        # Create each stat entry in hero_stats_data\n+        # Create each stat entry in stats\n         for stat_data in hero_stats_data:\n             HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n \n         return hero_section_stats\n@@ -100,109 +100,5 @@\n             else:\n                 # Create a new stat\n                 HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n \n-        return instance\n-from rest_framework import serializers\n-from ..models import HeroSectionStats\n-import ast\n-from django.db import transaction\n-\n-class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-from django.db import transaction\n-\n-from rest_framework import serializers\n-from django.db import transaction\n-from ..models import HeroSectionStats\n-import ast\n-\n-def str_to_list(data, value_to_convert):\n-    try:\n-        mutable_data = data.dict()\n-    except Exception:\n-        mutable_data = data\n-    value_to_convert_data = mutable_data.get(value_to_convert)\n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data\n-    try:\n-        variations = ast.literal_eval(value_to_convert_data)\n-        mutable_data[value_to_convert] = variations\n-        return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n-\n-\n-class HeroSectionStatsSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = ['stat_text', 'stat_description', 'stat_number']\n-\n-\n-class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n-    hero_stats_data = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n-\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = '__all__'\n-\n-    def to_internal_value(self, data):\n-        # If 'hero_stats_data' is in string format, convert it to list (if necessary)\n-        if 'stats_data' in data and isinstance(data['stats'], str):\n-            try:\n-                data['hero_stats_data'] = ast.literal_eval(data['stats'])\n-            except ValueError as e:\n-                raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n-        return super().to_internal_value(data)\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        hero_stats_data = validated_data.pop('stats', [])\n-\n-        # Create the HeroSectionStats instance\n-        hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n-\n-        # Create each stat entry in hero_stats_data\n-        for stat_data in hero_stats_data:\n-            HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n-\n-        return hero_section_stats\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        hero_stats_data = validated_data.pop('hero_stats_data', [])\n-\n-        # Update the HeroSectionStats instance\n-        instance = super().update(instance, validated_data)\n-\n-        # Update or create new hero stats if provided\n-        existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n-        existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-        provided_stat_ids = set([stat.get('id') for stat in hero_stats_data if stat.get('id')])\n-\n-        # Delete stats that are not in the new data\n-        stats_to_delete = existing_stat_ids - provided_stat_ids\n-        HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n-\n-        # Update or create stats\n-        for stat_data in hero_stats_data:\n-            stat_id = stat_data.pop('id', None)\n-\n-            if stat_id:\n-                # Update existing stat\n-                stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n-                for key, value in stat_data.items():\n-                    setattr(stat_instance, key, value)\n-                stat_instance.save()\n-            else:\n-                # Create a new stat\n-                HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n-\n         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726209904904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,24 +65,24 @@\n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n         # Create each stat entry in stats\n-        for stat_data in hero_stats_data:\n+        for stat_data in stats:\n             HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n \n         return hero_section_stats\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n-        hero_stats_data = validated_data.pop('hero_stats_data', [])\n+        stats = validated_data.pop('stats', [])\n \n         # Update the HeroSectionStats instance\n         instance = super().update(instance, validated_data)\n \n         # Update or create new hero stats if provided\n         existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n         existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-        provided_stat_ids = set([stat.get('id') for stat in hero_stats_data if stat.get('id')])\n+        provided_stat_ids = set([stat.get('id') for stat in stats if stat.get('id')])\n \n         # Delete stats that are not in the new data\n         stats_to_delete = existing_stat_ids - provided_stat_ids\n         HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n"
                },
                {
                    "date": 1726209913316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         fields = ['stat_text', 'stat_description', 'stat_number']\n \n \n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n-    hero_stats_data = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n+    stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n \n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n@@ -87,9 +87,9 @@\n         stats_to_delete = existing_stat_ids - provided_stat_ids\n         HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n \n         # Update or create stats\n-        for stat_data in hero_stats_data:\n+        for stat_data in stats:\n             stat_id = stat_data.pop('id', None)\n \n             if stat_id:\n                 # Update existing stat\n"
                },
                {
                    "date": 1726210041185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,20 +35,23 @@\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n \n \n+from rest_framework import serializers\n+from django.db import transaction\n+from ..models import HeroSectionStats\n+\n class HeroSectionStatsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = ['stat_text', 'stat_description', 'stat_number']\n \n-\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n-    stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple hero stats\n+    stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = '__all__'\n+        fields = ['id', 'hero_section_title', 'stats']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n@@ -59,37 +62,37 @@\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        stats = validated_data.pop('stats', [])\n+        stats_data = validated_data.pop('stats', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n \n         # Create each stat entry in stats\n-        for stat_data in stats:\n+        for stat_data in stats_data:\n             HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n \n         return hero_section_stats\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n-        stats = validated_data.pop('stats', [])\n+        stats_data = validated_data.pop('stats', [])\n \n         # Update the HeroSectionStats instance\n         instance = super().update(instance, validated_data)\n \n-        # Update or create new hero stats if provided\n+        # Update or create new stats if provided\n         existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n         existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-        provided_stat_ids = set([stat.get('id') for stat in stats if stat.get('id')])\n+        provided_stat_ids = set([stat.get('id') for stat in stats_data if stat.get('id')])\n \n         # Delete stats that are not in the new data\n         stats_to_delete = existing_stat_ids - provided_stat_ids\n         HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n \n         # Update or create stats\n-        for stat_data in stats:\n+        for stat_data in stats_data:\n             stat_id = stat_data.pop('id', None)\n \n             if stat_id:\n                 # Update existing stat\n@@ -100,5 +103,5 @@\n             else:\n                 # Create a new stat\n                 HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n \n-        return instance\n\\ No newline at end of file\n+        return instance\n"
                },
                {
                    "date": 1726210069158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'hero_section_title', 'stats']  # Include any other fields you need\n+        fields = ['id', 'stat_text', 'stats']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210081118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'stat_text', 'stats']  # Include any other fields you need\n+        fields = ['id', 'stat_text',, 'stats']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210086643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'stat_text',, 'stats']  # Include any other fields you need\n+        fields = ['id', 'stat_text','stat_description', 'stats']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210094512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'stat_text','stat_description', 'stats']  # Include any other fields you need\n+        fields = ['id', 'stat_text','stat_description','stat_number' 'stats']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210116992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'stat_text','stat_description','stat_number' 'stats']  # Include any other fields you need\n+        fields = ['id', 'stat_text','stat_description','stat_number' '']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210122171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'stat_text','stat_description','stat_number' '']  # Include any other fields you need\n+        fields = ['id', 'stat_text','stat_description','stat_number' ,'stats']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210132148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n \n     class Meta:\n         model = HeroSectionStats\n-        fields = ['id', 'stat_text','stat_description','stat_number' ,'stats']  # Include any other fields you need\n+        fields = ['id', 'stat_text','stat_description','stat_number' ']  # Include any other fields you need\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210157229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,15 +44,8 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = ['stat_text', 'stat_description', 'stat_number']\n \n-class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n-    stats = HeroSectionStatsSerializer(many=True, write_only=True)  # Handle multiple stats\n-\n-    class Meta:\n-        model = HeroSectionStats\n-        fields = ['id', 'stat_text','stat_description','stat_number' ']  # Include any other fields you need\n-\n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n             try:\n"
                },
                {
                    "date": 1726210162703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n class HeroSectionStatsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n-        fields = ['stat_text', 'stat_description', 'stat_number']\n+        fields = ''\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210169753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n class HeroSectionStatsSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n-        fields = ''\n+        fields = '__all__'\n \n     def to_internal_value(self, data):\n         # If 'stats' is in string format, convert it to list (if necessary)\n         if 'stats' in data and isinstance(data['stats'], str):\n"
                },
                {
                    "date": 1726210250552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n from rest_framework import serializers\n from django.db import transaction\n from ..models import HeroSectionStats\n \n-class HeroSectionStatsSerializer(serializers.ModelSerializer):\n+class HeroSectionStatsWSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1726210257640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,14 +34,9 @@\n         return mutable_data\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n \n-\n-from rest_framework import serializers\n-from django.db import transaction\n-from ..models import HeroSectionStats\n-\n-class HeroSectionStatsWSerializer(serializers.ModelSerializer):\n+class HeroSectionStatsWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1726210265518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,15 +12,9 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-from django.db import transaction\n \n-from rest_framework import serializers\n-from django.db import transaction\n-from ..models import HeroSectionStats\n-import ast\n-\n def str_to_list(data, value_to_convert):\n     try:\n         mutable_data = data.dict()\n     except Exception:\n"
                },
                {
                    "date": 1726210274274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,16 @@\n from ..models import HeroSectionStats\n import ast\n from django.db import transaction\n \n+from django.db import transaction\n+\n+from rest_framework import serializers\n+from django.db import transaction\n+from ..models import HeroSectionStats\n+import ast\n+\n+\n class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n"
                },
                {
                    "date": 1726210289791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         return mutable_data\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n \n-class HeroSectionStatsWriteSerializer(serializers.ModelSerializer):\n+class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1726210389604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,10 @@\n         stats_data = validated_data.pop('stats', [])\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n+        \n+        \n \n         # Create each stat entry in stats\n         for stat_data in stats_data:\n             HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n"
                },
                {
                    "date": 1726210398425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,13 @@\n \n     @transaction.atomic\n     def create(self, validated_data):\n         stats_data = validated_data.pop('stats', [])\n+        \n+        departures_data = self.context.get('request').data.get('departures')\n+        import json\n+        departures_data =  json.loads(departures_data)\n+       \n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n         \n"
                },
                {
                    "date": 1726210404380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n         stats_data = validated_data.pop('stats', [])\n         \n-        departures_data = self.context.get('request').data.get('departures')\n+        stats_data = self.context.get('request').data.get('departures')\n         import json\n         departures_data =  json.loads(departures_data)\n        \n \n"
                },
                {
                    "date": 1726210413555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,11 +54,11 @@\n     @transaction.atomic\n     def create(self, validated_data):\n         stats_data = validated_data.pop('stats', [])\n         \n-        stats_data = self.context.get('request').data.get('departures')\n+        stats_data = self.context.get('request').data.get('stats')\n         import json\n-        departures_data =  json.loads(departures_data)\n+        stats_data =  json.loads(stats_data)\n        \n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n"
                },
                {
                    "date": 1726210420738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,12 @@\n         return super().to_internal_value(data)\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        stats_data = validated_data.pop('stats', [])\n+        # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n+        print\n         import json\n         stats_data =  json.loads(stats_data)\n        \n \n"
                },
                {
                    "date": 1726210427211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print\n+        print(\"\\n\\n\\n\\n\",)\n         import json\n         stats_data =  json.loads(stats_data)\n        \n \n"
                },
                {
                    "date": 1726210474383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print(\"\\n\\n\\n\\n\",)\n+        print(\"\\n\\n\\n\\n\",stats_data)\n         import json\n         stats_data =  json.loads(stats_data)\n        \n \n"
                },
                {
                    "date": 1726210508234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print(\"\\n\\n\\n\\n\",stats_data)\n+        print(\"\\n\\n\\n\\n\",type(stats_data)\n         import json\n         stats_data =  json.loads(stats_data)\n        \n \n"
                },
                {
                    "date": 1726210517623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print(\"\\n\\n\\n\\n\",type(stats_data)\n+        print(\"\\n\\n\\n\\n\",type(stats_data))\n         import json\n         stats_data =  json.loads(stats_data)\n        \n \n"
                },
                {
                    "date": 1726210557570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,8 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print(\"\\n\\n\\n\\n\",type(stats_data))\n-        import json\n-        stats_data =  json.loads(stats_data)\n-       \n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n         \n"
                },
                {
                    "date": 1726210569544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n+        print(vali)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n         \n"
                },
                {
                    "date": 1726210577035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print(vali)\n+        print('validated_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n         \n"
                },
                {
                    "date": 1726210584425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print('validated_data)\n+        print(\"hfihifohifijorwfjrwiofjwofjow\\n\\n\\n\\n'validated_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n         \n"
                },
                {
                    "date": 1726210600933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     def create(self, validated_data):\n         # stats_data = validated_data.pop('stats', [])\n         \n         stats_data = self.context.get('request').data.get('stats')\n-        print(\"hfihifohifijorwfjrwiofjwofjow\\n\\n\\n\\n'validated_data)\n+        print(\"hfihifohifijorwfjrwiofjwofjow\\n\\n\\n\\n\",validated_data)\n \n         # Create the HeroSectionStats instance\n         hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n         \n"
                },
                {
                    "date": 1726210627683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         stats_data = self.context.get('request').data.get('stats')\n         print(\"hfihifohifijorwfjrwiofjwofjow\\n\\n\\n\\n\",validated_data)\n \n         # Create the HeroSectionStats instance\n-        hero_section_stats = HeroSectionStats.objects.create(**validated_data)\n+        hero_section_stats = HeroSectionStats.objects.create(**validastats_datated_data)\n         \n         \n \n         # Create each stat entry in stats\n"
                },
                {
                    "date": 1726210637833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         stats_data = self.context.get('request').data.get('stats')\n         print(\"hfihifohifijorwfjrwiofjwofjow\\n\\n\\n\\n\",validated_data)\n \n         # Create the HeroSectionStats instance\n-        hero_section_stats = HeroSectionStats.objects.create(**validastats_datated_data)\n+        hero_section_stats = HeroSectionStats.objects.create(**stats_data)\n         \n         \n \n         # Create each stat entry in stats\n"
                },
                {
                    "date": 1726210669498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,53 +50,5 @@\n             except ValueError as e:\n                 raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n         return super().to_internal_value(data)\n \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        # stats_data = validated_data.pop('stats', [])\n-        \n-        stats_data = self.context.get('request').data.get('stats')\n-        print(\"hfihifohifijorwfjrwiofjwofjow\\n\\n\\n\\n\",validated_data)\n-\n-        # Create the HeroSectionStats instance\n-        hero_section_stats = HeroSectionStats.objects.create(**stats_data)\n-        \n-        \n-\n-        # Create each stat entry in stats\n-        for stat_data in stats_data:\n-            HeroSectionStats.objects.create(hero_section=hero_section_stats, **stat_data)\n-\n-        return hero_section_stats\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        stats_data = validated_data.pop('stats', [])\n-\n-        # Update the HeroSectionStats instance\n-        instance = super().update(instance, validated_data)\n-\n-        # Update or create new stats if provided\n-        existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n-        existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-        provided_stat_ids = set([stat.get('id') for stat in stats_data if stat.get('id')])\n-\n-        # Delete stats that are not in the new data\n-        stats_to_delete = existing_stat_ids - provided_stat_ids\n-        HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n-\n-        # Update or create stats\n-        for stat_data in stats_data:\n-            stat_id = stat_data.pop('id', None)\n-\n-            if stat_id:\n-                # Update existing stat\n-                stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n-                for key, value in stat_data.items():\n-                    setattr(stat_instance, key, value)\n-                stat_instance.save()\n-            else:\n-                # Create a new stat\n-                HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n-\n-        return instance\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1726210684306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,14 +41,6 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-    def to_internal_value(self, data):\n-        # If 'stats' is in string format, convert it to list (if necessary)\n-        if 'stats' in data and isinstance(data['stats'], str):\n-            try:\n-                data['stats'] = ast.literal_eval(data['stats'])\n-            except ValueError as e:\n-                raise serializers.ValidationError({\"stats\": f\"Invalid data format: {str(e)}\"})\n-        return super().to_internal_value(data)\n \n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1726210864528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,24 +20,8 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-\n-def str_to_list(data, value_to_convert):\n-    try:\n-        mutable_data = data.dict()\n-    except Exception:\n-        mutable_data = data\n-    value_to_convert_data = mutable_data.get(value_to_convert)\n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data\n-    try:\n-        variations = ast.literal_eval(value_to_convert_data)\n-        mutable_data[value_to_convert] = variations\n-        return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n-\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n"
                }
            ],
            "date": 1726120849421,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import HeroSectionStats\n\nclass HeroSectionStatsListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = HeroSectionStats\n        fields = '__all__'\n\nclass HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = HeroSectionStats\n        fields = '__all__'\n\nclass HeroSectionWriteSerializers(serializers.ModelSerializer):\n    stats = HeroSectionStatsWriteSerializers(many=True, read_only=True)\n\n    def to_internal_value(self, data):\n        # Handle 'stats' data similar to 'packages' in the DestinationWriteSerializers\n        if data.get('stats'):\n            data = str_to_list(data, 'stats')\n            return super().to_internal_value(data)\n        return super().to_internal_value(data)\n\n    class Meta:\n        model = HeroSection\n        fields = '__all__'\n\n    @transaction.atomic\n    def create(self, validated_data):\n        # Handle 'stats' data (pop to extract it before creating the HeroSection)\n        stats_data = validated_data.pop('stats', [])\n        \n        # Create the HeroSection instance\n        hero_section = HeroSection.objects.create(**validated_data)\n\n        # Process HeroSectionStats data (if provided)\n        if stats_data:\n            for stat_data in stats_data:\n                stat_serializer = HeroSectionStatsWriteSerializers(data=stat_data)\n                if stat_serializer.is_valid(raise_exception=True):\n                    stat_serializer.save(hero_section=hero_section)  # Assuming the relation field is `hero_section`\n\n        return hero_section\n\n    @transaction.atomic\n    def update(self, instance, validated_data):\n        # Parse 'stats' data from the validated data\n        stats_data = validated_data.pop('stats', [])\n\n        # Update the HeroSection instance\n        instance = super().update(instance, validated_data)\n\n        if stats_data:\n            # Get existing stats IDs from the database\n            existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n            existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n\n            # Extract the provided stat IDs from the request data\n            provided_stat_ids = set([stat.get('id') for stat in stats_data if stat.get('id')])\n\n            # Delete stats that are not in the provided data\n            stats_to_delete = existing_stat_ids - provided_stat_ids\n            HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n\n            # Update or create stats\n            for stat_data in stats_data:\n                stat_id = stat_data.pop('id', None)\n                if stat_id:\n                    # Update existing stat\n                    stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n                    for key, value in stat_data.items():\n                        setattr(stat_instance, key, value)\n                    stat_instance.save()\n                else:\n                    # Create a new stat if it doesn't exist\n                    HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n        else:\n            # If no stats data, clear existing stats\n            HeroSectionStats.objects.filter(hero_section=instance).delete()\n\n        return instance\n"
        }
    ]
}