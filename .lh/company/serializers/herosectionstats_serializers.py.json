{
    "sourceFile": "company/serializers/herosectionstats_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1726120849421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726120911360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from rest_framework import serializers\n from ..models import HeroSectionStats\n+import ast\n+from django.db import transaction\n \n class HeroSectionStatsListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n"
                },
                {
                    "date": 1726120925293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-class HeroSectionWriteSerializers(serializers.ModelSerializer):\n+class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n     stats = HeroSectionStatsWriteSerializers(many=True, read_only=True)\n \n     def to_internal_value(self, data):\n         # Handle 'stats' data similar to 'packages' in the DestinationWriteSerializers\n"
                },
                {
                    "date": 1726121015650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,72 +12,4 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-class HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n-    stats = HeroSectionStatsWriteSerializers(many=True, read_only=True)\n-\n-    def to_internal_value(self, data):\n-        # Handle 'stats' data similar to 'packages' in the DestinationWriteSerializers\n-        if data.get('stats'):\n-            data = str_to_list(data, 'stats')\n-            return super().to_internal_value(data)\n-        return super().to_internal_value(data)\n-\n-    class Meta:\n-        model = HeroSection\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        # Handle 'stats' data (pop to extract it before creating the HeroSection)\n-        stats_data = validated_data.pop('stats', [])\n-        \n-        # Create the HeroSection instance\n-        hero_section = HeroSection.objects.create(**validated_data)\n-\n-        # Process HeroSectionStats data (if provided)\n-        if stats_data:\n-            for stat_data in stats_data:\n-                stat_serializer = HeroSectionStatsWriteSerializers(data=stat_data)\n-                if stat_serializer.is_valid(raise_exception=True):\n-                    stat_serializer.save(hero_section=hero_section)  # Assuming the relation field is `hero_section`\n-\n-        return hero_section\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        # Parse 'stats' data from the validated data\n-        stats_data = validated_data.pop('stats', [])\n-\n-        # Update the HeroSection instance\n-        instance = super().update(instance, validated_data)\n-\n-        if stats_data:\n-            # Get existing stats IDs from the database\n-            existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n-            existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n-\n-            # Extract the provided stat IDs from the request data\n-            provided_stat_ids = set([stat.get('id') for stat in stats_data if stat.get('id')])\n-\n-            # Delete stats that are not in the provided data\n-            stats_to_delete = existing_stat_ids - provided_stat_ids\n-            HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n-\n-            # Update or create stats\n-            for stat_data in stats_data:\n-                stat_id = stat_data.pop('id', None)\n-                if stat_id:\n-                    # Update existing stat\n-                    stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n-                    for key, value in stat_data.items():\n-                        setattr(stat_instance, key, value)\n-                    stat_instance.save()\n-                else:\n-                    # Create a new stat if it doesn't exist\n-                    HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n-        else:\n-            # If no stats data, clear existing stats\n-            HeroSectionStats.objects.filter(hero_section=instance).delete()\n-\n-        return instance\n"
                },
                {
                    "date": 1726121029421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,4 +12,58 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n+from rest_framework import serializers\n+from django.db import transaction\n+from .models import HeroSectionStats\n+\n+class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = HeroSectionStats\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        # Convert stats data if necessary (similar to how 'packages' were handled)\n+        if isinstance(data, list):\n+            return [super().to_internal_value(item) for item in data]\n+        return super().to_internal_value(data)\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        if isinstance(validated_data, list):\n+            # Bulk create if validated_data is a list of dictionaries\n+            stats = HeroSectionStats.objects.bulk_create(\n+                [HeroSectionStats(**item) for item in validated_data]\n+            )\n+        else:\n+            # Create a single stat entry\n+            stats = HeroSectionStats.objects.create(**validated_data)\n+        return stats\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        if isinstance(validated_data, list):\n+            # Handle bulk update\n+            existing_stats = {stat.id: stat for stat in instance}\n+            updated_stats = []\n+\n+            for stat_data in validated_data:\n+                stat_id = stat_data.get('id', None)\n+                if stat_id and stat_id in existing_stats:\n+                    stat_instance = existing_stats[stat_id]\n+                    for attr, value in stat_data.items():\n+                        setattr(stat_instance, attr, value)\n+                    stat_instance.save()\n+                    updated_stats.append(stat_instance)\n+                else:\n+                    # Create a new stat if not already existing\n+                    new_stat = HeroSectionStats.objects.create(**stat_data)\n+                    updated_stats.append(new_stat)\n+\n+            return updated_stats\n+        else:\n+            # Handle single instance update\n+            for attr, value in validated_data.items():\n+                setattr(instance, attr, value)\n+            instance.save()\n+            return instance\n"
                },
                {
                    "date": 1726121038961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,8 @@\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n \n-from rest_framework import serializers\n-from django.db import transaction\n-from .models import HeroSectionStats\n-\n class HeroSectionStatsWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = HeroSectionStats\n         fields = '__all__'\n"
                },
                {
                    "date": 1726121067478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,8 @@\n         model = HeroSectionStats\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n-        # Convert stats data if necessary (similar to how 'packages' were handled)\n         if isinstance(data, list):\n             return [super().to_internal_value(item) for item in data]\n         return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1726121112534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,8 @@\n                         setattr(stat_instance, attr, value)\n                     stat_instance.save()\n                     updated_stats.append(stat_instance)\n                 else:\n-                    # Create a new stat if not already existing\n                     new_stat = HeroSectionStats.objects.create(**stat_data)\n                     updated_stats.append(new_stat)\n \n             return updated_stats\n"
                }
            ],
            "date": 1726120849421,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import HeroSectionStats\n\nclass HeroSectionStatsListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = HeroSectionStats\n        fields = '__all__'\n\nclass HeroSectionStatsRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = HeroSectionStats\n        fields = '__all__'\n\nclass HeroSectionWriteSerializers(serializers.ModelSerializer):\n    stats = HeroSectionStatsWriteSerializers(many=True, read_only=True)\n\n    def to_internal_value(self, data):\n        # Handle 'stats' data similar to 'packages' in the DestinationWriteSerializers\n        if data.get('stats'):\n            data = str_to_list(data, 'stats')\n            return super().to_internal_value(data)\n        return super().to_internal_value(data)\n\n    class Meta:\n        model = HeroSection\n        fields = '__all__'\n\n    @transaction.atomic\n    def create(self, validated_data):\n        # Handle 'stats' data (pop to extract it before creating the HeroSection)\n        stats_data = validated_data.pop('stats', [])\n        \n        # Create the HeroSection instance\n        hero_section = HeroSection.objects.create(**validated_data)\n\n        # Process HeroSectionStats data (if provided)\n        if stats_data:\n            for stat_data in stats_data:\n                stat_serializer = HeroSectionStatsWriteSerializers(data=stat_data)\n                if stat_serializer.is_valid(raise_exception=True):\n                    stat_serializer.save(hero_section=hero_section)  # Assuming the relation field is `hero_section`\n\n        return hero_section\n\n    @transaction.atomic\n    def update(self, instance, validated_data):\n        # Parse 'stats' data from the validated data\n        stats_data = validated_data.pop('stats', [])\n\n        # Update the HeroSection instance\n        instance = super().update(instance, validated_data)\n\n        if stats_data:\n            # Get existing stats IDs from the database\n            existing_stats = HeroSectionStats.objects.filter(hero_section=instance)\n            existing_stat_ids = set(existing_stats.values_list('id', flat=True))\n\n            # Extract the provided stat IDs from the request data\n            provided_stat_ids = set([stat.get('id') for stat in stats_data if stat.get('id')])\n\n            # Delete stats that are not in the provided data\n            stats_to_delete = existing_stat_ids - provided_stat_ids\n            HeroSectionStats.objects.filter(id__in=stats_to_delete).delete()\n\n            # Update or create stats\n            for stat_data in stats_data:\n                stat_id = stat_data.pop('id', None)\n                if stat_id:\n                    # Update existing stat\n                    stat_instance = HeroSectionStats.objects.get(id=stat_id, hero_section=instance)\n                    for key, value in stat_data.items():\n                        setattr(stat_instance, key, value)\n                    stat_instance.save()\n                else:\n                    # Create a new stat if it doesn't exist\n                    HeroSectionStats.objects.create(hero_section=instance, **stat_data)\n        else:\n            # If no stats data, clear existing stats\n            HeroSectionStats.objects.filter(hero_section=instance).delete()\n\n        return instance\n"
        }
    ]
}