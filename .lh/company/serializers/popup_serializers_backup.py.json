{
    "sourceFile": "company/serializers/popup_serializers_backup.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1725770777912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725771274597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n             popup_instance = self.create_popup_instance(title, url, image)\n             popups.append(popup_instance)\n \n         # Return all the data in the payload\n-        return popups\n+        return popups[0]\n \n     def create_popup_instance(self, title, url, image):\n         \"\"\"Helper function to create a Popup instance.\"\"\"\n         if image:\n"
                },
                {
                    "date": 1725772295817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,57 +10,75 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n class PopupWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n+    @transaction.atomic\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n+        try:\n+            # Check if the request data is a list (array) or a single object\n+            if isinstance(request.data.get('data'), list):\n+                # Handle array type data\n+                index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n \n-        # Check if the request data is a list (array) or a single object\n-        if isinstance(request.data.get('data'), list):\n-            # Handle array type data\n-            index = 0\n-            while f'data[{index}][title]' in request.data:\n-                title = request.data.get(f'data[{index}][title]')\n-                url = request.data.get(f'data[{index}][url]')\n-                image = request.FILES.get(f'data[{index}][image]', None)\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n \n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+                    index += 1\n+            else:\n+                # Handle single object data\n+                title = request.data.get('data[title]')\n+                url = request.data.get('data[url]')\n+                image = request.FILES.get('data[image]', None)\n+\n                 if not title:\n-                    raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n+                    raise ValidationError(\"Title is required for popup.\")\n \n+                # Debugging: print out the data to verify\n+                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n                 popup_instance = self.create_popup_instance(title, url, image)\n                 popups.append(popup_instance)\n-                index += 1\n-        else:\n-            # Handle single object data\n-            title = request.data.get('data[title]')\n-            url = request.data.get('data[url]')\n-            image = request.FILES.get('data[image]', None)\n \n-            if not title:\n-                raise serializers.ValidationError(\"Title is required for popup.\")\n+            # Return the saved popup instances\n+            return popups\n+        except Exception as e:\n+            # Rollback the transaction in case of error and log the issue\n+            transaction.set_rollback(True)\n+            print(f\"Error occurred: {e}\")\n+            raise\n \n-            popup_instance = self.create_popup_instance(title, url, image)\n-            popups.append(popup_instance)\n-\n-        # Return all the data in the payload\n-        return popups[0]\n-\n     def create_popup_instance(self, title, url, image):\n         \"\"\"Helper function to create a Popup instance.\"\"\"\n-        if image:\n-            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-            popup_instance.url = popup_instance.image.url\n-        else:\n-            popup_instance = Popup.objects.create(title=title, url=url)\n+        try:\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n-        popup_instance.save()\n-        return popup_instance\n+            popup_instance.save()\n+            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+            return popup_instance\n+        except Exception as e:\n+            print(f\"Error while saving popup: {e}\")\n+            raise\n \n     def to_representation(self, instance):\n         \"\"\"Convert to a format that matches the original request structure.\"\"\"\n         if isinstance(instance, list):\n"
                },
                {
                    "date": 1725772305498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,10 @@\n     class Meta:\n         model = Popup\n         fields = '__all__'\n \n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n \n+\n class PopupWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n         fields = '__all__'\n"
                },
                {
                    "date": 1725772310778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from rest_framework import serializers\n from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n \n class PopupListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Popup\n"
                },
                {
                    "date": 1725772613756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n+         data_entries = request.data.get('data', [])\n         try:\n             # Check if the request data is a list (array) or a single object\n             if isinstance(request.data.get('data'), list):\n                 # Handle array type data\n"
                },
                {
                    "date": 1725772642186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n-         data_entries = request.data.get('data', [])\n+        data_entries = request.data.get('data', [])\n         try:\n             # Check if the request data is a list (array) or a single object\n             if isinstance(request.data.get('data'), list):\n                 # Handle array type data\n@@ -42,8 +42,9 @@\n                     print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n+            \n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n                 url = request.data.get('data[url]')\n"
                },
                {
                    "date": 1725772647827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n                     print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n+        elif:\n             \n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n"
                },
                {
                    "date": 1725772653528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                     print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n-        elif:\n+        elif\n             \n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n"
                },
                {
                    "date": 1725772664819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                     print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n-        elif\n+            elif sinstance(data_entries, list):\n             \n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n"
                },
                {
                    "date": 1725772672885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                     print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n-            elif sinstance(data_entries, list):\n+            elif isinstance(data_entries, list):\n             \n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n"
                },
                {
                    "date": 1725772690184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,10 @@\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n             elif isinstance(data_entries, list):\n+                \n+                \n             \n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n"
                },
                {
                    "date": 1725772700113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,11 +43,21 @@\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n             elif isinstance(data_entries, list):\n-                \n-                \n-            \n+                # Handle array type data\n+                for index, data in enumerate(data_entries):\n+                    title = data.get('title')\n+                    url = data.get('url')\n+                    image = request.FILES.get(f'data[{index}][image]', None)  # Handle image in the files\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n                 url = request.data.get('data[url]')\n"
                },
                {
                    "date": 1725772993216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n                 popup_instance = self.create_popup_instance(title, url, image)\n                 popups.append(popup_instance)\n \n             # Return the saved popup instances\n-            return popups\n+            return popups[0]\n         except Exception as e:\n             # Rollback the transaction in case of error and log the issue\n             transaction.set_rollback(True)\n             print(f\"Error occurred: {e}\")\n"
                },
                {
                    "date": 1725773042237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n                 popup_instance = self.create_popup_instance(title, url, image)\n                 popups.append(popup_instance)\n \n             # Return the saved popup instances\n-            return popups[0]\n+            return popups\n         except Exception as e:\n             # Rollback the transaction in case of error and log the issue\n             transaction.set_rollback(True)\n             print(f\"Error occurred: {e}\")\n@@ -83,9 +83,9 @@\n         \"\"\"Helper function to create a Popup instance.\"\"\"\n         try:\n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                popup_instance.url = popup_instance.image.url\n+                # popup_instance.url = popup_instance.image.url\n             else:\n                 popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n"
                },
                {
                    "date": 1725773093831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # popup_instance.url = popup_instance.image.url\n             else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n+                popup_instance = Popup.objects.create(title=title,, image=image, url=url)\n \n             popup_instance.save()\n             print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n             return popup_instance\n"
                },
                {
                    "date": 1725773110657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # popup_instance.url = popup_instance.image.url\n             else:\n-                popup_instance = Popup.objects.create(title=title,, image=image, url=url)\n+                popup_instance = Popup.objects.create(title=title url=url)\n \n             popup_instance.save()\n             print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n             return popup_instance\n"
                },
                {
                    "date": 1725773172168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         request = self.context['request']\n         data_entries = request.data.get('data', [])\n         try:\n             # Check if the request data is a list (array) or a single object\n-            if isinstance(request.data.get('data'), list):\n+            if isinstance(request.data.get('popup'), list):\n                 # Handle array type data\n                 index = 0\n                 while f'data[{index}][title]' in request.data:\n                     title = request.data.get(f'data[{index}][title]')\n@@ -85,9 +85,9 @@\n             if image:\n                 popup_instance = Popup.objects.create(title=title, image=image, url=url)\n                 # popup_instance.url = popup_instance.image.url\n             else:\n-                popup_instance = Popup.objects.create(title=title url=url)\n+                popup_instance = Popup.objects.create(title=title, url=url)\n \n             popup_instance.save()\n             print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n             return popup_instance\n"
                },
                {
                    "date": 1725773286292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     @transaction.atomic\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n-        data_entries = request.data.get('data', [])\n+        data_entries = request.data.get('popup', [])\n         try:\n             # Check if the request data is a list (array) or a single object\n             if isinstance(request.data.get('popup'), list):\n                 # Handle array type data\n"
                },
                {
                    "date": 1725773318027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        popups = []\n+        request = self.context['request']\n+        data_entries = request.data.get('data', [])\n+        try:\n+            # Check if the request data is a list (array) or a single object\n+            if isinstance(request.data.get('data'), list):\n+                # Handle array type data\n+                index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+                    index += 1\n+            elif isinstance(data_entries, list):\n+                # Handle array type data\n+                for index, data in enumerate(data_entries):\n+                    title = data.get('title')\n+                    url = data.get('url')\n+                    image = request.FILES.get(f'data[{index}][image]', None)  # Handle image in the files\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+            else:\n+                # Handle single object data\n+                title = request.data.get('data[title]')\n+                url = request.data.get('data[url]')\n+                image = request.FILES.get('data[image]', None)\n+\n+                if not title:\n+                    raise ValidationError(\"Title is required for popup.\")\n+\n+                # Debugging: print out the data to verify\n+                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                popup_instance = self.create_popup_instance(title, url, image)\n+                popups.append(popup_instance)\n+\n+            # Return the saved popup instances\n+            return popups\n+        except Exception as e:\n+            # Rollback the transaction in case of error and log the issue\n+            transaction.set_rollback(True)\n+            print(f\"Error occurred: {e}\")\n+            raise\n+\n+    def create_popup_instance(self, title, url, image):\n+        \"\"\"Helper function to create a Popup instance.\"\"\"\n+        try:\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n+\n+            popup_instance.save()\n+            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+            return popup_instance\n+        except Exception as e:\n+            print(f\"Error while saving popup: {e}\")\n+            raise\n+\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n"
                },
                {
                    "date": 1725773328159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n         data_entries = request.data.get('data', [])\n+        print\n         try:\n             # Check if the request data is a list (array) or a single object\n             if isinstance(request.data.get('data'), list):\n                 # Handle array type data\n@@ -109,116 +110,4 @@\n             \"url\": instance.url,\n             \"created_date\": instance.created_date,\n             \"updated_date\": instance.updated_date\n         }\n-from rest_framework import serializers\n-from ..models import Popup\n-from django.db import transaction\n-from rest_framework.exceptions import ValidationError\n-\n-class PopupListSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-class PopupRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-\n-\n-class PopupWriteSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Popup\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        popups = []\n-        request = self.context['request']\n-        data_entries = request.data.get('popup', [])\n-        try:\n-            # Check if the request data is a list (array) or a single object\n-            if isinstance(request.data.get('popup'), list):\n-                # Handle array type data\n-                index = 0\n-                while f'data[{index}][title]' in request.data:\n-                    title = request.data.get(f'data[{index}][title]')\n-                    url = request.data.get(f'data[{index}][url]')\n-                    image = request.FILES.get(f'data[{index}][image]', None)\n-\n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n-                    popups.append(popup_instance)\n-                    index += 1\n-            elif isinstance(data_entries, list):\n-                # Handle array type data\n-                for index, data in enumerate(data_entries):\n-                    title = data.get('title')\n-                    url = data.get('url')\n-                    image = request.FILES.get(f'data[{index}][image]', None)  # Handle image in the files\n-\n-                    if not title:\n-                        raise ValidationError(f\"Title is required for popup {index}.\")\n-\n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n-                    popups.append(popup_instance)\n-            else:\n-                # Handle single object data\n-                title = request.data.get('data[title]')\n-                url = request.data.get('data[url]')\n-                image = request.FILES.get('data[image]', None)\n-\n-                if not title:\n-                    raise ValidationError(\"Title is required for popup.\")\n-\n-                # Debugging: print out the data to verify\n-                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n-                popup_instance = self.create_popup_instance(title, url, image)\n-                popups.append(popup_instance)\n-\n-            # Return the saved popup instances\n-            return popups\n-        except Exception as e:\n-            # Rollback the transaction in case of error and log the issue\n-            transaction.set_rollback(True)\n-            print(f\"Error occurred: {e}\")\n-            raise\n-\n-    def create_popup_instance(self, title, url, image):\n-        \"\"\"Helper function to create a Popup instance.\"\"\"\n-        try:\n-            if image:\n-                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n-                # popup_instance.url = popup_instance.image.url\n-            else:\n-                popup_instance = Popup.objects.create(title=title, url=url)\n-\n-            popup_instance.save()\n-            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n-            return popup_instance\n-        except Exception as e:\n-            print(f\"Error while saving popup: {e}\")\n-            raise\n-\n-    def to_representation(self, instance):\n-        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n-        if isinstance(instance, list):\n-            return [self.single_representation(popup) for popup in instance]\n-        return self.single_representation(instance)\n-\n-    def single_representation(self, instance):\n-        return {\n-            \"id\": instance.id,\n-            \"title\": instance.title,\n-            \"image\": instance.image.url if instance.image else None,\n-            \"url\": instance.url,\n-            \"created_date\": instance.created_date,\n-            \"updated_date\": instance.updated_date\n-        }\n"
                },
                {
                    "date": 1725773753710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     def create(self, validated_data):\n         popups = []\n         request = self.context['request']\n         data_entries = request.data.get('data', [])\n-        print\n+        print(data_entries)\n         try:\n             # Check if the request data is a list (array) or a single object\n             if isinstance(request.data.get('data'), list):\n                 # Handle array type data\n@@ -44,21 +44,26 @@\n                     popup_instance = self.create_popup_instance(title, url, image)\n                     popups.append(popup_instance)\n                     index += 1\n             elif isinstance(data_entries, list):\n-                # Handle array type data\n+                 # Handle array type data\n                 for index, data in enumerate(data_entries):\n                     title = data.get('title')\n                     url = data.get('url')\n-                    image = request.FILES.get(f'data[{index}][image]', None)  # Handle image in the files\n \n                     if not title:\n                         raise ValidationError(f\"Title is required for popup {index}.\")\n \n-                    # Debugging: print out the data to verify\n-                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n-                    popup_instance = self.create_popup_instance(title, url, image)\n+                    # Debugging: Log to verify fields\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                    # Attempt to create the popup instance without image\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+                    popup_instance.save()\n+\n                     popups.append(popup_instance)\n+                    print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+\n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n                 url = request.data.get('data[url]')\n"
                },
                {
                    "date": 1725773759876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n                     popup_instance.save()\n \n                     popups.append(popup_instance)\n                     print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n-\n             else:\n                 # Handle single object data\n                 title = request.data.get('data[title]')\n                 url = request.data.get('data[url]')\n"
                },
                {
                    "date": 1725773765183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+from rest_framework import serializers\n+from ..models import Popup\n+from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n+\n+class PopupListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+class PopupRetrieveSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+\n+\n+class PopupWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Popup\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        popups = []\n+        request = self.context['request']\n+        data_entries = request.data.get('data', [])\n+        print(data_entries)\n+        try:\n+            # Check if the request data is a list (array) or a single object\n+            if isinstance(request.data.get('data'), list):\n+                # Handle array type data\n+                index = 0\n+                while f'data[{index}][title]' in request.data:\n+                    title = request.data.get(f'data[{index}][title]')\n+                    url = request.data.get(f'data[{index}][url]')\n+                    image = request.FILES.get(f'data[{index}][image]', None)\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: print out the data to verify\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}, image: {image}\")\n+                    popup_instance = self.create_popup_instance(title, url, image)\n+                    popups.append(popup_instance)\n+                    index += 1\n+            elif isinstance(data_entries, list):\n+                 # Handle array type data\n+                for index, data in enumerate(data_entries):\n+                    title = data.get('title')\n+                    url = data.get('url')\n+\n+                    if not title:\n+                        raise ValidationError(f\"Title is required for popup {index}.\")\n+\n+                    # Debugging: Log to verify fields\n+                    print(f\"Creating popup {index} with title: {title}, url: {url}\")\n+\n+                    # Attempt to create the popup instance without image\n+                    popup_instance = Popup.objects.create(title=title, url=url)\n+                    popup_instance.save()\n+\n+                    popups.append(popup_instance)\n+                    print(f\"Popup created: {popup_instance.id}, Title: {popup_instance.title}\")\n+            else:\n+                # Handle single object data\n+                title = request.data.get('data[title]')\n+                url = request.data.get('data[url]')\n+                image = request.FILES.get('data[image]', None)\n+\n+                if not title:\n+                    raise ValidationError(\"Title is required for popup.\")\n+\n+                # Debugging: print out the data to verify\n+                print(f\"Creating single popup with title: {title}, url: {url}, image: {image}\")\n+                popup_instance = self.create_popup_instance(title, url, image)\n+                popups.append(popup_instance)\n+\n+            # Return the saved popup instances\n+            return popups\n+        except Exception as e:\n+            # Rollback the transaction in case of error and log the issue\n+            transaction.set_rollback(True)\n+            print(f\"Error occurred: {e}\")\n+            raise\n+\n+    def create_popup_instance(self, title, url, image):\n+        \"\"\"Helper function to create a Popup instance.\"\"\"\n+        try:\n+            if image:\n+                popup_instance = Popup.objects.create(title=title, image=image, url=url)\n+                # popup_instance.url = popup_instance.image.url\n+            else:\n+                popup_instance = Popup.objects.create(title=title, url=url)\n+\n+            popup_instance.save()\n+            print(f\"Popup saved successfully with ID: {popup_instance.id}\")\n+            return popup_instance\n+        except Exception as e:\n+            print(f\"Error while saving popup: {e}\")\n+            raise\n+\n+    def to_representation(self, instance):\n+        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n+        if isinstance(instance, list):\n+            return [self.single_representation(popup) for popup in instance]\n+        return self.single_representation(instance)\n+\n+    def single_representation(self, instance):\n+        return {\n+            \"id\": instance.id,\n+            \"title\": instance.title,\n+            \"image\": instance.image.url if instance.image else None,\n+            \"url\": instance.url,\n+            \"created_date\": instance.created_date,\n+            \"updated_date\": instance.updated_date\n+        }\n"
                }
            ],
            "date": 1725770777912,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Popup\n\nclass PopupListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Popup\n        fields = '__all__'\n\nclass PopupRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Popup\n        fields = '__all__'\n\nclass PopupWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Popup\n        fields = '__all__'\n\n    def create(self, validated_data):\n        popups = []\n        request = self.context['request']\n\n        # Check if the request data is a list (array) or a single object\n        if isinstance(request.data.get('data'), list):\n            # Handle array type data\n            index = 0\n            while f'data[{index}][title]' in request.data:\n                title = request.data.get(f'data[{index}][title]')\n                url = request.data.get(f'data[{index}][url]')\n                image = request.FILES.get(f'data[{index}][image]', None)\n\n                if not title:\n                    raise serializers.ValidationError(f\"Title is required for popup {index}.\")\n\n                popup_instance = self.create_popup_instance(title, url, image)\n                popups.append(popup_instance)\n                index += 1\n        else:\n            # Handle single object data\n            title = request.data.get('data[title]')\n            url = request.data.get('data[url]')\n            image = request.FILES.get('data[image]', None)\n\n            if not title:\n                raise serializers.ValidationError(\"Title is required for popup.\")\n\n            popup_instance = self.create_popup_instance(title, url, image)\n            popups.append(popup_instance)\n\n        # Return all the data in the payload\n        return popups\n\n    def create_popup_instance(self, title, url, image):\n        \"\"\"Helper function to create a Popup instance.\"\"\"\n        if image:\n            popup_instance = Popup.objects.create(title=title, image=image, url=url)\n            popup_instance.url = popup_instance.image.url\n        else:\n            popup_instance = Popup.objects.create(title=title, url=url)\n\n        popup_instance.save()\n        return popup_instance\n\n    def to_representation(self, instance):\n        \"\"\"Convert to a format that matches the original request structure.\"\"\"\n        if isinstance(instance, list):\n            return [self.single_representation(popup) for popup in instance]\n        return self.single_representation(instance)\n\n    def single_representation(self, instance):\n        return {\n            \"id\": instance.id,\n            \"title\": instance.title,\n            \"image\": instance.image.url if instance.image else None,\n            \"url\": instance.url,\n            \"created_date\": instance.created_date,\n            \"updated_date\": instance.updated_date\n        }\n"
        }
    ]
}