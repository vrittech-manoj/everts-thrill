{
    "sourceFile": "collection/serializers/collection_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1726483867337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1726483880163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n from ..models import Collection\n from destination.models import Destination\n import ast\n from django.db import transaction\n+from rest_framework.exceptions import ValidationError\n \n def str_to_list(data,value_to_convert):\n     try:\n         mutable_data = data.dict()\n@@ -54,9 +55,9 @@\n         \n     def get_destinations_collection_detail(self,object):\n         return DestinationSerializers(object.destination_collection,many=True).data\n     \n-     def save(self, **kwargs):\n+    def save(self, **kwargs):\n         try:\n             return super().save(**kwargs)\n         except ValidationError as e:\n             raise serializers.ValidationError(str(e))  # Return the validation error as a response\n"
                },
                {
                    "date": 1726484208415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,12 @@\n         \n     def get_destinations_collection_detail(self,object):\n         return DestinationSerializers(object.destination_collection,many=True).data\n     \n+   @transaction.atomic\n     def save(self, **kwargs):\n         try:\n+            # Call the model's save method and handle ValidationError if index already exists\n             return super().save(**kwargs)\n         except ValidationError as e:\n-            raise serializers.ValidationError(str(e))  # Return the validation error as a response\n-        \n+            # Catch the validation error from the model and return it as a DRF validation error\n+            raise serializers.ValidationError({\"detail\": str(e)})\n"
                },
                {
                    "date": 1726484248733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,12 @@\n         \n     def get_destinations_collection_detail(self,object):\n         return DestinationSerializers(object.destination_collection,many=True).data\n     \n-   @transaction.atomic\n+    @transaction.atomic\n     def save(self, **kwargs):\n         try:\n             # Call the model's save method and handle ValidationError if index already exists\n             return super().save(**kwargs)\n         except ValidationError as e:\n             # Catch the validation error from the model and return it as a DRF validation error\n-            raise serializers.ValidationError({\"detail\": str(e)})\n+            raise Res({\"detail\": str(e)})\n"
                },
                {
                    "date": 1726484290856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n from ..models import Collection\n from destination.models import Destination\n import ast\n from django.db import transaction\n+from rest_framework.response import Response\n from rest_framework.exceptions import ValidationError\n \n def str_to_list(data,value_to_convert):\n     try:\n@@ -62,5 +63,5 @@\n             # Call the model's save method and handle ValidationError if index already exists\n             return super().save(**kwargs)\n         except ValidationError as e:\n             # Catch the validation error from the model and return it as a DRF validation error\n-            raise Res({\"detail\": str(e)})\n+            raise Response({\"detail\": str(e)})\n"
                },
                {
                    "date": 1726484512745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,15 @@\n         return DestinationSerializers(object.destination_collection,many=True).data\n     \n     @transaction.atomic\n     def save(self, **kwargs):\n-        try:\n-            # Call the model's save method and handle ValidationError if index already exists\n-            return super().save(**kwargs)\n-        except ValidationError as e:\n-            # Catch the validation error from the model and return it as a DRF validation error\n-            raise Response({\"detail\": str(e)})\n+        # Get the index from the validated data\n+        index = self.validated_data.get('index', None)\n+        \n+        # Check if another object exists with the same index\n+        if Collection.objects.filter(index=index).exclude(pk=self.instance.pk if self.instance else None).exists():\n+            # Instead of raising an exception, return the error as part of the response message\n+            self.instance = None  # Ensure instance isn't created/updated\n+            return {\"error\": f\"An object with index {index} already exists. Please choose a different index.\"}\n+        \n+        # Proceed with saving the object\n+        return super().save(**kwargs)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726485477279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,18 +55,5 @@\n         fields = '__all__'\n         \n     def get_destinations_collection_detail(self,object):\n         return DestinationSerializers(object.destination_collection,many=True).data\n-    \n-    @transaction.atomic\n-    def save(self, **kwargs):\n-        # Get the index from the validated data\n-        index = self.validated_data.get('index', None)\n-        \n-        # Check if another object exists with the same index\n-        if Collection.objects.filter(index=index).exclude(pk=self.instance.pk if self.instance else None).exists():\n-            # Instead of raising an exception, return the error as part of the response message\n-            self.instance = None  # Ensure instance isn't created/updated\n-            return {\"error\": f\"An object with index {index} already exists. Please choose a different index.\"}\n-        \n-        # Proceed with saving the object\n-        return super().save(**kwargs)\n\\ No newline at end of file\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1726485483125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,6 +54,5 @@\n         model = Collection\n         fields = '__all__'\n         \n     def get_destinations_collection_detail(self,object):\n-        return DestinationSerializers(object.destination_collection,many=True).data\n-    \n\\ No newline at end of file\n+        return DestinationSerializers(object.destination_collection,many=True).data  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1726548325031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,5 +54,6 @@\n         model = Collection\n         fields = '__all__'\n         \n     def get_destinations_collection_detail(self,object):\n-        return DestinationSerializers(object.destination_collection,many=True).data  \n\\ No newline at end of file\n+        return DestinationSerializers(object.destination_collection,many=True).data  \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1726548334758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,5 +55,10 @@\n         fields = '__all__'\n         \n     def get_destinations_collection_detail(self,object):\n         return DestinationSerializers(object.destination_collection,many=True).data  \n-    \n\\ No newline at end of file\n+    def validate(self, data):\n+        # Check if the index already exists in another collection\n+        index = data.get('index')\n+        if Collection.objects.filter(index=index).exists():\n+            raise serializers.ValidationError({\"index\": \"A collection with this index already exists.\"})\n+        return data\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726549800231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,6 +59,6 @@\n     def validate(self, data):\n         # Check if the index already exists in another collection\n         index = data.get('index')\n         if Collection.objects.filter(index=index).exists():\n-            raise serializers.ValidationError({\"index\": \"A collection with this index already exists.\"})\n+            raise serializers.ValidationError({\"index\"A collection with this index already exists.\"})\n         return data\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726549806165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,6 +59,6 @@\n     def validate(self, data):\n         # Check if the index already exists in another collection\n         index = data.get('index')\n         if Collection.objects.filter(index=index).exists():\n-            raise serializers.ValidationError({\"index\"A collection with this index already exists.\"})\n+            raise serializers.ValidationError({\"index\": \"A collection with this index already exists.\"})\n         return data\n\\ No newline at end of file\n"
                },
                {
                    "date": 1726549812335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,6 +59,6 @@\n     def validate(self, data):\n         # Check if the index already exists in another collection\n         index = data.get('index')\n         if Collection.objects.filter(index=index).exists():\n-            raise serializers.ValidationError({\"index\": \"A collection with this index already exists.\"})\n+            raise serializers.ValidationError({\"\"A collection with this index already exists.\"})\n         return data\n\\ No newline at end of file\n"
                }
            ],
            "date": 1726483867337,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Collection\nfrom destination.models import Destination\nimport ast\nfrom django.db import transaction\n\ndef str_to_list(data,value_to_convert):\n    try:\n        mutable_data = data.dict()\n    except:\n        mutable_data = data\n    value_to_convert_data = mutable_data[value_to_convert]\n    if isinstance(value_to_convert_data,list):# type(value_to_convert_data) == list:\n        \n        return mutable_data\n    try:\n        variations = ast.literal_eval(value_to_convert_data)\n        mutable_data[value_to_convert] = variations\n        return mutable_data\n    except ValueError as e:\n        raise serializers.ValidationError({f'{value_to_convert}': str(e)})\n    \nclass DestinationSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Destination\n        ref_name = \"collection\"\n        fields = '__all__'\nclass CollectionListSerializers(serializers.ModelSerializer):\n    destination_collection = DestinationSerializers(many = True, read_only = True)\n\n    class Meta:\n        model = Collection\n        fields = '__all__'\n\nclass CollectionRetrieveSerializers(serializers.ModelSerializer):\n    destination_collection = DestinationSerializers(many = True, read_only = True)\n\n    class Meta:\n        model = Collection\n        fields = '__all__'\n\nclass CollectionWriteSerializers(serializers.ModelSerializer):\n    destinations_collection_detail = serializers.SerializerMethodField()\n\n    def to_internal_value(self, data):\n        if data.get('destination_collection'):\n            data = str_to_list(data,'destination_collection')\n            return super().to_internal_value(data)\n        return super().to_internal_value(data)\n    \n    class Meta:\n        model = Collection\n        fields = '__all__'\n        \n    def get_destinations_collection_detail(self,object):\n        return DestinationSerializers(object.destination_collection,many=True).data\n    \n     def save(self, **kwargs):\n        try:\n            return super().save(**kwargs)\n        except ValidationError as e:\n            raise serializers.ValidationError(str(e))  # Return the validation error as a response\n        \n"
        }
    ]
}