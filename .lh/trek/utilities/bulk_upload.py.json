{
    "sourceFile": "trek/utilities/bulk_upload.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 72,
            "patches": [
                {
                    "date": 1724834962410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724835039030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,35 +44,35 @@\n         if not file:\n             return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         df = pd.read_csv(file)\n-        datas = df.to_dict(orient='records')\n+        data = df.to_dict(orient='records')\n \n         if type == \"package\":\n-            create_update_with_fk(Package, PackageWriteSerializers, datas, 'name')\n+            create_update_with_fk(Package, PackageWriteSerializers, data, 'name')\n         elif type == \"destination\":\n-            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'name')\n+            create_update_with_fk(Destination, DestinationWriteSerializers, data, 'name')\n         elif type == \"destination-gallery-images\":\n-            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image')\n+            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, data, 'image')\n         elif type == \"destination-review\":\n-            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'review')\n+            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, data, 'review')\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference')\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, data, 'booking_reference')\n         elif type == \"activity\":\n-            create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name')\n+            create_update_with_fk(Activity, ActivityWriteSerializers, data, 'name')\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name')\n+            create_update_with_fk(Collection, CollectionWriteSerializers, data, 'name')\n         elif type == \"departure\":\n-            create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'departure_date')\n+            create_update_with_fk(Departure, DepartureWriteSerializers, data, 'departure_date')\n         elif type == \"review\":\n-            create_update_with_fk(Review, ReviewWriteSerializers, datas, 'title')\n+            create_update_with_fk(Review, ReviewWriteSerializers, data, 'title')\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n-def create_update_with_fk(my_model, my_serializer, datas, unique_field_name):\n-    for record in datas:\n+def create_update_with_fk(my_model, my_serializer, data, unique_field_name):\n+    for record in data:\n         # Process foreign keys by looking up related models by name\n         for field_name, field_value in record.items():\n             if isinstance(field_value, str):\n                 try:\n"
                },
                {
                    "date": 1724835073012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n from departure.serializers.departure_serializers import DepartureWriteSerializers\n \n # Create your views here.\n \n-class ImportExcel(APIView):\n+class BulkUploadAPIView(APIView):\n     @swagger_auto_schema(\n         request_body=openapi.Schema(\n             type=openapi.TYPE_OBJECT,\n             properties={\n"
                },
                {
                    "date": 1724835311104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,53 +26,74 @@\n from departure.serializers.departure_serializers import DepartureWriteSerializers\n \n # Create your views here.\n \n-class BulkUploadAPIView(APIView):\n+class ImportExcel(APIView):\n     @swagger_auto_schema(\n         request_body=openapi.Schema(\n             type=openapi.TYPE_OBJECT,\n             properties={\n                 'excel_file': openapi.Schema(type=openapi.TYPE_FILE),\n+                'type': openapi.Schema(\n+                    type=openapi.TYPE_STRING,\n+                    description=\"Specify the type of data to import. Options are: 'package', 'destination', 'destination-gallery-images', 'destination-review', 'destination-book', 'activity', 'collection', 'departure', 'review'.\",\n+                    enum=[\n+                        'package',\n+                        'destination',\n+                        'destination-gallery-images',\n+                        'destination-review',\n+                        'destination-book',\n+                        'activity',\n+                        'collection',\n+                        'departure',\n+                        'review'\n+                    ]\n+                ),\n             },\n-            required=['excel_file']\n+            required=['excel_file', 'type']\n         ),\n         operation_summary=\"Upload Excel file\",\n-        operation_description=\"Upload Excel file and import data\",\n+        operation_description=\"Upload an Excel file and import data into the specified model based on the provided type.\",\n     )\n-    def post(self, request, type, format=None):\n+    def post(self, request, format=None):\n         file = request.FILES.get('excel_file')\n+        type = request.data.get('type')\n+\n         if not file:\n             return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n \n+        if not type:\n+            return Response({\"error\": \"No type provided\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n         df = pd.read_csv(file)\n-        data = df.to_dict(orient='records')\n+        datas = df.to_dict(orient='records')\n \n         if type == \"package\":\n-            create_update_with_fk(Package, PackageWriteSerializers, data, 'name')\n+            create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update_with_fk(Destination, DestinationWriteSerializers, data, 'name')\n+            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'name', type)\n         elif type == \"destination-gallery-images\":\n-            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, data, 'image')\n+            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n         elif type == \"destination-review\":\n-            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, data, 'review')\n+            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'review', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, data, 'booking_reference')\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference', type)\n         elif type == \"activity\":\n-            create_update_with_fk(Activity, ActivityWriteSerializers, data, 'name')\n+            create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, data, 'name')\n+            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n-            create_update_with_fk(Departure, DepartureWriteSerializers, data, 'departure_date')\n+            create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'departure_date', type)\n         elif type == \"review\":\n-            create_update_with_fk(Review, ReviewWriteSerializers, data, 'title')\n+            create_update_with_fk(Review, ReviewWriteSerializers, datas, 'title', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n-def create_update_with_fk(my_model, my_serializer, data, unique_field_name):\n-    for record in data:\n+def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type):\n+    print(f\"Processing type: {type}\")\n+    for record in datas:\n         # Process foreign keys by looking up related models by name\n         for field_name, field_value in record.items():\n             if isinstance(field_value, str):\n                 try:\n"
                },
                {
                    "date": 1724835321026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n from departure.serializers.departure_serializers import DepartureWriteSerializers\n \n # Create your views here.\n \n-class ImportExcel(APIView):\n+class BulkUploadAPIView(APIView):\n     @swagger_auto_schema(\n         request_body=openapi.Schema(\n             type=openapi.TYPE_OBJECT,\n             properties={\n"
                },
                {
                    "date": 1724835428846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,17 +96,25 @@\n         # Process foreign keys by looking up related models by name\n         for field_name, field_value in record.items():\n             if isinstance(field_value, str):\n                 try:\n-                    related_model = my_model._meta.get_field(field_name).related_model\n-                    related_instance = related_model.objects.filter(name=field_value).first()\n-                    if related_instance:\n-                        record[field_name] = related_instance.id\n-                    else:\n-                        print(f\"Related instance for {field_name} with value '{field_value}' not found.\")\n+                    # Ensure that the field exists on the model\n+                    field = my_model._meta.get_field(field_name)\n+\n+                    if field.is_relation:\n+                        related_model = field.related_model\n+                        # Check if related field lookup is by name\n+                        related_instance = related_model.objects.filter(name=field_value).first()\n+                        if related_instance:\n+                            record[field_name] = related_instance.id\n+                        else:\n+                            print(f\"Related instance for {field_name} with value '{field_value}' not found.\")\n                 except AttributeError:\n-                    # Skip if the field is not a foreign key\n+                    # Skip if the field is not a foreign key or does not exist\n                     continue\n+                except my_model.DoesNotExist:\n+                    print(f\"Field {field_name} does not exist on model {my_model.__name__}.\")\n+                    continue\n \n         # Handle the creation or update of the main record\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n         if existing_data.exists():\n"
                },
                {
                    "date": 1724835711486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \n         if type == \"package\":\n             create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'name', type)\n+            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n         elif type == \"destination-review\":\n             create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'review', type)\n"
                },
                {
                    "date": 1724835731803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n         elif type == \"destination-review\":\n-            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'review', type)\n+            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'user', type)\n         elif type == \"destination-book\":\n             create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836013823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n         elif type == \"destination-review\":\n-            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'user', type)\n+            create_update_with_fk(Review, DestinationReviewWriteSerializers, datas, 'user__first_name', type)\n         elif type == \"destination-book\":\n             create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836028836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,10 +72,8 @@\n         elif type == \"destination\":\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n-        elif type == \"destination-review\":\n-            create_update_with_fk(Review, DestinationReviewWriteSerializers, datas, 'user__first_name', type)\n         elif type == \"destination-book\":\n             create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836041606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'departure_date', type)\n         elif type == \"review\":\n-            create_update_with_fk(Review, ReviewWriteSerializers, datas, 'title', type)\n+            create_update_with_fk(Review, ReviewWriteSerializers, datas, 'name', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1724836075342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n-            create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'departure_date', type)\n+            create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update_with_fk(Review, ReviewWriteSerializers, datas, 'name', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1724836109316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836122026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,11 @@\n             create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n-            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image', type)\n+            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836283608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n             create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'unique_identifier', type)\n         elif type == \"departure\":\n             create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update_with_fk(Review, ReviewWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836381644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,20 +89,33 @@\n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type):\n     print(f\"Processing type: {type}\")\n+\n+    # Define unique field lookups for related models\n+    related_model_unique_field = {\n+        'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n+        'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n+        'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n+        'Collection': 'unique_identifier',  # Example: Use 'unique_identifier' for Collection model\n+        'Departure': 'id',  # Assuming 'id' is the unique field for the Departure model\n+        'Review': 'title',  # Assuming 'title' is the unique field for the Review model\n+        # Add more models and their unique fields here as necessary\n+    }\n+\n     for record in datas:\n-        # Process foreign keys by looking up related models by name\n+        # Process foreign keys by looking up related models by their unique field\n         for field_name, field_value in record.items():\n             if isinstance(field_value, str):\n                 try:\n                     # Ensure that the field exists on the model\n                     field = my_model._meta.get_field(field_name)\n \n                     if field.is_relation:\n                         related_model = field.related_model\n-                        # Check if related field lookup is by name\n-                        related_instance = related_model.objects.filter(name=field_value).first()\n+                        # Use the correct unique field for the related model\n+                        unique_field = related_model_unique_field.get(related_model.__name__, 'id')  # Default to 'id' if not specified\n+                        related_instance = related_model.objects.filter(**{unique_field: field_value}).first()\n                         if related_instance:\n                             record[field_name] = related_instance.id\n                         else:\n                             print(f\"Related instance for {field_name} with value '{field_value}' not found.\")\n"
                },
                {
                    "date": 1724836404765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n             create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'unique_identifier', type)\n+            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update_with_fk(Review, ReviewWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724836418181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n     related_model_unique_field = {\n         'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n         'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n         'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n-        'Collection': 'unique_identifier',  # Example: Use 'unique_identifier' for Collection model\n+        'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n         'Departure': 'id',  # Assuming 'id' is the unique field for the Departure model\n         'Review': 'title',  # Assuming 'title' is the unique field for the Review model\n         # Add more models and their unique fields here as necessary\n     }\n"
                },
                {
                    "date": 1724836432435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n         'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n         'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n         'Departure': 'id',  # Assuming 'id' is the unique field for the Departure model\n-        'Review': 'title',  # Assuming 'title' is the unique field for the Review model\n+        'Review': 'name',  # Assuming 'title' is the unique field for the Review model\n         # Add more models and their unique fields here as necessary\n     }\n \n     for record in datas:\n"
                },
                {
                    "date": 1724836438685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,10 @@\n         'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n         'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n         'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n         'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n-        'Departure': 'id',  # Assuming 'id' is the unique field for the Departure model\n-        'Review': 'name',  # Assuming 'title' is the unique field for the Review model\n+        'Departure': 'id', \n+        'Review': 'name',  \n         # Add more models and their unique fields here as necessary\n     }\n \n     for record in datas:\n"
                },
                {
                    "date": 1724836450901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n         'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n         'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n         'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n         'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n+        'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n         'Departure': 'id', \n         'Review': 'name',  \n         # Add more models and their unique fields here as necessary\n     }\n"
                },
                {
                    "date": 1724836471528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,12 @@\n \n     # Define unique field lookups for related models\n     related_model_unique_field = {\n         'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n-        'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n-        'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n-        'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n-        'Collection': 'name',  # Example: Use 'unique_identifier' for Collection model\n-        'Departure': 'id', \n+        'Destination': 'desti`nation_title',  # Example: Use 'destination_title' for Destination model\n+        'Activity': 'name',  `# Assuming 'name' is the unique field for the Activity model\n+        'Collection': 'name',`  # Example: Use 'unique_identifier' for Collection model\n+        'Departure': 'id', `\n         'Review': 'name',  \n         # Add more models and their unique fields here as necessary\n     }\n \n"
                },
                {
                    "date": 1724836485545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,12 +93,11 @@\n \n     # Define unique field lookups for related models\n     related_model_unique_field = {\n         'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n-        'Destination': 'desti`nation_title',  # Example: Use 'destination_title' for Destination model\n-        'Activity': 'name',  `# Assuming 'name' is the unique field for the Activity model\n-        'Collection': 'name',`  # Example: Use 'unique_identifier' for Collection model\n-        'Departure': 'id', `\n+        'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n+        'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n+        'Collection': 'name', \n         'Review': 'name',  \n         # Add more models and their unique fields here as necessary\n     }\n \n"
                },
                {
                    "date": 1724836491100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,10 @@\n \n     # Define unique field lookups for related models\n     related_model_unique_field = {\n         'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n-        'Destination': 'destination_title',  # Example: Use 'destination_title' for Destination model\n-        'Activity': 'name',  # Assuming 'name' is the unique field for the Activity model\n+        'Destination': 'destination_title', \n+        'Activity': 'name', \n         'Collection': 'name', \n         'Review': 'name',  \n         # Add more models and their unique fields here as necessary\n     }\n"
                },
                {
                    "date": 1724836497853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n     print(f\"Processing type: {type}\")\n \n     # Define unique field lookups for related models\n     related_model_unique_field = {\n-        'Package': 'name',  # Assuming 'name' is the unique field for the Package model\n+        'Package': 'name',\n         'Destination': 'destination_title', \n         'Activity': 'name', \n         'Collection': 'name', \n         'Review': 'name',  \n"
                },
                {
                    "date": 1724836642681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,4 +139,46 @@\n             if serializer.is_valid():\n                 serializer.save()\n             else:\n                 print(serializer.errors)\n+\n+def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n+    \"\"\"\n+    General function to create or update records for any model.\n+    \n+    :param my_model: The model class to update or create records in.\n+    :param my_serializer: The serializer class to validate and save the data.\n+    :param datas: A list of dictionaries representing the records to be processed.\n+    :param unique_field_name: The field name used to identify unique records in the model.\n+    :param related_fields: A dictionary mapping related field names to their corresponding related model and unique lookup field.\n+                           Example: {'category': {'model': JobCategory, 'lookup_field': 'name'}}\n+    \"\"\"\n+    if related_fields is None:\n+        related_fields = {}\n+\n+    for record in datas:\n+        # Process related fields if any\n+        for field, relation in related_fields.items():\n+            if field in record:\n+                related_model = relation['model']\n+                lookup_field = relation['lookup_field']\n+                related_obj = related_model.objects.filter(**{lookup_field: record[field]}).first()\n+                if related_obj:\n+                    record[field] = related_obj.id\n+                else:\n+                    print(f\"Related instance for {field} with value '{record[field]}' not found.\")\n+                    continue\n+\n+        # Find existing data\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]}).first()\n+\n+        if existing_data:\n+            # Update existing record\n+            serializer = my_serializer(existing_data, data=record)\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+\n+        if serializer.is_valid():\n+            serializer.save()\n+        else:\n+            print(serializer.errors)  # Handle validation errors\n"
                },
                {
                    "date": 1724836652520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,18 +141,9 @@\n             else:\n                 print(serializer.errors)\n \n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n-    \"\"\"\n-    General function to create or update records for any model.\n-    \n-    :param my_model: The model class to update or create records in.\n-    :param my_serializer: The serializer class to validate and save the data.\n-    :param datas: A list of dictionaries representing the records to be processed.\n-    :param unique_field_name: The field name used to identify unique records in the model.\n-    :param related_fields: A dictionary mapping related field names to their corresponding related model and unique lookup field.\n-                           Example: {'category': {'model': JobCategory, 'lookup_field': 'name'}}\n-    \"\"\"\n+\n     if related_fields is None:\n         related_fields = {}\n \n     for record in datas:\n"
                },
                {
                    "date": 1724836666762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,63 +87,11 @@\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n-def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type):\n-    print(f\"Processing type: {type}\")\n \n-    # Define unique field lookups for related models\n-    related_model_unique_field = {\n-        'Package': 'name',\n-        'Destination': 'destination_title', \n-        'Activity': 'name', \n-        'Collection': 'name', \n-        'Review': 'name',  \n-        # Add more models and their unique fields here as necessary\n-    }\n \n-    for record in datas:\n-        # Process foreign keys by looking up related models by their unique field\n-        for field_name, field_value in record.items():\n-            if isinstance(field_value, str):\n-                try:\n-                    # Ensure that the field exists on the model\n-                    field = my_model._meta.get_field(field_name)\n-\n-                    if field.is_relation:\n-                        related_model = field.related_model\n-                        # Use the correct unique field for the related model\n-                        unique_field = related_model_unique_field.get(related_model.__name__, 'id')  # Default to 'id' if not specified\n-                        related_instance = related_model.objects.filter(**{unique_field: field_value}).first()\n-                        if related_instance:\n-                            record[field_name] = related_instance.id\n-                        else:\n-                            print(f\"Related instance for {field_name} with value '{field_value}' not found.\")\n-                except AttributeError:\n-                    # Skip if the field is not a foreign key or does not exist\n-                    continue\n-                except my_model.DoesNotExist:\n-                    print(f\"Field {field_name} does not exist on model {my_model.__name__}.\")\n-                    continue\n-\n-        # Handle the creation or update of the main record\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n-        if existing_data.exists():\n-            existing_data = existing_data.first()\n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-        else:\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-\n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n-\n     if related_fields is None:\n         related_fields = {}\n \n     for record in datas:\n"
                },
                {
                    "date": 1724836950764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,30 @@\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n+def create_update(my_model,my_serializer,datas,unique_field_name):\n+    \n+    for record in datas:\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Use a unique field here\n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n \n \n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n     if related_fields is None:\n"
                },
                {
                    "date": 1724836961153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,9 @@\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n-            create_update_with_fk(Review, ReviewWriteSerializers, datas, 'name', type)\n+            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1724836979758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n-            create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'id', type)\n+            create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1724836993992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,15 +71,15 @@\n             create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n-            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n+            create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+            create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n-            create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n+            create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724837000846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,11 +67,11 @@\n         df = pd.read_csv(file)\n         datas = df.to_dict(orient='records')\n \n         if type == \"package\":\n-            create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n+            create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n             create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n"
                },
                {
                    "date": 1724837131628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,35 @@\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n+def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type=None):\n+    print(f\"Processing type: {type}\")\n+\n+    # Define unique field lookups for related models\n+    related_model_unique_field = {\n+        'Package': 'name',\n+        'Destination': 'destination_title',\n+        'Activity': 'name',\n+        'Collection': 'name',\n+        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        # Add more models and their unique fields here as necessary\n+    }\n+\n+    related_fields = {}\n+\n+    for field in my_model._meta.get_fields():\n+        if field.is_relation:\n+            related_model_name = field.related_model.__name__\n+            if related_model_name in related_model_unique_field:\n+                related_fields[field.name] = {\n+                    'model': field.related_model,\n+                    'lookup_field': related_model_unique_field[related_model_name]\n+                }\n+\n+    # Use the general function to handle the creation or update of records\n+    create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n+\n def create_update(my_model,my_serializer,datas,unique_field_name):\n     \n     for record in datas:\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n"
                },
                {
                    "date": 1724837140812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n             create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724837147719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,15 +69,15 @@\n \n         if type == \"package\":\n             create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n-            create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n+            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n-            create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n+            create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n"
                },
                {
                    "date": 1724837264258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n         df = pd.read_csv(file)\n         datas = df.to_dict(orient='records')\n \n         if type == \"package\":\n-            create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n+            create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n@@ -79,11 +79,11 @@\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n-            create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n+            create_update_records(Departure, DepartureWriteSerializers, datas, 'id')\n         elif type == \"review\":\n-            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n+            create_update(Review, ReviewWriteSerializers, datas, 'name')\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n@@ -114,10 +114,9 @@\n \n     # Use the general function to handle the creation or update of records\n     create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n \n-def create_update(my_model,my_serializer,datas,unique_field_name):\n-    \n+def create_update(my_model, my_serializer, datas, unique_field_name):\n     for record in datas:\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n         if existing_data.exists():\n             existing_data = existing_data.first()  # Use a unique field here\n@@ -137,9 +136,8 @@\n                 print(serializer.errors)\n                 # Handle validation errors\n                 pass\n \n-\n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n     if related_fields is None:\n         related_fields = {}\n \n"
                },
                {
                    "date": 1724837291872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,10 @@\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n     related_fields = {}\n"
                },
                {
                    "date": 1724837304242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,10 @@\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        'DestinationBook': 'user__email',  # Example: use 'title' for Review model instead of 'name'\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n-        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n     related_fields = {}\n"
                },
                {
                    "date": 1724837316173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724837323328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__id', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n@@ -97,9 +97,9 @@\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n-        'DestinationBook': 'user__email',  # Example: use 'title' for Review model instead of 'name'\n+        'DestinationBook': 'user__id',  # Example: use 'title' for Review model instead of 'name'\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n"
                },
                {
                    "date": 1724837335897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         'DestinationBook': 'user__id',  # Example: use 'title' for Review model instead of 'name'\n-        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        'Departure': 'title',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n     related_fields = {}\n"
                },
                {
                    "date": 1724837341694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         'DestinationBook': 'user__id',  # Example: use 'title' for Review model instead of 'name'\n-        'Departure': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n     related_fields = {}\n"
                },
                {
                    "date": 1724837354900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,8 +99,9 @@\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         'DestinationBook': 'user__id',  # Example: use 'title' for Review model instead of 'name'\n         'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n+        'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n     related_fields = {}\n"
                },
                {
                    "date": 1724837368041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,10 +99,10 @@\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         'DestinationBook': 'user__id',  # Example: use 'title' for Review model instead of 'name'\n         'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n-        'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n-        # Add more models and their unique fields here as necessary\n+        'DestinationGalleryImages': 'id',  # Example: use 'title' for Review model instead of 'name'\n+      \n     }\n \n     related_fields = {}\n \n"
                },
                {
                    "date": 1724837374863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,10 @@\n         'Package': 'name',\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n-        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n-        'DestinationBook': 'user__id',  # Example: use 'title' for Review model instead of 'name'\n+        'Review': 'title',  \n+        'DestinationBook': 'user__id',  \n         'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n         'DestinationGalleryImages': 'id',  # Example: use 'title' for Review model instead of 'name'\n       \n     }\n"
                },
                {
                    "date": 1724837384420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,10 +98,10 @@\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  \n         'DestinationBook': 'user__id',  \n-        'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n-        'DestinationGalleryImages': 'id',  # Example: use 'title' for Review model instead of 'name'\n+        'Departure': 'id', \n+        'DestinationGalleryImages': 'id',  \n       \n     }\n \n     related_fields = {}\n"
                },
                {
                    "date": 1724837389911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n         'Package': 'name',\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n-        'Review': 'title',  \n+        'Review': 'name',  \n         'DestinationBook': 'user__id',  \n         'Departure': 'id', \n         'DestinationGalleryImages': 'id',  \n       \n"
                },
                {
                    "date": 1724837496252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,30 +117,8 @@\n \n     # Use the general function to handle the creation or update of records\n     create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n \n-def create_update(my_model, my_serializer, datas, unique_field_name):\n-    for record in datas:\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Use a unique field here\n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-                # Handle validation errors\n-                pass\n-\n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n     if related_fields is None:\n         related_fields = {}\n \n"
                },
                {
                    "date": 1724837517605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,12 +96,12 @@\n         'Package': 'name',\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n-        'Review': 'name',  \n+        'Review': 'title',  \n         'DestinationBook': 'user__id',  \n-        'Departure': 'id', \n-        'DestinationGalleryImages': 'id',  \n+        'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n+        'DestinationGalleryImages': 'id',  # Example: use 'title' for Review model instead of 'name'\n       \n     }\n \n     related_fields = {}\n@@ -117,8 +117,30 @@\n \n     # Use the general function to handle the creation or update of records\n     create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n \n+def create_update(my_model, my_serializer, datas, unique_field_name):\n+    for record in datas:\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Use a unique field here\n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+\n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n     if related_fields is None:\n         related_fields = {}\n \n"
                },
                {
                    "date": 1724837522921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,38 +87,10 @@\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n-def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type=None):\n-    print(f\"Processing type: {type}\")\n \n-    # Define unique field lookups for related models\n-    related_model_unique_field = {\n-        'Package': 'name',\n-        'Destination': 'destination_title',\n-        'Activity': 'name',\n-        'Collection': 'name',\n-        'Review': 'title',  \n-        'DestinationBook': 'user__id',  \n-        'Departure': 'id',  # Example: use 'title' for Review model instead of 'name'\n-        'DestinationGalleryImages': 'id',  # Example: use 'title' for Review model instead of 'name'\n-      \n-    }\n \n-    related_fields = {}\n-\n-    for field in my_model._meta.get_fields():\n-        if field.is_relation:\n-            related_model_name = field.related_model.__name__\n-            if related_model_name in related_model_unique_field:\n-                related_fields[field.name] = {\n-                    'model': field.related_model,\n-                    'lookup_field': related_model_unique_field[related_model_name]\n-                }\n-\n-    # Use the general function to handle the creation or update of records\n-    create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n-\n def create_update(my_model, my_serializer, datas, unique_field_name):\n     for record in datas:\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n         if existing_data.exists():\n"
                },
                {
                    "date": 1724837533217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n             create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__id', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id')\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name')\n"
                },
                {
                    "date": 1724837539608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,13 +73,13 @@\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__id', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id')\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name')\n@@ -87,10 +87,37 @@\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n+def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type=None):\n+    print(f\"Processing type: {type}\")\n \n+    # Define unique field lookups for related models\n+    related_model_unique_field = {\n+        'Package': 'name',\n+        'Destination': 'destination_title',\n+        'Activity': 'name',\n+        'Collection': 'name',\n+        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        'DestinationBook': 'user__email',  # Example: use 'title' for Review model instead of 'name'\n+        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n+        # Add more models and their unique fields here as necessary\n+    }\n \n+    related_fields = {}\n+\n+    for field in my_model._meta.get_fields():\n+        if field.is_relation:\n+            related_model_name = field.related_model.__name__\n+            if related_model_name in related_model_unique_field:\n+                related_fields[field.name] = {\n+                    'model': field.related_model,\n+                    'lookup_field': related_model_unique_field[related_model_name]\n+                }\n+\n+    # Use the general function to handle the creation or update of records\n+    create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n+\n def create_update(my_model, my_serializer, datas, unique_field_name):\n     for record in datas:\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n         if existing_data.exists():\n"
                },
                {
                    "date": 1724837547433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,23 +67,23 @@\n         df = pd.read_csv(file)\n         datas = df.to_dict(orient='records')\n \n         if type == \"package\":\n-            create_update_with_fk(Package, PackageWriteSerializers, datas, 'name', type)\n+            create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n             create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__', type)\n+            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n-            create_update_records(Departure, DepartureWriteSerializers, datas, 'id')\n+            create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n-            create_update(Review, ReviewWriteSerializers, datas, 'name')\n+            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n@@ -97,10 +97,8 @@\n         'Destination': 'destination_title',\n         'Activity': 'name',\n         'Collection': 'name',\n         'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n-        'DestinationBook': 'user__email',  # Example: use 'title' for Review model instead of 'name'\n-        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n         # Add more models and their unique fields here as necessary\n     }\n \n     related_fields = {}\n@@ -116,9 +114,10 @@\n \n     # Use the general function to handle the creation or update of records\n     create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n \n-def create_update(my_model, my_serializer, datas, unique_field_name):\n+def create_update(my_model,my_serializer,datas,unique_field_name):\n+    \n     for record in datas:\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n         if existing_data.exists():\n             existing_data = existing_data.first()  # Use a unique field here\n@@ -138,8 +137,9 @@\n                 print(serializer.errors)\n                 # Handle validation errors\n                 pass\n \n+\n def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n     if related_fields is None:\n         related_fields = {}\n \n"
                },
                {
                    "date": 1724837554967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,17 +69,17 @@\n \n         if type == \"package\":\n             create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n-            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n+            create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+            create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n-            create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name', type)\n+            create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n@@ -87,35 +87,9 @@\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n \n         return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n \n-def create_update_with_fk(my_model, my_serializer, datas, unique_field_name, type=None):\n-    print(f\"Processing type: {type}\")\n \n-    # Define unique field lookups for related models\n-    related_model_unique_field = {\n-        'Package': 'name',\n-        'Destination': 'destination_title',\n-        'Activity': 'name',\n-        'Collection': 'name',\n-        'Review': 'title',  # Example: use 'title' for Review model instead of 'name'\n-        # Add more models and their unique fields here as necessary\n-    }\n-\n-    related_fields = {}\n-\n-    for field in my_model._meta.get_fields():\n-        if field.is_relation:\n-            related_model_name = field.related_model.__name__\n-            if related_model_name in related_model_unique_field:\n-                related_fields[field.name] = {\n-                    'model': field.related_model,\n-                    'lookup_field': related_model_unique_field[related_model_name]\n-                }\n-\n-    # Use the general function to handle the creation or update of records\n-    create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields)\n-\n def create_update(my_model,my_serializer,datas,unique_field_name):\n     \n     for record in datas:\n         existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n"
                },
                {
                    "date": 1724914795272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+from django.shortcuts import render\n+from django.http import HttpResponse\n+from rest_framework.response import Response\n+from rest_framework.views import APIView\n+from rest_framework import status\n+import pandas as pd\n+\n+from drf_yasg import openapi\n+from drf_yasg.utils import swagger_auto_schema\n+\n+from destination.models import Package, Destination, DestinationGalleryImages, DestinationReview\n+from booking.models import DestinationBook\n+from activities.models import Activity\n+from collection.models import Collection\n+from departure.models import Departure\n+from review.models import Review\n+\n+from destination.serializers.destination_review_serializers import DestinationReviewWriteSerializers\n+from destination.serializers.destination_serializers import DestinationWriteSerializers\n+from destination.serializers.destinationgalleryimages_serializers import DestinationGalleryImagesWriteSerializers\n+from destination.serializers.package_serializers import PackageWriteSerializers\n+from review.serializers.review_serializers import ReviewWriteSerializers\n+from booking.serializers.destinationbook_serializers import DestinationBookWriteSerializers\n+from activities.serializers.activity_serializers import ActivityWriteSerializers\n+from collection.serializers.collection_serializers import CollectionWriteSerializers\n+from departure.serializers.departure_serializers import DepartureWriteSerializers\n+\n+# Create your views here.\n+\n+class BulkUploadAPIView(APIView):\n+    @swagger_auto_schema(\n+        request_body=openapi.Schema(\n+            type=openapi.TYPE_OBJECT,\n+            properties={\n+                'excel_file': openapi.Schema(type=openapi.TYPE_FILE),\n+                'type': openapi.Schema(\n+                    type=openapi.TYPE_STRING,\n+                    description=\"Specify the type of data to import. Options are: 'package', 'destination', 'destination-gallery-images', 'destination-review', 'destination-book', 'activity', 'collection', 'departure', 'review'.\",\n+                    enum=[\n+                        'package',\n+                        'destination',\n+                        'destination-gallery-images',\n+                        'destination-review',\n+                        'destination-book',\n+                        'activity',\n+                        'collection',\n+                        'departure',\n+                        'review'\n+                    ]\n+                ),\n+            },\n+            required=['excel_file', 'type']\n+        ),\n+        operation_summary=\"Upload Excel file\",\n+        operation_description=\"Upload an Excel file and import data into the specified model based on the provided type.\",\n+    )\n+    def post(self, request, format=None):\n+        file = request.FILES.get('excel_file')\n+        type = request.data.get('type')\n+\n+        if not file:\n+            return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        if not type:\n+            return Response({\"error\": \"No type provided\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        df = pd.read_csv(file)\n+        datas = df.to_dict(orient='records')\n+\n+        if type == \"package\":\n+            create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n+        elif type == \"destination\":\n+            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+        elif type == \"destination-gallery-images\":\n+            create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n+        elif type == \"destination-book\":\n+            create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+        elif type == \"activity\":\n+            create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n+        elif type == \"collection\":\n+            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n+        elif type == \"departure\":\n+            create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n+        elif type == \"review\":\n+            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n+        else:\n+            return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n+\n+\n+def create_update(my_model,my_serializer,datas,unique_field_name):\n+    \n+    for record in datas:\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Use a unique field here\n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+\n+\n+def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n+    if related_fields is None:\n+        related_fields = {}\n+\n+    for record in datas:\n+        # Process related fields if any\n+        for field, relation in related_fields.items():\n+            if field in record:\n+                related_model = relation['model']\n+                lookup_field = relation['lookup_field']\n+                related_obj = related_model.objects.filter(**{lookup_field: record[field]}).first()\n+                if related_obj:\n+                    record[field] = related_obj.id\n+                else:\n+                    print(f\"Related instance for {field} with value '{record[field]}' not found.\")\n+                    continue\n+\n+        # Find existing data\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]}).first()\n+\n+        if existing_data:\n+            # Update existing record\n+            serializer = my_serializer(existing_data, data=record)\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+\n+        if serializer.is_valid():\n+            serializer.save()\n+        else:\n+            print(serializer.errors)  # Handle validation errors\n+\n+class Package(models.Model):\n+    public_id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n+    slug = models.SlugField(unique=True, blank=True)\n+    name = models.CharField(max_length=400, unique=True)\n+    image = models.ImageField(upload_to=\"destination/package_image/\", null=True, blank=True)\n+\n+    def __str__(self):\n+        return self.name\n+\n+    def save(self, *args, **kwargs):\n+        if not self.slug:\n+            self.slug = slugify(self.name) + '-' + str(self.public_id)[1:5] + str(self.public_id)[-1:-5]\n+        super().save(*args, **kwargs)\n"
                },
                {
                    "date": 1724914801810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,163 +144,4 @@\n             serializer.save()\n         else:\n             print(serializer.errors)  # Handle validation errors\n \n-class Package(models.Model):\n-    public_id = models.UUIDField(default=uuid.uuid4, editable=False, unique=True)\n-    slug = models.SlugField(unique=True, blank=True)\n-    name = models.CharField(max_length=400, unique=True)\n-    image = models.ImageField(upload_to=\"destination/package_image/\", null=True, blank=True)\n-\n-    def __str__(self):\n-        return self.name\n-\n-    def save(self, *args, **kwargs):\n-        if not self.slug:\n-            self.slug = slugify(self.name) + '-' + str(self.public_id)[1:5] + str(self.public_id)[-1:-5]\n-        super().save(*args, **kwargs)\n-from django.shortcuts import render\n-from django.http import HttpResponse\n-from rest_framework.response import Response\n-from rest_framework.views import APIView\n-from rest_framework import status\n-import pandas as pd\n-\n-from drf_yasg import openapi\n-from drf_yasg.utils import swagger_auto_schema\n-\n-from destination.models import Package, Destination, DestinationGalleryImages, DestinationReview\n-from booking.models import DestinationBook\n-from activities.models import Activity\n-from collection.models import Collection\n-from departure.models import Departure\n-from review.models import Review\n-\n-from destination.serializers.destination_review_serializers import DestinationReviewWriteSerializers\n-from destination.serializers.destination_serializers import DestinationWriteSerializers\n-from destination.serializers.destinationgalleryimages_serializers import DestinationGalleryImagesWriteSerializers\n-from destination.serializers.package_serializers import PackageWriteSerializers\n-from review.serializers.review_serializers import ReviewWriteSerializers\n-from booking.serializers.destinationbook_serializers import DestinationBookWriteSerializers\n-from activities.serializers.activity_serializers import ActivityWriteSerializers\n-from collection.serializers.collection_serializers import CollectionWriteSerializers\n-from departure.serializers.departure_serializers import DepartureWriteSerializers\n-\n-# Create your views here.\n-\n-class BulkUploadAPIView(APIView):\n-    @swagger_auto_schema(\n-        request_body=openapi.Schema(\n-            type=openapi.TYPE_OBJECT,\n-            properties={\n-                'excel_file': openapi.Schema(type=openapi.TYPE_FILE),\n-                'type': openapi.Schema(\n-                    type=openapi.TYPE_STRING,\n-                    description=\"Specify the type of data to import. Options are: 'package', 'destination', 'destination-gallery-images', 'destination-review', 'destination-book', 'activity', 'collection', 'departure', 'review'.\",\n-                    enum=[\n-                        'package',\n-                        'destination',\n-                        'destination-gallery-images',\n-                        'destination-review',\n-                        'destination-book',\n-                        'activity',\n-                        'collection',\n-                        'departure',\n-                        'review'\n-                    ]\n-                ),\n-            },\n-            required=['excel_file', 'type']\n-        ),\n-        operation_summary=\"Upload Excel file\",\n-        operation_description=\"Upload an Excel file and import data into the specified model based on the provided type.\",\n-    )\n-    def post(self, request, format=None):\n-        file = request.FILES.get('excel_file')\n-        type = request.data.get('type')\n-\n-        if not file:\n-            return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        if not type:\n-            return Response({\"error\": \"No type provided\"}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        df = pd.read_csv(file)\n-        datas = df.to_dict(orient='records')\n-\n-        if type == \"package\":\n-            create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n-        elif type == \"destination\":\n-            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n-        elif type == \"destination-gallery-images\":\n-            create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n-        elif type == \"destination-book\":\n-            create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n-        elif type == \"activity\":\n-            create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n-        elif type == \"collection\":\n-            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n-        elif type == \"departure\":\n-            create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n-        elif type == \"review\":\n-            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n-        else:\n-            return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n-\n-\n-def create_update(my_model,my_serializer,datas,unique_field_name):\n-    \n-    for record in datas:\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Use a unique field here\n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-                # Handle validation errors\n-                pass\n-\n-\n-def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n-    if related_fields is None:\n-        related_fields = {}\n-\n-    for record in datas:\n-        # Process related fields if any\n-        for field, relation in related_fields.items():\n-            if field in record:\n-                related_model = relation['model']\n-                lookup_field = relation['lookup_field']\n-                related_obj = related_model.objects.filter(**{lookup_field: record[field]}).first()\n-                if related_obj:\n-                    record[field] = related_obj.id\n-                else:\n-                    print(f\"Related instance for {field} with value '{record[field]}' not found.\")\n-                    continue\n-\n-        # Find existing data\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]}).first()\n-\n-        if existing_data:\n-            # Update existing record\n-            serializer = my_serializer(existing_data, data=record)\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-\n-        if serializer.is_valid():\n-            serializer.save()\n-        else:\n-            print(serializer.errors)  # Handle validation errors\n"
                },
                {
                    "date": 1724914816795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,4 +144,26 @@\n             serializer.save()\n         else:\n             print(serializer.errors)  # Handle validation errors\n \n+def create_update_packages(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        existing_data = my_model.objects.filter(name=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724914836836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n         df = pd.read_csv(file)\n         datas = df.to_dict(orient='records')\n \n         if type == \"package\":\n-            create_update_records(Package, PackageWriteSerializers, datas, 'name', type)\n+            create_update_packages(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n             create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n"
                },
                {
                    "date": 1724914926599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,4 +166,40 @@\n                 serializer.save()\n             else:\n                 # Handle validation errors\n                 pass\n+def create_update_gallery_images(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve the foreign key if it's provided as a name or identifier\n+        if isinstance(record[unique_field_name], str):\n+            destination_obj = Destination.objects.filter(name=record[unique_field_name]).first()\n+        elif isinstance(record[unique_field_name], int):\n+            destination_obj = Destination.objects.filter(id=record[unique_field_name]).first()\n+        else:\n+            destination_obj = record[unique_field_name]  # Assume it's already a Destination instance\n+\n+        if not destination_obj:\n+            # Handle the case where the foreign key is not found\n+            continue\n+        \n+        record['destination_trip'] = destination_obj.id  # Ensure you're using the foreign key ID\n+\n+        existing_data = my_model.objects.filter(destination_trip=destination_obj)\n+\n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724914937993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n             create_update_packages(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n             create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n-            create_update_records(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n+            create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n             create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724915162344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,4 +202,70 @@\n                 serializer.save()\n             else:\n                 # Handle validation errors\n                 pass\n+\n+def create_update_destination_book(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the foreign keys if provided as names or identifiers\n+        if 'activity' in record:\n+            if isinstance(record['activity'], str):\n+                activity_obj, created = Activity.objects.get_or_create(name=record['activity'])\n+            elif isinstance(record['activity'], int):\n+                activity_obj = Activity.objects.filter(id=record['activity']).first()\n+            else:\n+                activity_obj = record['activity']  # Assume it's already an Activity instance\n+\n+            if not activity_obj:\n+                # If still not found, skip the record\n+                continue\n+            \n+            record['activity'] = activity_obj.id  # Ensure you're using the foreign key ID\n+\n+        if 'package' in record:\n+            if isinstance(record['package'], str):\n+                package_obj, created = Package.objects.get_or_create(name=record['package'])\n+            elif isinstance(record['package'], int):\n+                package_obj = Package.objects.filter(id=record['package']).first()\n+            else:\n+                package_obj = record['package']  # Assume it's already a Package instance\n+\n+            if not package_obj:\n+                # If still not found, skip the record\n+                continue\n+            \n+            record['package'] = package_obj.id  # Ensure you're using the foreign key ID\n+\n+        if 'destination' in record:\n+            if isinstance(record['destination'], str):\n+                destination_obj, created = Destination.objects.get_or_create(title=record['destination'])\n+            elif isinstance(record['destination'], int):\n+                destination_obj = Destination.objects.filter(id=record['destination']).first()\n+            else:\n+                destination_obj = record['destination']  # Assume it's already a Destination instance\n+\n+            if not destination_obj:\n+                # If still not found, skip the record\n+                continue\n+            \n+            record['destination'] = destination_obj.id  # Ensure you're using the foreign key ID\n+\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724915171535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n             create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n-            create_update_records(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+            create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724915227066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -268,4 +268,48 @@\n                 serializer.save()\n             else:\n                 # Handle validation errors\n                 pass\n+\n+def create_update_activities(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ManyToMany field (destinations_activities)\n+        if 'destinations_activities' in record:\n+            destination_ids = []\n+            for destination_name in record['destinations_activities']:\n+                if isinstance(destination_name, str):\n+                    destination_obj, created = Destination.objects.get_or_create(title=destination_name)\n+                elif isinstance(destination_name, int):\n+                    destination_obj = Destination.objects.filter(id=destination_name).first()\n+                else:\n+                    destination_obj = destination_name  # Assume it's already a Destination instance\n+\n+                if destination_obj:\n+                    destination_ids.append(destination_obj.id)\n+\n+            # Replace the destination names/instances with their IDs in the record\n+            record['destinations_activities'] = destination_ids\n+\n+        existing_data = my_model.objects.filter(name=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                activity = serializer.save()\n+                if 'destinations_activities' in record:\n+                    activity.destinations_activities.set(record['destinations_activities'])  # Update the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                activity = serializer.save()\n+                if 'destinations_activities' in record:\n+                    activity.destinations_activities.set(record['destinations_activities'])  # Set the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724915240670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n             create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n             create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n-            create_update_records(Activity, ActivityWriteSerializers, datas, 'name', type)\n+            create_update_activities(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n"
                },
                {
                    "date": 1724915290555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,4 +312,48 @@\n                     activity.destinations_activities.set(record['destinations_activities'])  # Set the ManyToMany field\n             else:\n                 # Handle validation errors\n                 pass\n+\n+def create_update_collections(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ManyToMany field (destination_collection)\n+        if 'destination_collection' in record:\n+            destination_ids = []\n+            for destination_name in record['destination_collection']:\n+                if isinstance(destination_name, str):\n+                    destination_obj, created = Destination.objects.get_or_create(title=destination_name)\n+                elif isinstance(destination_name, int):\n+                    destination_obj = Destination.objects.filter(id=destination_name).first()\n+                else:\n+                    destination_obj = destination_name  # Assume it's already a Destination instance\n+\n+                if destination_obj:\n+                    destination_ids.append(destination_obj.id)\n+\n+            # Replace the destination names/instances with their IDs in the record\n+            record['destination_collection'] = destination_ids\n+\n+        existing_data = my_model.objects.filter(name=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                collection = serializer.save()\n+                if 'destination_collection' in record:\n+                    collection.destination_collection.set(record['destination_collection'])  # Update the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                collection = serializer.save()\n+                if 'destination_collection' in record:\n+                    collection.destination_collection.set(record['destination_collection'])  # Set the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724915304777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n             create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n         elif type == \"activity\":\n             create_update_activities(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n-            create_update_records(Collection, CollectionWriteSerializers, datas, 'name', type)\n+            create_update_collections(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n             create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n"
                },
                {
                    "date": 1724915441336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,4 +356,42 @@\n                     collection.destination_collection.set(record['destination_collection'])  # Set the ManyToMany field\n             else:\n                 # Handle validation errors\n                 pass\n+\n+def create_update_departures(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ForeignKey field (destination_trip)\n+        if 'destination_trip' in record:\n+            if isinstance(record['destination_trip'], str):\n+                destination_obj, created = Destination.objects.get_or_create(title=record['destination_trip'])\n+            elif isinstance(record['destination_trip'], int):\n+                destination_obj = Destination.objects.filter(id=record['destination_trip']).first()\n+            else:\n+                destination_obj = record['destination_trip']  # Assume it's already a Destination instance\n+\n+            if not destination_obj:\n+                # If the destination is not found, skip the record\n+                continue\n+            \n+            record['destination_trip'] = destination_obj.id  # Ensure you're using the foreign key ID\n+\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724915535744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             create_update_activities(Activity, ActivityWriteSerializers, datas, 'name', type)\n         elif type == \"collection\":\n             create_update_collections(Collection, CollectionWriteSerializers, datas, 'name', type)\n         elif type == \"departure\":\n-            create_update_records(Departure, DepartureWriteSerializers, datas, 'id', type)\n+            create_update_departures(Departure, DepartureWriteSerializers, datas, 'id', type)\n         elif type == \"review\":\n             create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n         else:\n             return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1724915546267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,364 @@\n+from django.shortcuts import render\n+from django.http import HttpResponse\n+from rest_framework.response import Response\n+from rest_framework.views import APIView\n+from rest_framework import status\n+import pandas as pd\n+\n+from drf_yasg import openapi\n+from drf_yasg.utils import swagger_auto_schema\n+\n+from destination.models import Package, Destination, DestinationGalleryImages, DestinationReview\n+from booking.models import DestinationBook\n+from activities.models import Activity\n+from collection.models import Collection\n+from departure.models import Departure\n+from review.models import Review\n+\n+from destination.serializers.destination_review_serializers import DestinationReviewWriteSerializers\n+from destination.serializers.destination_serializers import DestinationWriteSerializers\n+from destination.serializers.destinationgalleryimages_serializers import DestinationGalleryImagesWriteSerializers\n+from destination.serializers.package_serializers import PackageWriteSerializers\n+from review.serializers.review_serializers import ReviewWriteSerializers\n+from booking.serializers.destinationbook_serializers import DestinationBookWriteSerializers\n+from activities.serializers.activity_serializers import ActivityWriteSerializers\n+from collection.serializers.collection_serializers import CollectionWriteSerializers\n+from departure.serializers.departure_serializers import DepartureWriteSerializers\n+\n+# Create your views here.\n+\n+class BulkUploadAPIView(APIView):\n+    @swagger_auto_schema(\n+        request_body=openapi.Schema(\n+            type=openapi.TYPE_OBJECT,\n+            properties={\n+                'excel_file': openapi.Schema(type=openapi.TYPE_FILE),\n+                'type': openapi.Schema(\n+                    type=openapi.TYPE_STRING,\n+                    description=\"Specify the type of data to import. Options are: 'package', 'destination', 'destination-gallery-images', 'destination-review', 'destination-book', 'activity', 'collection', 'departure', 'review'.\",\n+                    enum=[\n+                        'package',\n+                        'destination',\n+                        'destination-gallery-images',\n+                        'destination-review',\n+                        'destination-book',\n+                        'activity',\n+                        'collection',\n+                        'departure',\n+                        'review'\n+                    ]\n+                ),\n+            },\n+            required=['excel_file', 'type']\n+        ),\n+        operation_summary=\"Upload Excel file\",\n+        operation_description=\"Upload an Excel file and import data into the specified model based on the provided type.\",\n+    )\n+    def post(self, request, format=None):\n+        file = request.FILES.get('excel_file')\n+        type = request.data.get('type')\n+\n+        if not file:\n+            return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        if not type:\n+            return Response({\"error\": \"No type provided\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        df = pd.read_csv(file)\n+        datas = df.to_dict(orient='records')\n+\n+        if type == \"package\":\n+            create_update_packages(Package, PackageWriteSerializers, datas, 'name', type)\n+        elif type == \"destination\":\n+            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+        elif type == \"destination-gallery-images\":\n+            create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n+        elif type == \"destination-book\":\n+            create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n+        elif type == \"activity\":\n+            create_update_activities(Activity, ActivityWriteSerializers, datas, 'name', type)\n+        elif type == \"collection\":\n+            create_update_collections(Collection, CollectionWriteSerializers, datas, 'name', type)\n+        elif type == \"departure\":\n+            create_update_departures(Departure, DepartureWriteSerializers, datas, 'id', type)\n+        elif type == \"review\":\n+            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n+        else:\n+            return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n+\n+        return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n+\n+\n+def create_update(my_model,my_serializer,datas,unique_field_name):\n+    \n+    for record in datas:\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Use a unique field here\n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                print(serializer.errors)\n+                # Handle validation errors\n+                pass\n+\n+def create_update_packages(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        existing_data = my_model.objects.filter(name=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+def create_update_gallery_images(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve the foreign key if it's provided as a name or identifier\n+        if isinstance(record[unique_field_name], str):\n+            destination_obj = Destination.objects.filter(name=record[unique_field_name]).first()\n+        elif isinstance(record[unique_field_name], int):\n+            destination_obj = Destination.objects.filter(id=record[unique_field_name]).first()\n+        else:\n+            destination_obj = record[unique_field_name]  # Assume it's already a Destination instance\n+\n+        if not destination_obj:\n+            # Handle the case where the foreign key is not found\n+            continue\n+        \n+        record['destination_trip'] = destination_obj.id  # Ensure you're using the foreign key ID\n+\n+        existing_data = my_model.objects.filter(destination_trip=destination_obj)\n+\n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+\n+def create_update_destination_book(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the foreign keys if provided as names or identifiers\n+        if 'activity' in record:\n+            if isinstance(record['activity'], str):\n+                activity_obj, created = Activity.objects.get_or_create(name=record['activity'])\n+            elif isinstance(record['activity'], int):\n+                activity_obj = Activity.objects.filter(id=record['activity']).first()\n+            else:\n+                activity_obj = record['activity']  # Assume it's already an Activity instance\n+\n+            if not activity_obj:\n+                # If still not found, skip the record\n+                continue\n+            \n+            record['activity'] = activity_obj.id  # Ensure you're using the foreign key ID\n+\n+        if 'package' in record:\n+            if isinstance(record['package'], str):\n+                package_obj, created = Package.objects.get_or_create(name=record['package'])\n+            elif isinstance(record['package'], int):\n+                package_obj = Package.objects.filter(id=record['package']).first()\n+            else:\n+                package_obj = record['package']  # Assume it's already a Package instance\n+\n+            if not package_obj:\n+                # If still not found, skip the record\n+                continue\n+            \n+            record['package'] = package_obj.id  # Ensure you're using the foreign key ID\n+\n+        if 'destination' in record:\n+            if isinstance(record['destination'], str):\n+                destination_obj, created = Destination.objects.get_or_create(title=record['destination'])\n+            elif isinstance(record['destination'], int):\n+                destination_obj = Destination.objects.filter(id=record['destination']).first()\n+            else:\n+                destination_obj = record['destination']  # Assume it's already a Destination instance\n+\n+            if not destination_obj:\n+                # If still not found, skip the record\n+                continue\n+            \n+            record['destination'] = destination_obj.id  # Ensure you're using the foreign key ID\n+\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+\n+def create_update_activities(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ManyToMany field (destinations_activities)\n+        if 'destinations_activities' in record:\n+            destination_ids = []\n+            for destination_name in record['destinations_activities']:\n+                if isinstance(destination_name, str):\n+                    destination_obj, created = Destination.objects.get_or_create(title=destination_name)\n+                elif isinstance(destination_name, int):\n+                    destination_obj = Destination.objects.filter(id=destination_name).first()\n+                else:\n+                    destination_obj = destination_name  # Assume it's already a Destination instance\n+\n+                if destination_obj:\n+                    destination_ids.append(destination_obj.id)\n+\n+            # Replace the destination names/instances with their IDs in the record\n+            record['destinations_activities'] = destination_ids\n+\n+        existing_data = my_model.objects.filter(name=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                activity = serializer.save()\n+                if 'destinations_activities' in record:\n+                    activity.destinations_activities.set(record['destinations_activities'])  # Update the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                activity = serializer.save()\n+                if 'destinations_activities' in record:\n+                    activity.destinations_activities.set(record['destinations_activities'])  # Set the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+\n+def create_update_collections(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ManyToMany field (destination_collection)\n+        if 'destination_collection' in record:\n+            destination_ids = []\n+            for destination_name in record['destination_collection']:\n+                if isinstance(destination_name, str):\n+                    destination_obj, created = Destination.objects.get_or_create(title=destination_name)\n+                elif isinstance(destination_name, int):\n+                    destination_obj = Destination.objects.filter(id=destination_name).first()\n+                else:\n+                    destination_obj = destination_name  # Assume it's already a Destination instance\n+\n+                if destination_obj:\n+                    destination_ids.append(destination_obj.id)\n+\n+            # Replace the destination names/instances with their IDs in the record\n+            record['destination_collection'] = destination_ids\n+\n+        existing_data = my_model.objects.filter(name=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                collection = serializer.save()\n+                if 'destination_collection' in record:\n+                    collection.destination_collection.set(record['destination_collection'])  # Update the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                collection = serializer.save()\n+                if 'destination_collection' in record:\n+                    collection.destination_collection.set(record['destination_collection'])  # Set the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+\n+def create_update_departures(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ForeignKey field (destination_trip)\n+        if 'destination_trip' in record:\n+            if isinstance(record['destination_trip'], str):\n+                destination_obj, created = Destination.objects.get_or_create(title=record['destination_trip'])\n+            elif isinstance(record['destination_trip'], int):\n+                destination_obj = Destination.objects.filter(id=record['destination_trip']).first()\n+            else:\n+                destination_obj = record['destination_trip']  # Assume it's already a Destination instance\n+\n+            if not destination_obj:\n+                # If the destination is not found, skip the record\n+                continue\n+            \n+            record['destination_trip'] = destination_obj.id  # Ensure you're using the foreign key ID\n+\n+        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                serializer.save()\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724915554865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \n         if type == \"package\":\n             create_update_packages(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+            create_update(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n             create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n@@ -361,401 +361,4 @@\n                 serializer.save()\n             else:\n                 # Handle validation errors\n                 pass\n-from django.shortcuts import render\n-from django.http import HttpResponse\n-from rest_framework.response import Response\n-from rest_framework.views import APIView\n-from rest_framework import status\n-import pandas as pd\n-\n-from drf_yasg import openapi\n-from drf_yasg.utils import swagger_auto_schema\n-\n-from destination.models import Package, Destination, DestinationGalleryImages, DestinationReview\n-from booking.models import DestinationBook\n-from activities.models import Activity\n-from collection.models import Collection\n-from departure.models import Departure\n-from review.models import Review\n-\n-from destination.serializers.destination_review_serializers import DestinationReviewWriteSerializers\n-from destination.serializers.destination_serializers import DestinationWriteSerializers\n-from destination.serializers.destinationgalleryimages_serializers import DestinationGalleryImagesWriteSerializers\n-from destination.serializers.package_serializers import PackageWriteSerializers\n-from review.serializers.review_serializers import ReviewWriteSerializers\n-from booking.serializers.destinationbook_serializers import DestinationBookWriteSerializers\n-from activities.serializers.activity_serializers import ActivityWriteSerializers\n-from collection.serializers.collection_serializers import CollectionWriteSerializers\n-from departure.serializers.departure_serializers import DepartureWriteSerializers\n-\n-# Create your views here.\n-\n-class BulkUploadAPIView(APIView):\n-    @swagger_auto_schema(\n-        request_body=openapi.Schema(\n-            type=openapi.TYPE_OBJECT,\n-            properties={\n-                'excel_file': openapi.Schema(type=openapi.TYPE_FILE),\n-                'type': openapi.Schema(\n-                    type=openapi.TYPE_STRING,\n-                    description=\"Specify the type of data to import. Options are: 'package', 'destination', 'destination-gallery-images', 'destination-review', 'destination-book', 'activity', 'collection', 'departure', 'review'.\",\n-                    enum=[\n-                        'package',\n-                        'destination',\n-                        'destination-gallery-images',\n-                        'destination-review',\n-                        'destination-book',\n-                        'activity',\n-                        'collection',\n-                        'departure',\n-                        'review'\n-                    ]\n-                ),\n-            },\n-            required=['excel_file', 'type']\n-        ),\n-        operation_summary=\"Upload Excel file\",\n-        operation_description=\"Upload an Excel file and import data into the specified model based on the provided type.\",\n-    )\n-    def post(self, request, format=None):\n-        file = request.FILES.get('excel_file')\n-        type = request.data.get('type')\n-\n-        if not file:\n-            return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        if not type:\n-            return Response({\"error\": \"No type provided\"}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        df = pd.read_csv(file)\n-        datas = df.to_dict(orient='records')\n-\n-        if type == \"package\":\n-            create_update_packages(Package, PackageWriteSerializers, datas, 'name', type)\n-        elif type == \"destination\":\n-            create_update_records(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n-        elif type == \"destination-gallery-images\":\n-            create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n-        elif type == \"destination-book\":\n-            create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n-        elif type == \"activity\":\n-            create_update_activities(Activity, ActivityWriteSerializers, datas, 'name', type)\n-        elif type == \"collection\":\n-            create_update_collections(Collection, CollectionWriteSerializers, datas, 'name', type)\n-        elif type == \"departure\":\n-            create_update_departures(Departure, DepartureWriteSerializers, datas, 'id', type)\n-        elif type == \"review\":\n-            create_update(Review, ReviewWriteSerializers, datas, 'name', type)\n-        else:\n-            return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n-\n-        return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n-\n-\n-def create_update(my_model,my_serializer,datas,unique_field_name):\n-    \n-    for record in datas:\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Use a unique field here\n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                print(serializer.errors)\n-                # Handle validation errors\n-                pass\n-\n-\n-def create_update_records(my_model, my_serializer, datas, unique_field_name, related_fields=None):\n-    if related_fields is None:\n-        related_fields = {}\n-\n-    for record in datas:\n-        # Process related fields if any\n-        for field, relation in related_fields.items():\n-            if field in record:\n-                related_model = relation['model']\n-                lookup_field = relation['lookup_field']\n-                related_obj = related_model.objects.filter(**{lookup_field: record[field]}).first()\n-                if related_obj:\n-                    record[field] = related_obj.id\n-                else:\n-                    print(f\"Related instance for {field} with value '{record[field]}' not found.\")\n-                    continue\n-\n-        # Find existing data\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]}).first()\n-\n-        if existing_data:\n-            # Update existing record\n-            serializer = my_serializer(existing_data, data=record)\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-\n-        if serializer.is_valid():\n-            serializer.save()\n-        else:\n-            print(serializer.errors)  # Handle validation errors\n-\n-def create_update_packages(my_model, my_serializer, datas, unique_field_name):\n-    \n-    for record in datas:\n-        existing_data = my_model.objects.filter(name=record[unique_field_name])\n-        \n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Get the existing record based on the unique field\n-            \n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-def create_update_gallery_images(my_model, my_serializer, datas, unique_field_name):\n-    \n-    for record in datas:\n-        # Resolve the foreign key if it's provided as a name or identifier\n-        if isinstance(record[unique_field_name], str):\n-            destination_obj = Destination.objects.filter(name=record[unique_field_name]).first()\n-        elif isinstance(record[unique_field_name], int):\n-            destination_obj = Destination.objects.filter(id=record[unique_field_name]).first()\n-        else:\n-            destination_obj = record[unique_field_name]  # Assume it's already a Destination instance\n-\n-        if not destination_obj:\n-            # Handle the case where the foreign key is not found\n-            continue\n-        \n-        record['destination_trip'] = destination_obj.id  # Ensure you're using the foreign key ID\n-\n-        existing_data = my_model.objects.filter(destination_trip=destination_obj)\n-\n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Get the existing record\n-            \n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-\n-def create_update_destination_book(my_model, my_serializer, datas, unique_field_name):\n-    \n-    for record in datas:\n-        # Resolve or create the foreign keys if provided as names or identifiers\n-        if 'activity' in record:\n-            if isinstance(record['activity'], str):\n-                activity_obj, created = Activity.objects.get_or_create(name=record['activity'])\n-            elif isinstance(record['activity'], int):\n-                activity_obj = Activity.objects.filter(id=record['activity']).first()\n-            else:\n-                activity_obj = record['activity']  # Assume it's already an Activity instance\n-\n-            if not activity_obj:\n-                # If still not found, skip the record\n-                continue\n-            \n-            record['activity'] = activity_obj.id  # Ensure you're using the foreign key ID\n-\n-        if 'package' in record:\n-            if isinstance(record['package'], str):\n-                package_obj, created = Package.objects.get_or_create(name=record['package'])\n-            elif isinstance(record['package'], int):\n-                package_obj = Package.objects.filter(id=record['package']).first()\n-            else:\n-                package_obj = record['package']  # Assume it's already a Package instance\n-\n-            if not package_obj:\n-                # If still not found, skip the record\n-                continue\n-            \n-            record['package'] = package_obj.id  # Ensure you're using the foreign key ID\n-\n-        if 'destination' in record:\n-            if isinstance(record['destination'], str):\n-                destination_obj, created = Destination.objects.get_or_create(title=record['destination'])\n-            elif isinstance(record['destination'], int):\n-                destination_obj = Destination.objects.filter(id=record['destination']).first()\n-            else:\n-                destination_obj = record['destination']  # Assume it's already a Destination instance\n-\n-            if not destination_obj:\n-                # If still not found, skip the record\n-                continue\n-            \n-            record['destination'] = destination_obj.id  # Ensure you're using the foreign key ID\n-\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n-        \n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Get the existing record based on the unique field\n-            \n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-\n-def create_update_activities(my_model, my_serializer, datas, unique_field_name):\n-    \n-    for record in datas:\n-        # Resolve or create the ManyToMany field (destinations_activities)\n-        if 'destinations_activities' in record:\n-            destination_ids = []\n-            for destination_name in record['destinations_activities']:\n-                if isinstance(destination_name, str):\n-                    destination_obj, created = Destination.objects.get_or_create(title=destination_name)\n-                elif isinstance(destination_name, int):\n-                    destination_obj = Destination.objects.filter(id=destination_name).first()\n-                else:\n-                    destination_obj = destination_name  # Assume it's already a Destination instance\n-\n-                if destination_obj:\n-                    destination_ids.append(destination_obj.id)\n-\n-            # Replace the destination names/instances with their IDs in the record\n-            record['destinations_activities'] = destination_ids\n-\n-        existing_data = my_model.objects.filter(name=record[unique_field_name])\n-        \n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Get the existing record based on the unique field\n-            \n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                activity = serializer.save()\n-                if 'destinations_activities' in record:\n-                    activity.destinations_activities.set(record['destinations_activities'])  # Update the ManyToMany field\n-            else:\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                activity = serializer.save()\n-                if 'destinations_activities' in record:\n-                    activity.destinations_activities.set(record['destinations_activities'])  # Set the ManyToMany field\n-            else:\n-                # Handle validation errors\n-                pass\n-\n-def create_update_collections(my_model, my_serializer, datas, unique_field_name):\n-    \n-    for record in datas:\n-        # Resolve or create the ManyToMany field (destination_collection)\n-        if 'destination_collection' in record:\n-            destination_ids = []\n-            for destination_name in record['destination_collection']:\n-                if isinstance(destination_name, str):\n-                    destination_obj, created = Destination.objects.get_or_create(title=destination_name)\n-                elif isinstance(destination_name, int):\n-                    destination_obj = Destination.objects.filter(id=destination_name).first()\n-                else:\n-                    destination_obj = destination_name  # Assume it's already a Destination instance\n-\n-                if destination_obj:\n-                    destination_ids.append(destination_obj.id)\n-\n-            # Replace the destination names/instances with their IDs in the record\n-            record['destination_collection'] = destination_ids\n-\n-        existing_data = my_model.objects.filter(name=record[unique_field_name])\n-        \n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Get the existing record based on the unique field\n-            \n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                collection = serializer.save()\n-                if 'destination_collection' in record:\n-                    collection.destination_collection.set(record['destination_collection'])  # Update the ManyToMany field\n-            else:\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                collection = serializer.save()\n-                if 'destination_collection' in record:\n-                    collection.destination_collection.set(record['destination_collection'])  # Set the ManyToMany field\n-            else:\n-                # Handle validation errors\n-                pass\n-\n-def create_update_departures(my_model, my_serializer, datas, unique_field_name):\n-    \n-    for record in datas:\n-        # Resolve or create the ForeignKey field (destination_trip)\n-        if 'destination_trip' in record:\n-            if isinstance(record['destination_trip'], str):\n-                destination_obj, created = Destination.objects.get_or_create(title=record['destination_trip'])\n-            elif isinstance(record['destination_trip'], int):\n-                destination_obj = Destination.objects.filter(id=record['destination_trip']).first()\n-            else:\n-                destination_obj = record['destination_trip']  # Assume it's already a Destination instance\n-\n-            if not destination_obj:\n-                # If the destination is not found, skip the record\n-                continue\n-            \n-            record['destination_trip'] = destination_obj.id  # Ensure you're using the foreign key ID\n-\n-        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n-        \n-        if existing_data.exists():\n-            existing_data = existing_data.first()  # Get the existing record based on the unique field\n-            \n-            serializer = my_serializer(existing_data, data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n-        else:\n-            # Create a new record\n-            serializer = my_serializer(data=record)\n-            if serializer.is_valid():\n-                serializer.save()\n-            else:\n-                # Handle validation errors\n-                pass\n"
                },
                {
                    "date": 1724915623554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -361,4 +361,49 @@\n                 serializer.save()\n             else:\n                 # Handle validation errors\n                 pass\n+\n+def create_update_destinations(my_model, my_serializer, datas, unique_field_name):\n+    \n+    for record in datas:\n+        # Resolve or create the ManyToMany field (packages)\n+        if 'packages' in record:\n+            package_ids = []\n+            for package_name in record['packages']:\n+                if isinstance(package_name, str):\n+                    package_obj, created = Package.objects.get_or_create(name=package_name)\n+                elif isinstance(package_name, int):\n+                    package_obj = Package.objects.filter(id=package_name).first()\n+                else:\n+                    package_obj = package_name  # Assume it's already a Package instance\n+\n+                if package_obj:\n+                    package_ids.append(package_obj.id)\n+\n+            # Replace the package names/instances with their IDs in the record\n+            record['packages'] = package_ids\n+\n+        # Handling other fields and creating or updating the Destination record\n+        existing_data = my_model.objects.filter(destination_title=record[unique_field_name])\n+        \n+        if existing_data.exists():\n+            existing_data = existing_data.first()  # Get the existing record based on the unique field\n+            \n+            serializer = my_serializer(existing_data, data=record)\n+            if serializer.is_valid():\n+                destination = serializer.save()\n+                if 'packages' in record:\n+                    destination.packages.set(record['packages'])  # Update the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n+        else:\n+            # Create a new record\n+            serializer = my_serializer(data=record)\n+            if serializer.is_valid():\n+                destination = serializer.save()\n+                if 'packages' in record:\n+                    destination.packages.set(record['packages'])  # Set the ManyToMany field\n+            else:\n+                # Handle validation errors\n+                pass\n"
                },
                {
                    "date": 1724915635630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \n         if type == \"package\":\n             create_update_packages(Package, PackageWriteSerializers, datas, 'name', type)\n         elif type == \"destination\":\n-            create_update(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n+            create_update_destinations(Destination, DestinationWriteSerializers, datas, 'destination_title', type)\n         elif type == \"destination-gallery-images\":\n             create_update_gallery_images(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'id', type)\n         elif type == \"destination-book\":\n             create_update_destination_book(DestinationBook, DestinationBookWriteSerializers, datas, 'user__email', type)\n"
                }
            ],
            "date": 1724834962410,
            "name": "Commit-0",
            "content": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework import status\nimport pandas as pd\n\nfrom drf_yasg import openapi\nfrom drf_yasg.utils import swagger_auto_schema\n\nfrom destination.models import Package, Destination, DestinationGalleryImages, DestinationReview\nfrom booking.models import DestinationBook\nfrom activities.models import Activity\nfrom collection.models import Collection\nfrom departure.models import Departure\nfrom review.models import Review\n\nfrom destination.serializers.destination_review_serializers import DestinationReviewWriteSerializers\nfrom destination.serializers.destination_serializers import DestinationWriteSerializers\nfrom destination.serializers.destinationgalleryimages_serializers import DestinationGalleryImagesWriteSerializers\nfrom destination.serializers.package_serializers import PackageWriteSerializers\nfrom review.serializers.review_serializers import ReviewWriteSerializers\nfrom booking.serializers.destinationbook_serializers import DestinationBookWriteSerializers\nfrom activities.serializers.activity_serializers import ActivityWriteSerializers\nfrom collection.serializers.collection_serializers import CollectionWriteSerializers\nfrom departure.serializers.departure_serializers import DepartureWriteSerializers\n\n# Create your views here.\n\nclass ImportExcel(APIView):\n    @swagger_auto_schema(\n        request_body=openapi.Schema(\n            type=openapi.TYPE_OBJECT,\n            properties={\n                'excel_file': openapi.Schema(type=openapi.TYPE_FILE),\n            },\n            required=['excel_file']\n        ),\n        operation_summary=\"Upload Excel file\",\n        operation_description=\"Upload Excel file and import data\",\n    )\n    def post(self, request, type, format=None):\n        file = request.FILES.get('excel_file')\n        if not file:\n            return Response({\"error\": \"No file provided\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        df = pd.read_csv(file)\n        datas = df.to_dict(orient='records')\n\n        if type == \"package\":\n            create_update_with_fk(Package, PackageWriteSerializers, datas, 'name')\n        elif type == \"destination\":\n            create_update_with_fk(Destination, DestinationWriteSerializers, datas, 'name')\n        elif type == \"destination-gallery-images\":\n            create_update_with_fk(DestinationGalleryImages, DestinationGalleryImagesWriteSerializers, datas, 'image')\n        elif type == \"destination-review\":\n            create_update_with_fk(DestinationReview, DestinationReviewWriteSerializers, datas, 'review')\n        elif type == \"destination-book\":\n            create_update_with_fk(DestinationBook, DestinationBookWriteSerializers, datas, 'booking_reference')\n        elif type == \"activity\":\n            create_update_with_fk(Activity, ActivityWriteSerializers, datas, 'name')\n        elif type == \"collection\":\n            create_update_with_fk(Collection, CollectionWriteSerializers, datas, 'name')\n        elif type == \"departure\":\n            create_update_with_fk(Departure, DepartureWriteSerializers, datas, 'departure_date')\n        elif type == \"review\":\n            create_update_with_fk(Review, ReviewWriteSerializers, datas, 'title')\n        else:\n            return Response({\"message\": \"Unknown file type\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        return Response({\"message\": \"File processed successfully\"}, status=status.HTTP_201_CREATED)\n\ndef create_update_with_fk(my_model, my_serializer, datas, unique_field_name):\n    for record in datas:\n        # Process foreign keys by looking up related models by name\n        for field_name, field_value in record.items():\n            if isinstance(field_value, str):\n                try:\n                    related_model = my_model._meta.get_field(field_name).related_model\n                    related_instance = related_model.objects.filter(name=field_value).first()\n                    if related_instance:\n                        record[field_name] = related_instance.id\n                    else:\n                        print(f\"Related instance for {field_name} with value '{field_value}' not found.\")\n                except AttributeError:\n                    # Skip if the field is not a foreign key\n                    continue\n\n        # Handle the creation or update of the main record\n        existing_data = my_model.objects.filter(**{unique_field_name: record[unique_field_name]})\n        if existing_data.exists():\n            existing_data = existing_data.first()\n            serializer = my_serializer(existing_data, data=record)\n            if serializer.is_valid():\n                serializer.save()\n            else:\n                print(serializer.errors)\n        else:\n            serializer = my_serializer(data=record)\n            if serializer.is_valid():\n                serializer.save()\n            else:\n                print(serializer.errors)\n"
        }
    ]
}