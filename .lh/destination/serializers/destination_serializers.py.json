{
    "sourceFile": "destination/serializers/destination_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1724929074297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724929081337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,10 +216,13 @@\n                     departure_instance.save()\n                 else:\n                     # Create a new departure if the departure does not exist\n                     Departure.objects.create(destination_trip=instance, **departure_data)\n-            \n         \n+        else:\n+        # Set departures to None if no departure data is provided\n+        Departure.objects.filter(destination_trip=instance).delete()\n+        \n         for image_file in images_data:\n             DestinationGalleryImages.objects.create(destination_trip=instance, image=image_file)\n \n         return instance\n"
                },
                {
                    "date": 1724929093964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n                     Departure.objects.create(destination_trip=instance, **departure_data)\n         \n         else:\n         # Set departures to None if no departure data is provided\n-        Departure.objects.filter(destination_trip=instance).delete()\n+         Departure.objects.filter(destination_trip=instance).delete()\n         \n         for image_file in images_data:\n             DestinationGalleryImages.objects.create(destination_trip=instance, image=image_file)\n \n"
                },
                {
                    "date": 1724929102034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,10 +218,10 @@\n                     # Create a new departure if the departure does not exist\n                     Departure.objects.create(destination_trip=instance, **departure_data)\n         \n         else:\n-        # Set departures to None if no departure data is provided\n-         Departure.objects.filter(destination_trip=instance).delete()\n+            # Set departures to None if no departure data is provided\n+            Departure.objects.filter(destination_trip=instance).delete()\n         \n         for image_file in images_data:\n             DestinationGalleryImages.objects.create(destination_trip=instance, image=image_file)\n \n"
                },
                {
                    "date": 1725170864351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,15 @@\n             'group_size',\n             'galleryimages',\n             'destination_departures',\n         ]\n+    def to_representation(self, instance):\n+        representation = super().to_representation(instance)\n+        # Conditionally remove price fields if is_price is False\n+        if not instance.is_price:\n+            representation.pop('price', None)\n+            representation.pop('price_type', None)\n+        return representation\n \n class DestinationRetrieveUserSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725170873477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,9 @@\n \n     class Meta:\n         model = Destination\n         fields = '__all__'\n+    \n \n class DestinationRetrieveAdminSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725170879518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,16 @@\n \n     class Meta:\n         model = Destination\n         fields = '__all__'\n-    \n+        \n+    def to_representation(self, instance):\n+        representation = super().to_representation(instance)\n+        # Conditionally remove price fields if is_price is False\n+        if not instance.is_price:\n+            representation.pop('price', None)\n+            representation.pop('price_type', None)\n+        return representation\n \n class DestinationRetrieveAdminSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725170890474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n \n     class Meta:\n         model = Destination\n         fields = '__all__'\n+    \n         \n class DestinationWriteSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725170902240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,10 +142,10 @@\n \n     class Meta:\n         model = Destination\n         fields = '__all__'\n-    \n         \n+        \n class DestinationWriteSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n     \n"
                },
                {
                    "date": 1725170920290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,15 +109,8 @@\n             'group_size',\n             'galleryimages',\n             'destination_departures',\n         ]\n-    def to_representation(self, instance):\n-        representation = super().to_representation(instance)\n-        # Conditionally remove price fields if is_price is False\n-        if not instance.is_price:\n-            representation.pop('price', None)\n-            representation.pop('price_type', None)\n-        return representation\n \n class DestinationRetrieveUserSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725170934576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,15 @@\n             'galleryimages',\n             'destination_departures',\n             \n         ]\n+        def to_representation(self, instance):\n+        representation = super().to_representation(instance)\n+        # Conditionally remove price fields if is_price is False\n+        if not instance.is_price:\n+            representation.pop('price', None)\n+            representation.pop('price_type', None)\n+        return representation\n \n class DestinationlistAdminSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725172969709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             'galleryimages',\n             'destination_departures',\n             \n         ]\n-        def to_representation(self, instance):\n+    def to_representation(self, instance):\n         representation = super().to_representation(instance)\n         # Conditionally remove price fields if is_price is False\n         if not instance.is_price:\n             representation.pop('price', None)\n"
                },
                {
                    "date": 1725173413163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,8 @@\n         ]\n     def to_representation(self, instance):\n         representation = super().to_representation(instance)\n         # Conditionally remove price fields if is_price is False\n-        if not instance.is_price:\n-            representation.pop('price', None)\n-            representation.pop('price_type', None)\n         return representation\n \n class DestinationlistAdminSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725173423915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,12 +74,8 @@\n             'galleryimages',\n             'destination_departures',\n             \n         ]\n-    def to_representation(self, instance):\n-        representation = super().to_representation(instance)\n-        # Conditionally remove price fields if is_price is False\n-        return representation\n \n class DestinationlistAdminSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725173438721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,16 +118,9 @@\n \n     class Meta:\n         model = Destination\n         fields = '__all__'\n-        \n-    def to_representation(self, instance):\n-        representation = super().to_representation(instance)\n-        # Conditionally remove price fields if is_price is False\n-        if not instance.is_price:\n-            representation.pop('price', None)\n-            representation.pop('price_type', None)\n-        return representation\n+    \n \n class DestinationRetrieveAdminSerializers(serializers.ModelSerializer):\n     galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n     destination_departures = DepartureSerializer(many=True, read_only=True)\n"
                },
                {
                    "date": 1725518639410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-from rest_framework import serializers\n+`from rest_framework import serializers\n from ..models import Destination, DestinationGalleryImages, Departure, Package\n from destination.serializers.package_serializers import PackageRetrieveSerializers\n import ast\n from django.db import transaction\n"
                }
            ],
            "date": 1724929074297,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Destination, DestinationGalleryImages, Departure, Package\nfrom destination.serializers.package_serializers import PackageRetrieveSerializers\nimport ast\nfrom django.db import transaction\n\n\ndef str_to_list(data,value_to_convert):\n    try:\n        mutable_data = data.dict()\n    except:\n        mutable_data = data\n    value_to_convert_data = mutable_data[value_to_convert]\n    if isinstance(value_to_convert_data,list):# type(value_to_convert_data) == list:\n        \n        return mutable_data\n    try:\n        variations = ast.literal_eval(value_to_convert_data)\n        mutable_data[value_to_convert] = variations\n        return mutable_data\n    except ValueError as e:\n        raise serializers.ValidationError({f'{value_to_convert}': str(e)})\n    \n\nclass PackageSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Package\n        fields = [\n            'id',\n            'name',\n            'image',]\n    \nclass DestinationGalleryImagesSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DestinationGalleryImages\n        fields = '__all__'\n\nclass DepartureSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Departure\n        fields = '__all__'\n\nclass DestinationlistUserSerializers(serializers.ModelSerializer):\n    galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n    destination_departures = DepartureSerializer(many=True, read_only=True)\n    packages= PackageSerializers(many = True, read_only = True)\n\n    class Meta:\n        model = Destination\n        fields = [\n            'id',\n            'slug',\n            'destination_title',\n            'packages',  # Including the package names\n            'price',\n            'price_type',\n            'is_price',\n            'featured_image',\n            'overview',\n            'inclusion_and_exclusion',\n            'ltinerary',\n            'trip_map_url',\n            'trip_map_image',\n            'gear_and_equipment',\n            'useful_information',\n            'duration',\n            'trip_grade',\n            'best_season',\n            'max_altitude',\n            'meals',\n            'nature_of_trip',\n            'accommodation',\n            'group_size',\n            'galleryimages',\n            'destination_departures',\n            \n        ]\n\nclass DestinationlistAdminSerializers(serializers.ModelSerializer):\n    galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n    destination_departures = DepartureSerializer(many=True, read_only=True)\n    packages= PackageSerializers(many = True, read_only = True)\n\n    class Meta:\n        model = Destination\n        fields = [\n            'id',\n            'slug',\n            'destination_title',\n            'packages',  # Including the package names\n            'price',\n            'price_type',\n            'is_price',\n            'featured_image',\n            'overview',\n            'inclusion_and_exclusion',\n            'ltinerary',\n            'trip_map_url',\n            'trip_map_image',\n            'gear_and_equipment',\n            'useful_information',\n            'duration',\n            'trip_grade',\n            'best_season',\n            'max_altitude',\n            'meals',\n            'nature_of_trip',\n            'accommodation',\n            'group_size',\n            'galleryimages',\n            'destination_departures',\n        ]\n\nclass DestinationRetrieveUserSerializers(serializers.ModelSerializer):\n    galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n    destination_departures = DepartureSerializer(many=True, read_only=True)\n    packages= PackageSerializers(many = True, read_only = True)\n\n    class Meta:\n        model = Destination\n        fields = '__all__'\n\nclass DestinationRetrieveAdminSerializers(serializers.ModelSerializer):\n    galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n    destination_departures = DepartureSerializer(many=True, read_only=True)\n    packages= PackageSerializers(many = True, read_only = True)\n\n    class Meta:\n        model = Destination\n        fields = '__all__'\n        \nclass DestinationWriteSerializers(serializers.ModelSerializer):\n    galleryimages = DestinationGalleryImagesSerializer(many=True, read_only=True)\n    destination_departures = DepartureSerializer(many=True, read_only=True)\n    \n    def to_internal_value(self, data):\n        if data.get('packages'):\n            data = str_to_list(data,'packages')\n            return super().to_internal_value(data)\n        return super().to_internal_value(data)\n\n\n    class Meta:\n        model = Destination\n        fields = '__all__'\n        # exclude = ['packages']\n    @transaction.atomic\n    def create(self, validated_data):\n        packages_data = validated_data.pop('packages', [])\n\n        departures_data = self.context.get('request').data.get('departures')\n        import json\n        departures_data =  json.loads(departures_data)\n       \n\n        images_data = []\n        for key in self.context['request'].FILES:\n            if key.startswith('images['):\n                images_data.append(self.context['request'].FILES[key])\n\n        destination = Destination.objects.create(**validated_data)\n        departures_data = [ {'destination_trip':destination.id,**departure} for departure in departures_data]\n        \n        departure_serializers = DepartureSerializer(data=departures_data,many=True)\n        if departure_serializers.is_valid(raise_exception=True):\n            departure_serializers.save()\n        else:\n            print(\"This  is not valid \")\n        \n        if packages_data:\n            destination.packages.set(packages_data)\n        \n      \n     # Handle image uploads\n        for image_file in images_data:\n            DestinationGalleryImages.objects.create(destination_trip=destination, image=image_file)\n        return destination\n    @transaction.atomic    \n    def update(self, instance, validated_data):\n        # Parse departures data from request\n        departures_data = self.context.get('request').data.get('departures')\n        import json\n        if departures_data:\n            departures_data = json.loads(departures_data)\n\n        # Parse images data from request\n        images_data = []\n        for key in self.context['request'].FILES:\n            if key.startswith('images['):\n                images_data.append(self.context['request'].FILES[key])\n\n        # Call the parent's update method to update the instance\n        instance = super().update(instance, validated_data)\n\n        # Handling Departures\n        if departures_data:\n            # Get existing departure IDs from the database\n            existing_departures = Departure.objects.filter(destination_trip=instance)\n            existing_departure_ids = set(existing_departures.values_list('id', flat=True))\n\n            # Extract the provided departure IDs from the request data\n            provided_departure_ids = set([departure.get('id') for departure in departures_data if departure.get('id')])\n\n            # Delete departures that are not in the provided data\n            departures_to_delete = existing_departure_ids - provided_departure_ids\n            Departure.objects.filter(id__in=departures_to_delete).delete()\n\n            # Update or create departures\n            for departure_data in departures_data:\n                departure_id = departure_data.pop('id', None)\n                if departure_id:\n                    # Update the existing departure\n                    departure_instance = Departure.objects.get(id=departure_id, destination_trip=instance)\n                    for key, value in departure_data.items():\n                        setattr(departure_instance, key, value)\n                    departure_instance.save()\n                else:\n                    # Create a new departure if the departure does not exist\n                    Departure.objects.create(destination_trip=instance, **departure_data)\n            \n        \n        for image_file in images_data:\n            DestinationGalleryImages.objects.create(destination_trip=instance, image=image_file)\n\n        return instance\n"
        }
    ]
}