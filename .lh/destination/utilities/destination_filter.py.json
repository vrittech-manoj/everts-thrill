{
    "sourceFile": "destination/utilities/destination_filter.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 96,
            "patches": [
                {
                    "date": 1724821555571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724821611886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n     \n     package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n     min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n     max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n"
                },
                {
                    "date": 1724821620995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_collections')\n     \n     package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n     min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n     max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n"
                },
                {
                    "date": 1724821649866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n-    packages = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_packages')\n     \n     package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n     min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n     max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n"
                },
                {
                    "date": 1724821656120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     \n-    package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n+    # package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n     min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n     max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n     class Meta:\n         model = Destination\n"
                },
                {
                    "date": 1724821664321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,5 +35,13 @@\n             queryset = queryset.filter(activities_id__in=activities)\n         except:\n             pass\n         return queryset\n+    def filter_by_activities(self, queryset, name, value):\n+        try:\n+            activities = self.request.GET.get('activities')\n+            activities = activities.split(',')\n+            queryset = queryset.filter(activities_id__in=activities)\n+        except:\n+            pass\n+        return queryset\n \n"
                },
                {
                    "date": 1724821674200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,11 +35,13 @@\n             queryset = queryset.filter(activities_id__in=activities)\n         except:\n             pass\n         return queryset\n+    \n+    \n     def filter_by_activities(self, queryset, name, value):\n         try:\n-            activities = self.request.GET.get('activities')\n+            packages = self.request.GET.get('activities')\n             activities = activities.split(',')\n             queryset = queryset.filter(activities_id__in=activities)\n         except:\n             pass\n"
                },
                {
                    "date": 1724821680948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n             pass\n         return queryset\n     \n     \n-    def filter_by_activities(self, queryset, name, value):\n+    def filter_by_packages(self, queryset, name, value):\n         try:\n-            packages = self.request.GET.get('activities')\n+            packages = self.request.GET.get('packages')\n             activities = activities.split(',')\n             queryset = queryset.filter(activities_id__in=activities)\n         except:\n             pass\n"
                },
                {
                    "date": 1724821686183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,10 @@\n     \n     def filter_by_packages(self, queryset, name, value):\n         try:\n             packages = self.request.GET.get('packages')\n-            activities = activities.split(',')\n-            queryset = queryset.filter(activities_id__in=activities)\n+            packages = packages.split(',')\n+            queryset = queryset.filter(activities_id__in=packages)\n         except:\n             pass\n         return queryset\n \n"
                },
                {
                    "date": 1724821784206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,9 @@\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     \n-    # package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n-    min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n-    max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n+\n     class Meta:\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n@@ -41,9 +39,9 @@\n     def filter_by_packages(self, queryset, name, value):\n         try:\n             packages = self.request.GET.get('packages')\n             packages = packages.split(',')\n-            queryset = queryset.filter(activities_id__in=packages)\n+            queryset = queryset.filter(packages_id__in=packages)\n         except:\n             pass\n         return queryset\n \n"
                },
                {
                    "date": 1724821790822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,10 @@\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n-            'duration': ['exact'],\n+            'duration': ['exact',],\n+            \n         }\n \n     def filter_by_collections(self, queryset, name, value):\n         try:\n"
                },
                {
                    "date": 1724821796157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n-            'duration': ['exact',],\n+            'duration': ['exact','gte'],\n             \n         }\n \n     def filter_by_collections(self, queryset, name, value):\n"
                },
                {
                    "date": 1724829742542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,33 @@\n import django_filters\n from ..models import Destination\n-import ast\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    \n \n     class Meta:\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n-            'duration': ['exact','gte'],\n-            \n+            'duration': ['exact', 'gte', 'lte'],\n         }\n \n     def filter_by_collections(self, queryset, name, value):\n-        try:\n-            collections = self.request.GET.get('collections')\n-            collections = collections.split(',')\n-            queryset = queryset.filter(collections_id__in=collections)\n-        except:\n-            pass\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n         return queryset\n-    \n-    \n+\n     def filter_by_activities(self, queryset, name, value):\n-        try:\n-            activities = self.request.GET.get('activities')\n-            activities = activities.split(',')\n-            queryset = queryset.filter(activities_id__in=activities)\n-        except:\n-            pass\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities)\n         return queryset\n-    \n-    \n+\n     def filter_by_packages(self, queryset, name, value):\n-        try:\n-            packages = self.request.GET.get('packages')\n-            packages = packages.split(',')\n-            queryset = queryset.filter(packages_id__in=packages)\n-        except:\n-            pass\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n-\n"
                },
                {
                    "date": 1724940427759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,19 @@\n             collections = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(collections__id__in=collections)\n         return queryset\n \n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities)\n-        return queryset\n-\n     def filter_by_packages(self, queryset, name, value):\n         if value:\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            # Filter by activities directly related to the destination or through packages\n+            queryset = queryset.filter(\n+                django_filters.Q(activities__id__in=activities) | \n+                django_filters.Q(packages__activities__id__in=activities)\n+            ).distinct()\n+        return queryset\n"
                },
                {
                    "date": 1724942385594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,19 +19,15 @@\n             collections = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(collections__id__in=collections)\n         return queryset\n \n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities)\n+        return queryset\n+\n     def filter_by_packages(self, queryset, name, value):\n         if value:\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            # Filter by activities directly related to the destination or through packages\n-            queryset = queryset.filter(\n-                django_filters.Q(activities__id__in=activities) | \n-                django_filters.Q(packages__activities__id__in=activities)\n-            ).distinct()\n-        return queryset\n"
                },
                {
                    "date": 1724942644184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,15 +19,20 @@\n             collections = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(collections__id__in=collections)\n         return queryset\n \n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities)\n-        return queryset\n-\n     def filter_by_packages(self, queryset, name, value):\n         if value:\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            # Filter by activities directly related to the destination or through packages\n+            queryset = queryset.filter(\n+                packages__activities__id__in=activities\n+            ).union(\n+                queryset.filter(activities__id__in=activities)\n+            ).distinct()\n+        return queryset\n"
                },
                {
                    "date": 1724943016971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import django_filters\n from ..models import Destination\n+from django.db.models import Q\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n"
                },
                {
                    "date": 1724943029493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,13 @@\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n-    def filter_by_activities(self, queryset, name, value):\n+def filter_by_activities(self, queryset, name, value):\n         if value:\n             activities = value.split(',') if ',' in value else [value]\n-            # Filter by activities directly related to the destination or through packages\n+            # Apply the filter on the queryset, whether it was filtered by packages or not\n             queryset = queryset.filter(\n-                packages__activities__id__in=activities\n-            ).union(\n-                queryset.filter(activities__id__in=activities)\n+                Q(packages__activities__id__in=activities) | \n+                Q(activities__id__in=activities)\n             ).distinct()\n         return queryset\n"
                },
                {
                    "date": 1724943695207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n import django_filters\n+from django.db.models import Q\n from ..models import Destination\n-from django.db.models import Q\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n \n     class Meta:\n         model = Destination\n@@ -14,21 +13,15 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'duration': ['exact', 'gte', 'lte'],\n         }\n \n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n     def filter_by_packages(self, queryset, name, value):\n         if value:\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n-def filter_by_activities(self, queryset, name, value):\n+    def filter_by_activities(self, queryset, name, value):\n         if value:\n             activities = value.split(',') if ',' in value else [value]\n             # Apply the filter on the queryset, whether it was filtered by packages or not\n             queryset = queryset.filter(\n"
                },
                {
                    "date": 1724943716174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import django_filters\n+from ..models import Destination\n from django.db.models import Q\n-from ..models import Destination\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n \n     class Meta:\n         model = Destination\n@@ -13,19 +14,25 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'duration': ['exact', 'gte', 'lte'],\n         }\n \n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n     def filter_by_packages(self, queryset, name, value):\n         if value:\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n     def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            # Apply the filter on the queryset, whether it was filtered by packages or not\n-            queryset = queryset.filter(\n-                Q(packages__activities__id__in=activities) | \n-                Q(activities__id__in=activities)\n-            ).distinct()\n-        return queryset\n+            if value:\n+                activities = value.split(',') if ',' in value else [value]\n+                # Apply the filter on the queryset, whether it was filtered by packages or not\n+                queryset = queryset.filter(\n+                    Q(packages__activities__id__in=activities) | \n+                    Q(activities__id__in=activities)\n+                ).distinct()\n+            return queryset\n"
                },
                {
                    "date": 1724943793244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,13 +26,12 @@\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n-    def filter_by_activities(self, queryset, name, value):\n-            if value:\n-                activities = value.split(',') if ',' in value else [value]\n-                # Apply the filter on the queryset, whether it was filtered by packages or not\n-                queryset = queryset.filter(\n-                    Q(packages__activities__id__in=activities) | \n-                    Q(activities__id__in=activities)\n-                ).distinct()\n-            return queryset\n+   def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            # Filter destinations by activities associated with their packages\n+            queryset = queryset.filter(\n+                packages__in=Package.objects.filter(activities__id__in=activities)\n+            ).distinct()\n+        return queryset\n"
                },
                {
                    "date": 1724943843928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import django_filters\n from ..models import Destination\n+\n from django.db.models import Q\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n@@ -26,12 +27,12 @@\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n-   def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            # Filter destinations by activities associated with their packages\n-            queryset = queryset.filter(\n-                packages__in=Package.objects.filter(activities__id__in=activities)\n-            ).distinct()\n-        return queryset\n+    def filter_by_activities(self, queryset, name, value):\n+            if value:\n+                activities = value.split(',') if ',' in value else [value]\n+                # Filter destinations by activities associated with their packages\n+                queryset = queryset.filter(\n+                    packages__in=Package.objects.filter(activities__id__in=activities)\n+                ).distinct()\n+            return queryset\n"
                },
                {
                    "date": 1724943850100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import django_filters\n-from ..models import Destination\n-\n+from ..models import Destination,\n from django.db.models import Q\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n"
                },
                {
                    "date": 1724944001675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import django_filters\n-from ..models import Destination,\n+from ..models import Destination,Package\n from django.db.models import Q\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n@@ -26,12 +26,12 @@\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n-    def filter_by_activities(self, queryset, name, value):\n-            if value:\n-                activities = value.split(',') if ',' in value else [value]\n-                # Filter destinations by activities associated with their packages\n-                queryset = queryset.filter(\n-                    packages__in=Package.objects.filter(activities__id__in=activities)\n-                ).distinct()\n-            return queryset\n+ def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            # Filter destinations by activities directly associated with them\n+            queryset = queryset.filter(\n+                activities__id__in=activities\n+            ).distinct()\n+        return queryset\n"
                },
                {
                    "date": 1724944535930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,17 +21,21 @@\n             queryset = queryset.filter(collections__id__in=collections)\n         return queryset\n \n     def filter_by_packages(self, queryset, name, value):\n+        \"\"\"\n+        First filter destinations based on packages if provided.\n+        \"\"\"\n         if value:\n             packages = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n- def filter_by_activities(self, queryset, name, value):\n+    def filter_by_activities(self, queryset, name, value):\n+        \"\"\"\n+        Filter the already filtered destinations (by packages) by activities if provided.\n+        If no packages filter is applied, it will filter directly by activities.\n+        \"\"\"\n         if value:\n             activities = value.split(',') if ',' in value else [value]\n-            # Filter destinations by activities directly associated with them\n-            queryset = queryset.filter(\n-                activities__id__in=activities\n-            ).distinct()\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n         return queryset\n"
                },
                {
                    "date": 1725863327279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'duration': ['exact', 'gte', 'lte'],\n+            'duration': ['exact', 'gte', 'lte'],\n         }\n \n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1725945856371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import django_filters\n+import re\n+from ..models import Destination\n+from django.db.models import Q\n+\n+class DestinationFilter(django_filters.FilterSet):\n+    activities = django_filters.CharFilter(method='filter_by_activities')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_packages')\n+    duration = django_filters.CharFilter(method='filter_by_duration')  # Custom filter for duration\n+\n+    class Meta:\n+        model = Destination\n+        fields = {\n+            'destination_title': ['exact', 'icontains'],\n+            'nature_of_trip': ['exact', 'icontains'],\n+            'created_date': ['exact', 'gte', 'lte'],\n+        }\n+\n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n+    def filter_by_duration(self, queryset, name, value):\n+        \"\"\"\n+        Custom filter to handle duration string values and filter by range (gte and lte).\n+        We assume duration is in the format '5-10 Days' or '5 Days' and extract the numeric part.\n+        \"\"\"\n+        if value:\n+            # Extract numbers from the value string\n+            numbers = re.findall(r'\\d+', value)\n+            if len(numbers) == 1:\n+                # If there's only one number, treat it as the exact duration\n+                duration_value = int(numbers[0])\n+                queryset = queryset.filter(Q(duration__icontains=str(duration_value)))\n+            elif len(numbers) == 2:\n+                # If there are two numbers, treat them as a range (min_duration - max_duration)\n+                min_duration, max_duration = int(numbers[0]), int(numbers[1])\n+                queryset = queryset.filter(\n+                    Q(duration__icontains=str(min_duration)) |\n+                    Q(duration__icontains=str(max_duration))\n+                )\n+        return queryset\n"
                },
                {
                    "date": 1725945976413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n import django_filters\n import re\n from ..models import Destination\n-from django.db.models import Q\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration = django_filters.CharFilter(method='filter_by_duration')  # Custom filter for duration\n+    duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  # Custom filter for duration_gte\n+    duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')  # Custom filter for duration_lte\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -34,66 +34,29 @@\n             activities = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(activities__id__in=activities).distinct()\n         return queryset\n \n-    def filter_by_duration(self, queryset, name, value):\n+    def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n-        Custom filter to handle duration string values and filter by range (gte and lte).\n-        We assume duration is in the format '5-10 Days' or '5 Days' and extract the numeric part.\n+        Custom filter to handle gte (greater than or equal) duration filtering.\n+        Extracts numeric value and filters by minimum duration.\n         \"\"\"\n         if value:\n-            # Extract numbers from the value string\n-            numbers = re.findall(r'\\d+', value)\n-            if len(numbers) == 1:\n-                # If there's only one number, treat it as the exact duration\n-                duration_value = int(numbers[0])\n-                queryset = queryset.filter(Q(duration__icontains=str(duration_value)))\n-            elif len(numbers) == 2:\n-                # If there are two numbers, treat them as a range (min_duration - max_duration)\n-                min_duration, max_duration = int(numbers[0]), int(numbers[1])\n-                queryset = queryset.filter(\n-                    Q(duration__icontains=str(min_duration)) |\n-                    Q(duration__icontains=str(max_duration))\n-                )\n+            try:\n+                gte_value = int(value)\n+                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(gte_value))\n+            except ValueError:\n+                pass  # If value is not an integer, ignore this filter\n         return queryset\n-import django_filters\n-from ..models import Destination,Package\n-from django.db.models import Q\n \n-class DestinationFilter(django_filters.FilterSet):\n-    activities = django_filters.CharFilter(method='filter_by_activities')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n-    packages = django_filters.CharFilter(method='filter_by_packages')\n-\n-    class Meta:\n-        model = Destination\n-        fields = {\n-            'destination_title': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n-            'duration': ['exact', 'gte', 'lte'],\n-            'duration': ['exact', 'gte', 'lte'],\n-        }\n-\n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n-    def filter_by_packages(self, queryset, name, value):\n+    def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n-        First filter destinations based on packages if provided.\n+        Custom filter to handle lte (less than or equal) duration filtering.\n+        Extracts numeric value and filters by maximum duration.\n         \"\"\"\n         if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n+            try:\n+                lte_value = int(value)\n+                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(lte_value))\n+            except ValueError:\n+                pass  # If value is not an integer, ignore this filter\n         return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        \"\"\"\n-        Filter the already filtered destinations (by packages) by activities if provided.\n-        If no packages filter is applied, it will filter directly by activities.\n-        \"\"\"\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n"
                },
                {
                    "date": 1725946057150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n             try:\n                 gte_value = int(value)\n                 queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(gte_value))\n             except ValueError:\n-                pass  # If value is not an integer, ignore this filter\n+                pass  \n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n"
                },
                {
                    "date": 1725946080109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  # Custom filter for duration_gte\n+    duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')  # Custom filter for duration_lte\n \n     class Meta:\n         model = Destination\n"
                },
                {
                    "date": 1725946138181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,17 @@\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n-    duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')  # Custom filter for duration_lte\n+    duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n \n     class Meta:\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n+            'created_date': ['exact', 'gte', 'lte'],\n         }\n \n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1725946144411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,10 @@\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n-            'created_date': ['exact', 'gte', 'lte'],\n+            'duration_gte': ['exact'],\n+            'duration_lte': ['exact'],\n         }\n \n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1725946186932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,8 @@\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n-            'duration_gte': ['exact'],\n-            'duration_lte': ['exact'],\n         }\n \n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1725946477340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n+    \n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725946484580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n-    \n+    print(duration_gte)\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725946490135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n     print(duration_gte)\n+    print(duration_lte)\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725947077993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,10 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n-    duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n-    print(duration_gte)\n-    print(duration_lte)\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -42,23 +40,26 @@\n         Custom filter to handle gte (greater than or equal) duration filtering.\n         Extracts numeric value and filters by minimum duration.\n         \"\"\"\n         if value:\n-            try:\n-                gte_value = int(value)\n-                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(gte_value))\n-            except ValueError:\n-                pass  \n+            queryset = queryset.filter(duration__iregex=r'\\b\\d+-?\\d*\\b').filter(lambda x: self.extract_duration(x) >= value)\n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n         Custom filter to handle lte (less than or equal) duration filtering.\n         Extracts numeric value and filters by maximum duration.\n         \"\"\"\n         if value:\n-            try:\n-                lte_value = int(value)\n-                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(lte_value))\n-            except ValueError:\n-                pass  # If value is not an integer, ignore this filter\n+            queryset = queryset.filter(duration__iregex=r'\\b\\d+-?\\d*\\b').filter(lambda x: self.extract_duration(x) <= value)\n         return queryset\n+\n+    def extract_duration(self, obj):\n+        \"\"\"\n+        Extracts numeric value from duration string.\n+        \"\"\"\n+        duration = obj.duration\n+        if '-' in duration:\n+            start, end = map(int, duration.split('-'))\n+            return (start + end) / 2  # Average duration\n+        else:\n+            return int(duration)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725947166359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,23 +35,13 @@\n             queryset = queryset.filter(activities__id__in=activities).distinct()\n         return queryset\n \n     def filter_by_duration_gte(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter to handle gte (greater than or equal) duration filtering.\n-        Extracts numeric value and filters by minimum duration.\n-        \"\"\"\n-        if value:\n-            queryset = queryset.filter(duration__iregex=r'\\b\\d+-?\\d*\\b').filter(lambda x: self.extract_duration(x) >= value)\n+        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__gte=value)\n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter to handle lte (less than or equal) duration filtering.\n-        Extracts numeric value and filters by maximum duration.\n-        \"\"\"\n-        if value:\n-            queryset = queryset.filter(duration__iregex=r'\\b\\d+-?\\d*\\b').filter(lambda x: self.extract_duration(x) <= value)\n+        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__lte=value)\n         return queryset\n \n     def extract_duration(self, obj):\n         \"\"\"\n"
                },
                {
                    "date": 1725947176536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import django_filters\n import re\n from ..models import Destination\n+from django.db.models import F, Avg\n+from django.db.models.functions import Extract\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n"
                },
                {
                    "date": 1725947457496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n import django_filters\n import re\n+from django.db.models import Q\n from ..models import Destination\n-from django.db.models import F, Avg\n-from django.db.models.functions import Extract\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Using NumberFilter for numeric comparison\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Using NumberFilter for numeric comparison\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -18,40 +17,49 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n \n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n+    def extract_duration(self, duration_str):\n+        \"\"\"\n+        Helper method to extract min and max duration from the duration string.\n+        Returns a tuple (min_duration, max_duration).\n+        \"\"\"\n+        numbers = re.findall(r'\\d+', duration_str)\n+        if len(numbers) == 1:\n+            return int(numbers[0]), int(numbers[0])  # If only one number, it's both min and max\n+        elif len(numbers) == 2:\n+            return int(numbers[0]), int(numbers[1])  # Min and max for ranges like \"5-10 Days\"\n+        return None, None  # If no valid number found\n \n-    def filter_by_packages(self, queryset, name, value):\n+    def filter_by_duration_gte(self, queryset, name, value):\n+        \"\"\"\n+        Filter by minimum duration (greater than or equal to the given value).\n+        \"\"\"\n         if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n+            try:\n+                gte_value = int(value)\n+                # Filter destinations where min duration is greater than or equal to gte_value\n+                return queryset.filter(\n+                    Q(duration__iregex=r'^\\d+')  # Match any duration starting with a number\n+                ).filter(\n+                    Q(duration__iregex=r'^(\\d+)-(\\d+)', value__gte=gte_value)  # Range comparison\n+                )\n+            except ValueError:\n+                pass  # If value is not an integer\n         return queryset\n\\ No newline at end of file\n \n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n-\n-    def filter_by_duration_gte(self, queryset, name, value):\n-        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__gte=value)\n-        return queryset\n-\n     def filter_by_duration_lte(self, queryset, name, value):\n-        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__lte=value)\n-        return queryset\n-\n-    def extract_duration(self, obj):\n         \"\"\"\n-        Extracts numeric value from duration string.\n+        Filter by maximum duration (less than or equal to the given value).\n         \"\"\"\n-        duration = obj.duration\n-        if '-' in duration:\n-            start, end = map(int, duration.split('-'))\n-            return (start + end) / 2  # Average duration\n-        else:\n-            return int(duration)\n+        if value:\n+            try:\n+                lte_value = int(value)\n+                # Filter destinations where max duration is less than or equal to lte_value\n+                return queryset.filter(\n+                    Q(duration__iregex=r'^\\d+')  # Match any duration starting with a number\n+                ).filter(\n+                    Q(duration__iregex=r'^(\\d+)-(\\d+)', value__lte=lte_value)  # Range comparison\n+                )\n+            except ValueError:\n+                pass  # If value is not an integer\n+        return queryset\n"
                },
                {
                    "date": 1725947501733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import django_filters\n import re\n-from django.db.models import Q\n from ..models import Destination\n \n+\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Using NumberFilter for numeric comparison\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Using NumberFilter for numeric comparison\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -17,49 +17,40 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n \n-    def extract_duration(self, duration_str):\n-        \"\"\"\n-        Helper method to extract min and max duration from the duration string.\n-        Returns a tuple (min_duration, max_duration).\n-        \"\"\"\n-        numbers = re.findall(r'\\d+', duration_str)\n-        if len(numbers) == 1:\n-            return int(numbers[0]), int(numbers[0])  # If only one number, it's both min and max\n-        elif len(numbers) == 2:\n-            return int(numbers[0]), int(numbers[1])  # Min and max for ranges like \"5-10 Days\"\n-        return None, None  # If no valid number found\n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n \n-    def filter_by_duration_gte(self, queryset, name, value):\n-        \"\"\"\n-        Filter by minimum duration (greater than or equal to the given value).\n-        \"\"\"\n+    def filter_by_packages(self, queryset, name, value):\n         if value:\n-            try:\n-                gte_value = int(value)\n-                # Filter destinations where min duration is greater than or equal to gte_value\n-                return queryset.filter(\n-                    Q(duration__iregex=r'^\\d+')  # Match any duration starting with a number\n-                ).filter(\n-                    Q(duration__iregex=r'^(\\d+)-(\\d+)', value__gte=gte_value)  # Range comparison\n-                )\n-            except ValueError:\n-                pass  # If value is not an integer\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n         return queryset\n \n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n+    def filter_by_duration_gte(self, queryset, name, value):\n+        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__gte=value)\n\\ No newline at end of file\n+        return queryset\n+\n     def filter_by_duration_lte(self, queryset, name, value):\n+        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__lte=value)\n+        return queryset\n+\n+    def extract_duration(self, obj):\n         \"\"\"\n-        Filter by maximum duration (less than or equal to the given value).\n+        Extracts numeric value from duration string.\n         \"\"\"\n-        if value:\n-            try:\n-                lte_value = int(value)\n-                # Filter destinations where max duration is less than or equal to lte_value\n-                return queryset.filter(\n-                    Q(duration__iregex=r'^\\d+')  # Match any duration starting with a number\n-                ).filter(\n-                    Q(duration__iregex=r'^(\\d+)-(\\d+)', value__lte=lte_value)  # Range comparison\n-                )\n-            except ValueError:\n-                pass  # If value is not an integer\n-        return queryset\n+        duration = obj.duration\n+        if '-' in duration:\n+            start, end = map(int, duration.split('-'))\n+            return (start + end) / 2  # Average duration\n+        else:\n+            return int(duration)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725947507405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import django_filters\n import re\n from ..models import Destination\n \n-\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')\n+    duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n+    duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n+    print(duration_gte)\n+    print(duration_lte)\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -36,21 +37,28 @@\n             queryset = queryset.filter(activities__id__in=activities).distinct()\n         return queryset\n \n     def filter_by_duration_gte(self, queryset, name, value):\n-        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__gte=value)\n+        \"\"\"\n+        Custom filter to handle gte (greater than or equal) duration filtering.\n+        Extracts numeric value and filters by minimum duration.\n+        \"\"\"\n+        if value:\n+            try:\n+                gte_value = int(value)\n+                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(gte_value))\n+            except ValueError:\n+                pass  \n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n-        queryset = queryset.annotate(duration_avg=Avg(Extract(F('duration'), r'(\\d+)'))).filter(duration_avg__lte=value)\n-        return queryset\n-\n\\ No newline at end of file\n-    def extract_duration(self, obj):\n         \"\"\"\n-        Extracts numeric value from duration string.\n+        Custom filter to handle lte (less than or equal) duration filtering.\n+        Extracts numeric value and filters by maximum duration.\n         \"\"\"\n-        duration = obj.duration\n-        if '-' in duration:\n-            start, end = map(int, duration.split('-'))\n-            return (start + end) / 2  # Average duration\n-        else:\n-            return int(duration)\n+        if value:\n+            try:\n+                lte_value = int(value)\n+                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(lte_value))\n+            except ValueError:\n+                pass  # If value is not an integer, ignore this filter\n+        return queryset\n"
                },
                {
                    "date": 1725947628670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n-    print(duration_gte)\n+    print(\"duration_gte)\n     print(duration_lte)\n \n     class Meta:\n         model = Destination\n"
                },
                {
                    "date": 1725947635591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n-    print(\"duration_gte)\n-    print(duration_lte)\n+    print(\"****\"duration_gte)\n+    print(\"\"duration_lte)\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725947642067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n     duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n     print(\"****\"duration_gte)\n-    print(\"\"duration_lte)\n+    print(\"######\",duration_lte)\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725947738583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,12 +5,10 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.CharFilter(method='filter_by_duration_gte')  \n-    duration_lte = django_filters.CharFilter(method='filter_by_duration_lte')\n-    print(\"****\"duration_gte)\n-    print(\"######\",duration_lte)\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -36,29 +34,43 @@\n             activities = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(activities__id__in=activities).distinct()\n         return queryset\n \n+    def extract_min_max_duration(self, duration_str):\n+        \"\"\"\n+        Extracts the minimum and maximum duration from the duration string.\n+        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n+        \"\"\"\n+        numbers = re.findall(r'\\d+', duration_str)\n+        if len(numbers) == 1:\n+            return int(numbers[0]), int(numbers[0])\n+        elif len(numbers) == 2:\n+            return int(numbers[0]), int(numbers[1])\n+        return None, None\n+\n     def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n         Custom filter to handle gte (greater than or equal) duration filtering.\n         Extracts numeric value and filters by minimum duration.\n         \"\"\"\n-        if value:\n-            try:\n-                gte_value = int(value)\n-                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(gte_value))\n-            except ValueError:\n-                pass  \n+        if value is not None:\n+            filtered_qs = []\n+            for obj in queryset:\n+                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+                if min_duration is not None and min_duration >= value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+            return queryset.filter(id__in=filtered_qs)\n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n         Custom filter to handle lte (less than or equal) duration filtering.\n         Extracts numeric value and filters by maximum duration.\n         \"\"\"\n-        if value:\n-            try:\n-                lte_value = int(value)\n-                queryset = queryset.filter(duration__iregex=r'\\b{}\\b'.format(lte_value))\n-            except ValueError:\n-                pass  # If value is not an integer, ignore this filter\n+        if value is not None:\n+            filtered_qs = []\n+            for obj in queryset:\n+                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+                if max_duration is not None and max_duration <= value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+            return queryset.filter(id__in=filtered_qs)\n         return queryset\n"
                },
                {
                    "date": 1725947763006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n     duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n+    print()\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725947770705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,10 @@\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n     duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n-    print()\n+    print(duration_gte)\n+    print(duration_gte)\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1725948195242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n import django_filters\n import re\n+from django.db.models import Q\n from ..models import Destination\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n-    print(duration_gte)\n-    print(duration_gte)\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Using NumberFilter for gte\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Using NumberFilter for lte\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -18,26 +17,8 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n \n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n-    def filter_by_packages(self, queryset, name, value):\n-        if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n-        return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n-\n     def extract_min_max_duration(self, duration_str):\n         \"\"\"\n         Extracts the minimum and maximum duration from the duration string.\n         Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n@@ -50,29 +31,64 @@\n         return None, None\n \n     def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n-        Custom filter to handle gte (greater than or equal) duration filtering.\n-        Extracts numeric value and filters by minimum duration.\n+        Filter by minimum duration (greater than or equal to the given value).\n         \"\"\"\n         if value is not None:\n             filtered_qs = []\n             for obj in queryset:\n                 min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and min_duration >= value:\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+                if min_duration is not None and max_duration is not None:\n+                    # Check if the max duration is greater than or equal to the gte_value\n+                    if max_duration >= value:\n+                        filtered_qs.append(obj.id)  # Collect matching object IDs\n             return queryset.filter(id__in=filtered_qs)\n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n-        Custom filter to handle lte (less than or equal) duration filtering.\n-        Extracts numeric value and filters by maximum duration.\n+        Filter by maximum duration (less than or equal to the given value).\n         \"\"\"\n         if value is not None:\n             filtered_qs = []\n             for obj in queryset:\n                 min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if max_duration is not None and max_duration <= value:\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+                if min_duration is not None and max_duration is not None:\n+                    # Check if the min duration is less than or equal to the lte_value\n+                    if min_duration <= value:\n+                        filtered_qs.append(obj.id)  # Collect matching object IDs\n             return queryset.filter(id__in=filtered_qs)\n         return queryset\n+\n+    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+        \"\"\"\n+        Filter by both gte and lte values, ensuring that the range in the filter\n+        overlaps with the range in the duration field.\n+        \"\"\"\n+        filtered_qs = []\n+        for obj in queryset:\n+            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+            if min_duration is not None and max_duration is not None:\n+                # Check if the range overlaps\n+                if max_duration >= gte_value and min_duration <= lte_value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+        return queryset.filter(id__in=filtered_qs)\n+\n+    def filter_queryset(self, queryset):\n+        \"\"\"\n+        Override the filter_queryset method to apply both gte and lte filters together.\n+        \"\"\"\n+        queryset = super().filter_queryset(queryset)\n+\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n+        return queryset\n"
                },
                {
                    "date": 1725948360082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,17 +61,17 @@\n         return queryset\n \n     def filter_by_duration_range(self, queryset, gte_value, lte_value):\n         \"\"\"\n-        Filter by both gte and lte values, ensuring that the range in the filter\n-        overlaps with the range in the duration field.\n+        Filter by both gte and lte values, ensuring that both the min and max duration \n+        fall within the specified range (no exceeding the upper bound).\n         \"\"\"\n         filtered_qs = []\n         for obj in queryset:\n             min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n             if min_duration is not None and max_duration is not None:\n-                # Check if the range overlaps\n-                if max_duration >= gte_value and min_duration <= lte_value:\n+                # Only include destinations where both the min and max are within the bounds\n+                if min_duration >= gte_value and max_duration <= lte_value:\n                     filtered_qs.append(obj.id)  # Collect matching object IDs\n         return queryset.filter(id__in=filtered_qs)\n \n     def filter_queryset(self, queryset):\n"
                },
                {
                    "date": 1725948584114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,49 +29,19 @@\n         elif len(numbers) == 2:\n             return int(numbers[0]), int(numbers[1])\n         return None, None\n \n-    def filter_by_duration_gte(self, queryset, name, value):\n-        \"\"\"\n-        Filter by minimum duration (greater than or equal to the given value).\n-        \"\"\"\n-        if value is not None:\n-            filtered_qs = []\n-            for obj in queryset:\n-                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and max_duration is not None:\n-                    # Check if the max duration is greater than or equal to the gte_value\n-                    if max_duration >= value:\n-                        filtered_qs.append(obj.id)  # Collect matching object IDs\n-            return queryset.filter(id__in=filtered_qs)\n-        return queryset\n-\n-    def filter_by_duration_lte(self, queryset, name, value):\n-        \"\"\"\n-        Filter by maximum duration (less than or equal to the given value).\n-        \"\"\"\n-        if value is not None:\n-            filtered_qs = []\n-            for obj in queryset:\n-                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and max_duration is not None:\n-                    # Check if the min duration is less than or equal to the lte_value\n-                    if min_duration <= value:\n-                        filtered_qs.append(obj.id)  # Collect matching object IDs\n-            return queryset.filter(id__in=filtered_qs)\n-        return queryset\n-\n     def filter_by_duration_range(self, queryset, gte_value, lte_value):\n         \"\"\"\n-        Filter by both gte and lte values, ensuring that both the min and max duration \n-        fall within the specified range (no exceeding the upper bound).\n+        Filter by both gte and lte values, ensuring that the duration falls within the specified range.\n+        We allow any overlap within the range.\n         \"\"\"\n         filtered_qs = []\n         for obj in queryset:\n             min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n             if min_duration is not None and max_duration is not None:\n-                # Only include destinations where both the min and max are within the bounds\n-                if min_duration >= gte_value and max_duration <= lte_value:\n+                # Allow any overlap: min_duration <= lte_value and max_duration >= gte_value\n+                if max_duration >= gte_value and min_duration <= lte_value:\n                     filtered_qs.append(obj.id)  # Collect matching object IDs\n         return queryset.filter(id__in=filtered_qs)\n \n     def filter_queryset(self, queryset):\n"
                },
                {
                    "date": 1725948605302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,19 +29,49 @@\n         elif len(numbers) == 2:\n             return int(numbers[0]), int(numbers[1])\n         return None, None\n \n+    def filter_by_duration_gte(self, queryset, name, value):\n+        \"\"\"\n+        Filter by minimum duration (greater than or equal to the given value).\n+        \"\"\"\n+        if value is not None:\n+            filtered_qs = []\n+            for obj in queryset:\n+                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+                if min_duration is not None and max_duration is not None:\n+                    # Check if the max duration is greater than or equal to the gte_value\n+                    if max_duration >= value:\n+                        filtered_qs.append(obj.id)  # Collect matching object IDs\n+            return queryset.filter(id__in=filtered_qs)\n+        return queryset\n+\n+    def filter_by_duration_lte(self, queryset, name, value):\n+        \"\"\"\n+        Filter by maximum duration (less than or equal to the given value).\n+        \"\"\"\n+        if value is not None:\n+            filtered_qs = []\n+            for obj in queryset:\n+                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+                if min_duration is not None and max_duration is not None:\n+                    # Check if the min duration is less than or equal to the lte_value\n+                    if min_duration <= value:\n+                        filtered_qs.append(obj.id)  # Collect matching object IDs\n+            return queryset.filter(id__in=filtered_qs)\n+        return queryset\n+\n     def filter_by_duration_range(self, queryset, gte_value, lte_value):\n         \"\"\"\n-        Filter by both gte and lte values, ensuring that the duration falls within the specified range.\n-        We allow any overlap within the range.\n+        Filter by both gte and lte values, ensuring that both the min and max duration \n+        fall within the specified range (no exceeding the upper bound).\n         \"\"\"\n         filtered_qs = []\n         for obj in queryset:\n             min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n             if min_duration is not None and max_duration is not None:\n-                # Allow any overlap: min_duration <= lte_value and max_duration >= gte_value\n-                if max_duration >= gte_value and min_duration <= lte_value:\n+                # Only include destinations where both the min and max are within the bounds\n+                if min_duration >= gte_value and max_duration <= lte_value:\n                     filtered_qs.append(obj.id)  # Collect matching object IDs\n         return queryset.filter(id__in=filtered_qs)\n \n     def filter_queryset(self, queryset):\n"
                },
                {
                    "date": 1725948639108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,49 +29,19 @@\n         elif len(numbers) == 2:\n             return int(numbers[0]), int(numbers[1])\n         return None, None\n \n-    def filter_by_duration_gte(self, queryset, name, value):\n-        \"\"\"\n-        Filter by minimum duration (greater than or equal to the given value).\n-        \"\"\"\n-        if value is not None:\n-            filtered_qs = []\n-            for obj in queryset:\n-                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and max_duration is not None:\n-                    # Check if the max duration is greater than or equal to the gte_value\n-                    if max_duration >= value:\n-                        filtered_qs.append(obj.id)  # Collect matching object IDs\n-            return queryset.filter(id__in=filtered_qs)\n-        return queryset\n-\n-    def filter_by_duration_lte(self, queryset, name, value):\n-        \"\"\"\n-        Filter by maximum duration (less than or equal to the given value).\n-        \"\"\"\n-        if value is not None:\n-            filtered_qs = []\n-            for obj in queryset:\n-                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and max_duration is not None:\n-                    # Check if the min duration is less than or equal to the lte_value\n-                    if min_duration <= value:\n-                        filtered_qs.append(obj.id)  # Collect matching object IDs\n-            return queryset.filter(id__in=filtered_qs)\n-        return queryset\n-\n     def filter_by_duration_range(self, queryset, gte_value, lte_value):\n         \"\"\"\n-        Filter by both gte and lte values, ensuring that both the min and max duration \n-        fall within the specified range (no exceeding the upper bound).\n+        Filter by both gte and lte values, ensuring that the duration falls within the specified range.\n+        We allow any overlap within the range.\n         \"\"\"\n         filtered_qs = []\n         for obj in queryset:\n             min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n             if min_duration is not None and max_duration is not None:\n-                # Only include destinations where both the min and max are within the bounds\n-                if min_duration >= gte_value and max_duration <= lte_value:\n+                # Allow any overlap: min_duration <= lte_value and max_duration >= gte_value\n+                if max_duration >= gte_value and min_duration <= lte_value:\n                     filtered_qs.append(obj.id)  # Collect matching object IDs\n         return queryset.filter(id__in=filtered_qs)\n \n     def filter_queryset(self, queryset):\n@@ -90,5 +60,5 @@\n                 return self.filter_by_duration_range(queryset, gte_value, lte_value)\n             except ValueError:\n                 pass  # Ignore invalid values and don't filter\n \n-        return queryset\n+        return queryset\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725948667331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import django_filters\n import re\n-from django.db.models import Q\n from ..models import Destination\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Using NumberFilter for gte\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Using NumberFilter for lte\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n+    print(duration_gte)\n+    print(duration_te)\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -17,8 +18,26 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n \n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n     def extract_min_max_duration(self, duration_str):\n         \"\"\"\n         Extracts the minimum and maximum duration from the duration string.\n         Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n@@ -29,36 +48,31 @@\n         elif len(numbers) == 2:\n             return int(numbers[0]), int(numbers[1])\n         return None, None\n \n-    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+    def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n-        Filter by both gte and lte values, ensuring that the duration falls within the specified range.\n-        We allow any overlap within the range.\n+        Custom filter to handle gte (greater than or equal) duration filtering.\n+        Extracts numeric value and filters by minimum duration.\n         \"\"\"\n-        filtered_qs = []\n-        for obj in queryset:\n-            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-            if min_duration is not None and max_duration is not None:\n-                # Allow any overlap: min_duration <= lte_value and max_duration >= gte_value\n-                if max_duration >= gte_value and min_duration <= lte_value:\n+        if value is not None:\n+            filtered_qs = []\n+            for obj in queryset:\n+                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+                if min_duration is not None and min_duration >= value:\n                     filtered_qs.append(obj.id)  # Collect matching object IDs\n-        return queryset.filter(id__in=filtered_qs)\n+            return queryset.filter(id__in=filtered_qs)\n+        return queryset\n \n-    def filter_queryset(self, queryset):\n+    def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n-        Override the filter_queryset method to apply both gte and lte filters together.\n+        Custom filter to handle lte (less than or equal) duration filtering.\n+        Extracts numeric value and filters by maximum duration.\n         \"\"\"\n-        queryset = super().filter_queryset(queryset)\n\\ No newline at end of file\n-\n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n-\n-        if duration_gte and duration_lte:\n-            try:\n-                gte_value = int(duration_gte)\n-                lte_value = int(duration_lte)\n-                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n-            except ValueError:\n-                pass  # Ignore invalid values and don't filter\n-\n-        return queryset\n+        if value is not None:\n+            filtered_qs = []\n+            for obj in queryset:\n+                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+                if max_duration is not None and max_duration <= value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+            return queryset.filter(id__in=filtered_qs)\n+        return queryset\n"
                },
                {
                    "date": 1725948673467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,15 @@\n import django_filters\n import re\n+from django.db.models import Q\n from ..models import Destination\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n-    print(duration_gte)\n-    print(duration_te)\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Using NumberFilter for gte\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Using NumberFilter for lte\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -18,26 +17,8 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n \n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n-    def filter_by_packages(self, queryset, name, value):\n-        if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n-        return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n-\n     def extract_min_max_duration(self, duration_str):\n         \"\"\"\n         Extracts the minimum and maximum duration from the duration string.\n         Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n@@ -50,29 +31,64 @@\n         return None, None\n \n     def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n-        Custom filter to handle gte (greater than or equal) duration filtering.\n-        Extracts numeric value and filters by minimum duration.\n+        Filter by minimum duration (greater than or equal to the given value).\n         \"\"\"\n         if value is not None:\n             filtered_qs = []\n             for obj in queryset:\n                 min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and min_duration >= value:\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+                if min_duration is not None and max_duration is not None:\n+                    # Check if the max duration is greater than or equal to the gte_value\n+                    if max_duration >= value:\n+                        filtered_qs.append(obj.id)  # Collect matching object IDs\n             return queryset.filter(id__in=filtered_qs)\n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n-        Custom filter to handle lte (less than or equal) duration filtering.\n-        Extracts numeric value and filters by maximum duration.\n+        Filter by maximum duration (less than or equal to the given value).\n         \"\"\"\n         if value is not None:\n             filtered_qs = []\n             for obj in queryset:\n                 min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if max_duration is not None and max_duration <= value:\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+                if min_duration is not None and max_duration is not None:\n+                    # Check if the min duration is less than or equal to the lte_value\n+                    if min_duration <= value:\n+                        filtered_qs.append(obj.id)  # Collect matching object IDs\n             return queryset.filter(id__in=filtered_qs)\n         return queryset\n+\n+    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+        \"\"\"\n+        Filter by both gte and lte values, ensuring that the range in the filter\n+        overlaps with the range in the duration field.\n+        \"\"\"\n+        filtered_qs = []\n+        for obj in queryset:\n+            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+            if min_duration is not None and max_duration is not None:\n+                # Check if the range overlaps\n+                if max_duration >= gte_value and min_duration <= lte_value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+        return queryset.filter(id__in=filtered_qs)\n+\n+    def filter_queryset(self, queryset):\n+        \"\"\"\n+        Override the filter_queryset method to apply both gte and lte filters together.\n+        \"\"\"\n+        queryset = super().filter_queryset(queryset)\n+\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n+        return queryset\n"
                },
                {
                    "date": 1725948682904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,16 @@\n import django_filters\n import re\n-from django.db.models import Q\n from ..models import Destination\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Using NumberFilter for gte\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Using NumberFilter for lte\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n+    print(duration_gte)\n+    print(duration_gte)\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -17,8 +18,26 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n \n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n     def extract_min_max_duration(self, duration_str):\n         \"\"\"\n         Extracts the minimum and maximum duration from the duration string.\n         Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n@@ -31,64 +50,29 @@\n         return None, None\n \n     def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n-        Filter by minimum duration (greater than or equal to the given value).\n+        Custom filter to handle gte (greater than or equal) duration filtering.\n+        Extracts numeric value and filters by minimum duration.\n         \"\"\"\n         if value is not None:\n             filtered_qs = []\n             for obj in queryset:\n                 min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and max_duration is not None:\n-                    # Check if the max duration is greater than or equal to the gte_value\n-                    if max_duration >= value:\n-                        filtered_qs.append(obj.id)  # Collect matching object IDs\n+                if min_duration is not None and min_duration >= value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n             return queryset.filter(id__in=filtered_qs)\n         return queryset\n \n     def filter_by_duration_lte(self, queryset, name, value):\n         \"\"\"\n-        Filter by maximum duration (less than or equal to the given value).\n+        Custom filter to handle lte (less than or equal) duration filtering.\n+        Extracts numeric value and filters by maximum duration.\n         \"\"\"\n         if value is not None:\n             filtered_qs = []\n             for obj in queryset:\n                 min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and max_duration is not None:\n-                    # Check if the min duration is less than or equal to the lte_value\n-                    if min_duration <= value:\n-                        filtered_qs.append(obj.id)  # Collect matching object IDs\n+                if max_duration is not None and max_duration <= value:\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n             return queryset.filter(id__in=filtered_qs)\n         return queryset\n-\n-    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n-        \"\"\"\n-        Filter by both gte and lte values, ensuring that the range in the filter\n-        overlaps with the range in the duration field.\n-        \"\"\"\n-        filtered_qs = []\n-        for obj in queryset:\n-            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-            if min_duration is not None and max_duration is not None:\n-                # Check if the range overlaps\n-                if max_duration >= gte_value and min_duration <= lte_value:\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n-        return queryset.filter(id__in=filtered_qs)\n-\n-    def filter_queryset(self, queryset):\n-        \"\"\"\n-        Override the filter_queryset method to apply both gte and lte filters together.\n-        \"\"\"\n-        queryset = super().filter_queryset(queryset)\n-\n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n-\n-        if duration_gte and duration_lte:\n-            try:\n-                gte_value = int(duration_gte)\n-                lte_value = int(duration_lte)\n-                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n-            except ValueError:\n-                pass  # Ignore invalid values and don't filter\n-\n-        return queryset\n"
                },
                {
                    "date": 1725948855333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,31 +48,36 @@\n         elif len(numbers) == 2:\n             return int(numbers[0]), int(numbers[1])\n         return None, None\n \n-    def filter_by_duration_gte(self, queryset, name, value):\n+    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n         \"\"\"\n-        Custom filter to handle gte (greater than or equal) duration filtering.\n-        Extracts numeric value and filters by minimum duration.\n+        Filter destinations by ensuring their durations overlap the filter range.\n+        We check that the destination's duration (min-max) either starts within or extends beyond the range.\n         \"\"\"\n-        if value is not None:\n-            filtered_qs = []\n-            for obj in queryset:\n-                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if min_duration is not None and min_duration >= value:\n+        filtered_qs = []\n+        for obj in queryset:\n+            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+            if min_duration is not None and max_duration is not None:\n+                # Include if the range overlaps with the filter\n+                if (min_duration <= lte_value and max_duration >= gte_value):\n                     filtered_qs.append(obj.id)  # Collect matching object IDs\n-            return queryset.filter(id__in=filtered_qs)\n-        return queryset\n+        return queryset.filter(id__in=filtered_qs)\n \n-    def filter_by_duration_lte(self, queryset, name, value):\n+    def filter_queryset(self, queryset):\n         \"\"\"\n-        Custom filter to handle lte (less than or equal) duration filtering.\n-        Extracts numeric value and filters by maximum duration.\n+        Override the filter_queryset method to apply both gte and lte filters together.\n         \"\"\"\n-        if value is not None:\n-            filtered_qs = []\n-            for obj in queryset:\n-                min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-                if max_duration is not None and max_duration <= value:\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n-            return queryset.filter(id__in=filtered_qs)\n+        queryset = super().filter_queryset(queryset)\n+\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n         return queryset\n"
                },
                {
                    "date": 1725948910628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n+     duration_gte = django_filters.NumberFilter()  # Remove method binding\n+    duration_lte = django_filters.NumberFilter() # Change to NumberFilter\n     print(duration_gte)\n     print(duration_gte)\n \n     class Meta:\n"
                },
                {
                    "date": 1725948920176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-     duration_gte = django_filters.NumberFilter()  # Remove method binding\n-    duration_lte = django_filters.NumberFilter() # Change to NumberFilter\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n     print(duration_gte)\n     print(duration_gte)\n \n     class Meta:\n"
                },
                {
                    "date": 1725948944451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_range')  # Change to NumberFilter\n     duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n     print(duration_gte)\n     print(duration_gte)\n \n"
                },
                {
                    "date": 1725949139582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_range')  # Change to NumberFilter\n+    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n     duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n     print(duration_gte)\n     print(duration_gte)\n \n"
                },
                {
                    "date": 1725949206005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,21 @@\n-import django_filters\n-import re\n-from ..models import Destination\n-\n-class DestinationFilter(django_filters.FilterSet):\n-    activities = django_filters.CharFilter(method='filter_by_activities')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n-    packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(method='filter_by_duration_gte')  # Change to NumberFilter\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n-    print(duration_gte)\n-    print(duration_gte)\n-\n-    class Meta:\n-        model = Destination\n-        fields = {\n-            'destination_title': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n-            'created_date': ['exact', 'gte', 'lte'],\n-        }\n-\n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n-    def filter_by_packages(self, queryset, name, value):\n-        if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n-        return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n-\n-    def extract_min_max_duration(self, duration_str):\n-        \"\"\"\n-        Extracts the minimum and maximum duration from the duration string.\n-        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n-        \"\"\"\n-        numbers = re.findall(r'\\d+', duration_str)\n-        if len(numbers) == 1:\n-            return int(numbers[0]), int(numbers[0])\n-        elif len(numbers) == 2:\n-            return int(numbers[0]), int(numbers[1])\n-        return None, None\n-\n-    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n-        \"\"\"\n-        Filter destinations by ensuring their durations overlap the filter range.\n-        We check that the destination's duration (min-max) either starts within or extends beyond the range.\n-        \"\"\"\n-        filtered_qs = []\n-        for obj in queryset:\n-            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-            if min_duration is not None and max_duration is not None:\n-                # Include if the range overlaps with the filter\n-                if (min_duration <= lte_value and max_duration >= gte_value):\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n-        return queryset.filter(id__in=filtered_qs)\n-\n-    def filter_queryset(self, queryset):\n-        \"\"\"\n-        Override the filter_queryset method to apply both gte and lte filters together.\n-        \"\"\"\n-        queryset = super().filter_queryset(queryset)\n-\n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n-\n-        if duration_gte and duration_lte:\n-            try:\n-                gte_value = int(duration_gte)\n-                lte_value = int(duration_lte)\n-                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n-            except ValueError:\n-                pass  # Ignore invalid values and don't filter\n-\n-        return queryset\n+AssertionError at /api/destination/\n+Expected parent FilterSet 'destination.utilities.destination_filter.DestinationFilter' to have a '.filter_by_duration_gte()' method.\n+Request Method:\tGET\n+Request URL:\thttp://127.0.0.1:8000/api/destination/?destination_title=&destination_title__icontains=&nature_of_trip=&nature_of_trip__icontains=&created_date=&created_date__gte=&created_date__lte=&activities=&collections=&packages=&duration_gte=25&duration_lte=31\n+Django Version:\t4.2.6\n+Exception Type:\tAssertionError\n+Exception Value:\t\n+Expected parent FilterSet 'destination.utilities.destination_filter.DestinationFilter' to have a '.filter_by_duration_gte()' method.\n+Exception Location:\t/Users/vrit-prashant/Documents/everts-thrill/venv/lib/python3.12/site-packages/django_filters/filters.py, line 831, in method\n+Raised during:\tdestination.viewsets.destination_viewsets.DestinationViewsets\n+Python Executable:\t/Users/vrit-prashant/Documents/everts-thrill/venv/bin/python\n+Python Version:\t3.12.5\n+Python Path:\t\n+['/Users/vrit-prashant/Documents/everts-thrill',\n+ '/opt/homebrew/Cellar/python@3.12/3.12.5/Frameworks/Python.framework/Versions/3.12/lib/python312.zip',\n+ '/opt/homebrew/Cellar/python@3.12/3.12.5/Frameworks/Python.framework/Versions/3.12/lib/python3.12',\n+ '/opt/homebrew/Cellar/python@3.12/3.12.5/Frameworks/Python.framework/Versions/3.12/lib/python3.12/lib-dynload',\n+ '/Users/vrit-prashant/Documents/everts-thrill/venv/lib/python3.12/site-packages',\n+ '/opt/homebrew/opt/python-tk@3.12/libexec',\n+ '/Users/vrit-prashant/Documents/everts-thrill/venv/lib/python3.12/site-packages/setuptools/_vendor']\n+Server time:\tTue, 10 Sep 2024 06:19:54 +0000\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725949248840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,83 @@\n-AssertionError at /api/destination/\n-Expected parent FilterSet 'destination.utilities.destination_filter.DestinationFilter' to have a '.filter_by_duration_gte()' method.\n-Request Method:\tGET\n-Request URL:\thttp://127.0.0.1:8000/api/destination/?destination_title=&destination_title__icontains=&nature_of_trip=&nature_of_trip__icontains=&created_date=&created_date__gte=&created_date__lte=&activities=&collections=&packages=&duration_gte=25&duration_lte=31\n-Django Version:\t4.2.6\n-Exception Type:\tAssertionError\n-Exception Value:\t\n-Expected parent FilterSet 'destination.utilities.destination_filter.DestinationFilter' to have a '.filter_by_duration_gte()' method.\n-Exception Location:\t/Users/vrit-prashant/Documents/everts-thrill/venv/lib/python3.12/site-packages/django_filters/filters.py, line 831, in method\n-Raised during:\tdestination.viewsets.destination_viewsets.DestinationViewsets\n-Python Executable:\t/Users/vrit-prashant/Documents/everts-thrill/venv/bin/python\n-Python Version:\t3.12.5\n-Python Path:\t\n-['/Users/vrit-prashant/Documents/everts-thrill',\n- '/opt/homebrew/Cellar/python@3.12/3.12.5/Frameworks/Python.framework/Versions/3.12/lib/python312.zip',\n- '/opt/homebrew/Cellar/python@3.12/3.12.5/Frameworks/Python.framework/Versions/3.12/lib/python3.12',\n- '/opt/homebrew/Cellar/python@3.12/3.12.5/Frameworks/Python.framework/Versions/3.12/lib/python3.12/lib-dynload',\n- '/Users/vrit-prashant/Documents/everts-thrill/venv/lib/python3.12/site-packages',\n- '/opt/homebrew/opt/python-tk@3.12/libexec',\n- '/Users/vrit-prashant/Documents/everts-thrill/venv/lib/python3.12/site-packages/setuptools/_vendor']\n-Server time:\tTue, 10 Sep 2024 06:19:54 +0000\n\\ No newline at end of file\n+import django_filters\n+import re\n+from ..models import Destination\n+\n+class DestinationFilter(django_filters.FilterSet):\n+    activities = django_filters.CharFilter(method='filter_by_activities')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_packages')\n+    duration_gte = django_filters.NumberFilter  # Change to NumberFilter\n+    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n+    print(duration_gte)\n+    print(duration_gte)\n+\n+    class Meta:\n+        model = Destination\n+        fields = {\n+            'destination_title': ['exact', 'icontains'],\n+            'nature_of_trip': ['exact', 'icontains'],\n+            'created_date': ['exact', 'gte', 'lte'],\n+        }\n+\n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n+    def extract_min_max_duration(self, duration_str):\n+        \"\"\"\n+        Extracts the minimum and maximum duration from the duration string.\n+        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n+        \"\"\"\n+        numbers = re.findall(r'\\d+', duration_str)\n+        if len(numbers) == 1:\n+            return int(numbers[0]), int(numbers[0])\n+        elif len(numbers) == 2:\n+            return int(numbers[0]), int(numbers[1])\n+        return None, None\n+\n+    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+        \"\"\"\n+        Filter destinations by ensuring their durations overlap the filter range.\n+        We check that the destination's duration (min-max) either starts within or extends beyond the range.\n+        \"\"\"\n+        filtered_qs = []\n+        for obj in queryset:\n+            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+            if min_duration is not None and max_duration is not None:\n+                # Include if the range overlaps with the filter\n+                if (min_duration <= lte_value and max_duration >= gte_value):\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+        return queryset.filter(id__in=filtered_qs)\n+\n+    def filter_queryset(self, queryset):\n+        \"\"\"\n+        Override the filter_queryset method to apply both gte and lte filters together.\n+        \"\"\"\n+        queryset = super().filter_queryset(queryset)\n+\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n+        return queryset\n"
                },
                {
                    "date": 1725949257135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n     duration_gte = django_filters.NumberFilter  # Change to NumberFilter\n-    duration_lte = django_filters.NumberFilter(method='filter_by_duration_lte')  # Change to NumberFilter\n+    duration_lte = django_filters.NumberFilter\\\n     print(duration_gte)\n     print(duration_gte)\n \n     class Meta:\n"
                },
                {
                    "date": 1725949262539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter  # Change to NumberFilter\n-    duration_lte = django_filters.NumberFilter\\\n+    duration_gte = django_filters.NumberFilter\n+    duration_lte = django_filters.NumberFilter\n     print(duration_gte)\n     print(duration_gte)\n \n     class Meta:\n"
                },
                {
                    "date": 1725949273776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,83 @@\n-import django_filters\n-import re\n-from ..models import Destination\n+# import django_filters\n+# import re\n+# from ..models import Destination\n \n-class DestinationFilter(django_filters.FilterSet):\n-    activities = django_filters.CharFilter(method='filter_by_activities')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n-    packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter\n-    duration_lte = django_filters.NumberFilter\n-    print(duration_gte)\n-    print(duration_gte)\n+# class DestinationFilter(django_filters.FilterSet):\n+#     activities = django_filters.CharFilter(method='filter_by_activities')\n+#     collections = django_filters.CharFilter(method='filter_by_collections')\n+#     packages = django_filters.CharFilter(method='filter_by_packages')\n+#     duration_gte = django_filters.NumberFilter\n+#     duration_lte = django_filters.NumberFilter\n+#     print(duration_gte)\n+#     print(duration_gte)\n \n-    class Meta:\n-        model = Destination\n-        fields = {\n-            'destination_title': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n-            'created_date': ['exact', 'gte', 'lte'],\n-        }\n+#     class Meta:\n+#         model = Destination\n+#         fields = {\n+#             'destination_title': ['exact', 'icontains'],\n+#             'nature_of_trip': ['exact', 'icontains'],\n+#             'created_date': ['exact', 'gte', 'lte'],\n+#         }\n \n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n+#     def filter_by_collections(self, queryset, name, value):\n+#         if value:\n+#             collections = value.split(',') if ',' in value else [value]\n+#             queryset = queryset.filter(collections__id__in=collections)\n+#         return queryset\n \n-    def filter_by_packages(self, queryset, name, value):\n-        if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n-        return queryset\n+#     def filter_by_packages(self, queryset, name, value):\n+#         if value:\n+#             packages = value.split(',') if ',' in value else [value]\n+#             queryset = queryset.filter(packages__id__in=packages)\n+#         return queryset\n \n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n+#     def filter_by_activities(self, queryset, name, value):\n+#         if value:\n+#             activities = value.split(',') if ',' in value else [value]\n+#             queryset = queryset.filter(activities__id__in=activities).distinct()\n+#         return queryset\n \n-    def extract_min_max_duration(self, duration_str):\n-        \"\"\"\n-        Extracts the minimum and maximum duration from the duration string.\n-        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n-        \"\"\"\n-        numbers = re.findall(r'\\d+', duration_str)\n-        if len(numbers) == 1:\n-            return int(numbers[0]), int(numbers[0])\n-        elif len(numbers) == 2:\n-            return int(numbers[0]), int(numbers[1])\n-        return None, None\n+#     def extract_min_max_duration(self, duration_str):\n+#         \"\"\"\n+#         Extracts the minimum and maximum duration from the duration string.\n+#         Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n+#         \"\"\"\n+#         numbers = re.findall(r'\\d+', duration_str)\n+#         if len(numbers) == 1:\n+#             return int(numbers[0]), int(numbers[0])\n+#         elif len(numbers) == 2:\n+#             return int(numbers[0]), int(numbers[1])\n+#         return None, None\n \n-    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n-        \"\"\"\n-        Filter destinations by ensuring their durations overlap the filter range.\n-        We check that the destination's duration (min-max) either starts within or extends beyond the range.\n-        \"\"\"\n-        filtered_qs = []\n-        for obj in queryset:\n-            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-            if min_duration is not None and max_duration is not None:\n-                # Include if the range overlaps with the filter\n-                if (min_duration <= lte_value and max_duration >= gte_value):\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n-        return queryset.filter(id__in=filtered_qs)\n+#     def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+#         \"\"\"\n+#         Filter destinations by ensuring their durations overlap the filter range.\n+#         We check that the destination's duration (min-max) either starts within or extends beyond the range.\n+#         \"\"\"\n+#         filtered_qs = []\n+#         for obj in queryset:\n+#             min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+#             if min_duration is not None and max_duration is not None:\n+#                 # Include if the range overlaps with the filter\n+#                 if (min_duration <= lte_value and max_duration >= gte_value):\n+#                     filtered_qs.append(obj.id)  # Collect matching object IDs\n+#         return queryset.filter(id__in=filtered_qs)\n \n-    def filter_queryset(self, queryset):\n-        \"\"\"\n-        Override the filter_queryset method to apply both gte and lte filters together.\n-        \"\"\"\n-        queryset = super().filter_queryset(queryset)\n+#     def filter_queryset(self, queryset):\n+#         \"\"\"\n+#         Override the filter_queryset method to apply both gte and lte filters together.\n+#         \"\"\"\n+#         queryset = super().filter_queryset(queryset)\n \n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n+#         duration_gte = self.data.get('duration_gte')\n+#         duration_lte = self.data.get('duration_lte')\n \n-        if duration_gte and duration_lte:\n-            try:\n-                gte_value = int(duration_gte)\n-                lte_value = int(duration_lte)\n-                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n-            except ValueError:\n-                pass  # Ignore invalid values and don't filter\n+#         if duration_gte and duration_lte:\n+#             try:\n+#                 gte_value = int(duration_gte)\n+#                 lte_value = int(duration_lte)\n+#                 return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+#             except ValueError:\n+#                 pass  # Ignore invalid values and don't filter\n \n-        return queryset\n+#         return queryset\n"
                },
                {
                    "date": 1725949279115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,4 +80,87 @@\n #             except ValueError:\n #                 pass  # Ignore invalid values and don't filter\n \n #         return queryset\n+\n+import django_filters\n+import re\n+from django.db.models import Q\n+from ..models import Destination\n+\n+class DestinationFilter(django_filters.FilterSet):\n+    activities = django_filters.CharFilter(method='filter_by_activities')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_packages')\n+    duration_gte = django_filters.NumberFilter()  # Remove method argument\n+    duration_lte = django_filters.NumberFilter()  # Remove method argument\n+\n+    class Meta:\n+        model = Destination\n+        fields = {\n+            'destination_title': ['exact', 'icontains'],\n+            'nature_of_trip': ['exact', 'icontains'],\n+            'created_date': ['exact', 'gte', 'lte'],\n+        }\n+\n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n+    def extract_min_max_duration(self, duration_str):\n+        \"\"\"\n+        Extracts the minimum and maximum duration from the duration string.\n+        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n+        \"\"\"\n+        numbers = re.findall(r'\\d+', duration_str)\n+        if len(numbers) == 1:\n+            return int(numbers[0]), int(numbers[0])\n+        elif len(numbers) == 2:\n+            return int(numbers[0]), int(numbers[1])\n+        return None, None\n+\n+    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+        \"\"\"\n+        Filter destinations by ensuring their durations overlap the filter range.\n+        We check that the destination's duration (min-max) either starts within or extends beyond the range.\n+        \"\"\"\n+        filtered_qs = []\n+        for obj in queryset:\n+            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n+            if min_duration is not None and max_duration is not None:\n+                # Include if the range overlaps with the filter\n+                if (min_duration <= lte_value and max_duration >= gte_value):\n+                    filtered_qs.append(obj.id)  # Collect matching object IDs\n+        return queryset.filter(id__in=filtered_qs)\n+\n+    def filter_queryset(self, queryset):\n+        \"\"\"\n+        Override the filter_queryset method to apply both gte and lte filters together.\n+        \"\"\"\n+        queryset = super().filter_queryset(queryset)\n+\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n+        return queryset\n"
                },
                {
                    "date": 1725949358003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,8 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter()  # Remove method argument\n-    duration_lte = django_filters.NumberFilter()  # Remove method argument\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -151,10 +149,11 @@\n         Override the filter_queryset method to apply both gte and lte filters together.\n         \"\"\"\n         queryset = super().filter_queryset(queryset)\n \n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n+        # Manually handle duration_gte and duration_lte from query parameters\n+        duration_gte = self.request.GET.get('duration_gte')\n+        duration_lte = self.request.GET.get('duration_lte')\n \n         if duration_gte and duration_lte:\n             try:\n                 gte_value = int(duration_gte)\n"
                },
                {
                    "date": 1725950002485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,4 @@\n-# import django_filters\n-# import re\n-# from ..models import Destination\n-\n-# class DestinationFilter(django_filters.FilterSet):\n-#     activities = django_filters.CharFilter(method='filter_by_activities')\n-#     collections = django_filters.CharFilter(method='filter_by_collections')\n-#     packages = django_filters.CharFilter(method='filter_by_packages')\n-#     duration_gte = django_filters.NumberFilter\n-#     duration_lte = django_filters.NumberFilter\n-#     print(duration_gte)\n-#     print(duration_gte)\n-\n-#     class Meta:\n-#         model = Destination\n-#         fields = {\n-#             'destination_title': ['exact', 'icontains'],\n-#             'nature_of_trip': ['exact', 'icontains'],\n-#             'created_date': ['exact', 'gte', 'lte'],\n-#         }\n-\n-#     def filter_by_collections(self, queryset, name, value):\n-#         if value:\n-#             collections = value.split(',') if ',' in value else [value]\n-#             queryset = queryset.filter(collections__id__in=collections)\n-#         return queryset\n-\n-#     def filter_by_packages(self, queryset, name, value):\n-#         if value:\n-#             packages = value.split(',') if ',' in value else [value]\n-#             queryset = queryset.filter(packages__id__in=packages)\n-#         return queryset\n-\n-#     def filter_by_activities(self, queryset, name, value):\n-#         if value:\n-#             activities = value.split(',') if ',' in value else [value]\n-#             queryset = queryset.filter(activities__id__in=activities).distinct()\n-#         return queryset\n-\n-#     def extract_min_max_duration(self, duration_str):\n-#         \"\"\"\n-#         Extracts the minimum and maximum duration from the duration string.\n-#         Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n-#         \"\"\"\n-#         numbers = re.findall(r'\\d+', duration_str)\n-#         if len(numbers) == 1:\n-#             return int(numbers[0]), int(numbers[0])\n-#         elif len(numbers) == 2:\n-#             return int(numbers[0]), int(numbers[1])\n-#         return None, None\n-\n-#     def filter_by_duration_range(self, queryset, gte_value, lte_value):\n-#         \"\"\"\n-#         Filter destinations by ensuring their durations overlap the filter range.\n-#         We check that the destination's duration (min-max) either starts within or extends beyond the range.\n-#         \"\"\"\n-#         filtered_qs = []\n-#         for obj in queryset:\n-#             min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-#             if min_duration is not None and max_duration is not None:\n-#                 # Include if the range overlaps with the filter\n-#                 if (min_duration <= lte_value and max_duration >= gte_value):\n-#                     filtered_qs.append(obj.id)  # Collect matching object IDs\n-#         return queryset.filter(id__in=filtered_qs)\n-\n-#     def filter_queryset(self, queryset):\n-#         \"\"\"\n-#         Override the filter_queryset method to apply both gte and lte filters together.\n-#         \"\"\"\n-#         queryset = super().filter_queryset(queryset)\n-\n-#         duration_gte = self.data.get('duration_gte')\n-#         duration_lte = self.data.get('duration_lte')\n-\n-#         if duration_gte and duration_lte:\n-#             try:\n-#                 gte_value = int(duration_gte)\n-#                 lte_value = int(duration_lte)\n-#                 return self.filter_by_duration_range(queryset, gte_value, lte_value)\n-#             except ValueError:\n-#                 pass  # Ignore invalid values and don't filter\n-\n-#         return queryset\n-\n import django_filters\n import re\n from django.db.models import Q\n from ..models import Destination\n@@ -90,8 +6,10 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n+    duration_gte = django_filters.NumberFilter(label='Duration (Greater than or equal to)', method='filter_by_duration_gte')\n+    duration_lte = django_filters.NumberFilter(label='Duration (Less than or equal to)', method='filter_by_duration_lte')\n \n     class Meta:\n         model = Destination\n         fields = {\n@@ -129,37 +47,45 @@\n         elif len(numbers) == 2:\n             return int(numbers[0]), int(numbers[1])\n         return None, None\n \n-    def filter_by_duration_range(self, queryset, gte_value, lte_value):\n+    def filter_by_duration_gte(self, queryset, name, value):\n         \"\"\"\n-        Filter destinations by ensuring their durations overlap the filter range.\n-        We check that the destination's duration (min-max) either starts within or extends beyond the range.\n+        Custom method to handle gte (greater than or equal to) duration filtering.\n         \"\"\"\n-        filtered_qs = []\n-        for obj in queryset:\n-            min_duration, max_duration = self.extract_min_max_duration(obj.duration)\n-            if min_duration is not None and max_duration is not None:\n-                # Include if the range overlaps with the filter\n-                if (min_duration <= lte_value and max_duration >= gte_value):\n-                    filtered_qs.append(obj.id)  # Collect matching object IDs\n-        return queryset.filter(id__in=filtered_qs)\n+        if value is not None:\n+            return queryset.filter(id__in=[\n+                obj.id for obj in queryset\n+                if self.extract_min_max_duration(obj.duration)[1] >= value\n+            ])\n+        return queryset\n \n+    def filter_by_duration_lte(self, queryset, name, value):\n+        \"\"\"\n+        Custom method to handle lte (less than or equal to) duration filtering.\n+        \"\"\"\n+        if value is not None:\n+            return queryset.filter(id__in=[\n+                obj.id for obj in queryset\n+                if self.extract_min_max_duration(obj.duration)[0] <= value\n+            ])\n+        return queryset\n+\n     def filter_queryset(self, queryset):\n         \"\"\"\n-        Override the filter_queryset method to apply both gte and lte filters together.\n+        Override the filter_queryset method to handle both gte and lte filters together.\n         \"\"\"\n         queryset = super().filter_queryset(queryset)\n \n-        # Manually handle duration_gte and duration_lte from query parameters\n-        duration_gte = self.request.GET.get('duration_gte')\n-        duration_lte = self.request.GET.get('duration_lte')\n+        # Custom duration range handling\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n \n         if duration_gte and duration_lte:\n             try:\n                 gte_value = int(duration_gte)\n                 lte_value = int(duration_lte)\n-                return self.filter_by_duration_range(queryset, gte_value, lte_value)\n+                return self.filter_by_duration_gte(self.filter_by_duration_lte(queryset, None, lte_value), None, gte_value)\n             except ValueError:\n                 pass  # Ignore invalid values and don't filter\n \n         return queryset\n"
                },
                {
                    "date": 1725950177716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,4 +88,6 @@\n             except ValueError:\n                 pass  # Ignore invalid values and don't filter\n \n         return queryset\n+\n+\n"
                },
                {
                    "date": 1725950189482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,4 +90,44 @@\n \n         return queryset\n \n \n+import django_filters\n+from django_filters import rest_framework as filters\n+from ..models import Departure\n+from rest_framework.exceptions import ValidationError\n+\n+# Mapping month names to their corresponding numbers\n+MONTHS_MAPPING = {\n+    'january': 1, 'february': 2, 'march': 3, 'april': 4, \n+    'may': 5, 'june': 6, 'july': 7, 'august': 8, \n+    'september': 9, 'october': 10, 'november': 11, 'december': 12\n+}\n+\n+    \"\"\"\n+    Custom filter for filtering Departures by the name of the month.\n+    Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n+    \"\"\"\n+    departure_month_name = filters.CharFilter(\n+        method='filter_by_month_name',\n+        label='Month Name',\n+        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n+    )\n+\n+    class Meta:\n+        model = Departure\n+        fields = {\n+            'id': ['exact'],\n+            'upcoming_departure_date': ['exact', 'lte', 'gte'],\n+        }\n+\n+    def filter_by_month_name(self, queryset, name, value):\n+        \"\"\"\n+        Custom filter method to filter by month name.\n+        Validates and converts the month name to its corresponding month number.\n+        \"\"\"\n+        month_number = MONTHS_MAPPING.get(value.lower())\n+        if month_number:\n+            # Filter the queryset by the month number\n+            return queryset.filter(upcoming_departure_date__month=month_number)\n+        else:\n+            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725950197922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,20 +90,16 @@\n \n         return queryset\n \n \n-import django_filters\n-from django_filters import rest_framework as filters\n-from ..models import Departure\n-from rest_framework.exceptions import ValidationError\n \n+\n # Mapping month names to their corresponding numbers\n MONTHS_MAPPING = {\n     'january': 1, 'february': 2, 'march': 3, 'april': 4, \n     'may': 5, 'june': 6, 'july': 7, 'august': 8, \n     'september': 9, 'october': 10, 'november': 11, 'december': 12\n }\n-\n     \"\"\"\n     Custom filter for filtering Departures by the name of the month.\n     Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n     \"\"\"\n"
                },
                {
                    "date": 1725950212357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n import django_filters\n import re\n from django.db.models import Q\n from ..models import Destination\n+import django_filters\n+from django_filters import rest_framework as filters\n+from ..models import Departure\n+from rest_framework.exceptions import ValidationError\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n@@ -92,38 +96,38 @@\n \n \n \n \n-# Mapping month names to their corresponding numbers\n-MONTHS_MAPPING = {\n-    'january': 1, 'february': 2, 'march': 3, 'april': 4, \n-    'may': 5, 'june': 6, 'july': 7, 'august': 8, \n-    'september': 9, 'october': 10, 'november': 11, 'december': 12\n-}\n-    \"\"\"\n-    Custom filter for filtering Departures by the name of the month.\n-    Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n-    \"\"\"\n-    departure_month_name = filters.CharFilter(\n-        method='filter_by_month_name',\n-        label='Month Name',\n-        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n-    )\n+    # Mapping month names to their corresponding numbers\n+    MONTHS_MAPPING = {\n+        'january': 1, 'february': 2, 'march': 3, 'april': 4, \n+        'may': 5, 'june': 6, 'july': 7, 'august': 8, \n+        'september': 9, 'october': 10, 'november': 11, 'december': 12\n+    }\n+        \"\"\"\n+        Custom filter for filtering Departures by the name of the month.\n+        Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n+        \"\"\"\n+        departure_month_name = filters.CharFilter(\n+            method='filter_by_month_name',\n+            label='Month Name',\n+            help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n+        )\n \n-    class Meta:\n-        model = Departure\n-        fields = {\n-            'id': ['exact'],\n-            'upcoming_departure_date': ['exact', 'lte', 'gte'],\n-        }\n+        class Meta:\n+            model = Departure\n+            fields = {\n+                'id': ['exact'],\n+                'upcoming_departure_date': ['exact', 'lte', 'gte'],\n+            }\n \n-    def filter_by_month_name(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter method to filter by month name.\n-        Validates and converts the month name to its corresponding month number.\n-        \"\"\"\n-        month_number = MONTHS_MAPPING.get(value.lower())\n-        if month_number:\n-            # Filter the queryset by the month number\n-            return queryset.filter(upcoming_departure_date__month=month_number)\n-        else:\n-            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n+        def filter_by_month_name(self, queryset, name, value):\n+            \"\"\"\n+            Custom filter method to filter by month name.\n+            Validates and converts the month name to its corresponding month number.\n+            \"\"\"\n+            month_number = MONTHS_MAPPING.get(value.lower())\n+            if month_number:\n+                # Filter the queryset by the month number\n+                return queryset.filter(upcoming_departure_date__month=month_number)\n+            else:\n+                raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725950237672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,38 +96,38 @@\n \n \n \n \n-    # Mapping month names to their corresponding numbers\n-    MONTHS_MAPPING = {\n-        'january': 1, 'february': 2, 'march': 3, 'april': 4, \n-        'may': 5, 'june': 6, 'july': 7, 'august': 8, \n-        'september': 9, 'october': 10, 'november': 11, 'december': 12\n-    }\n+# Mapping month names to their corresponding numbers\n+MONTHS_MAPPING = {\n+    'january': 1, 'february': 2, 'march': 3, 'april': 4, \n+    'may': 5, 'june': 6, 'july': 7, 'august': 8, \n+    'september': 9, 'october': 10, 'november': 11, 'december': 12\n+}\n+    \"\"\"\n+    Custom filter for filtering Departures by the name of the month.\n+    Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n+    \"\"\"\n+    departure_month_name = filters.CharFilter(\n+        method='filter_by_month_name',\n+        label='Month Name',\n+        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n+    )\n+\n+    class Meta:\n+        model = Departure\n+        fields = {\n+            'id': ['exact'],\n+            'upcoming_departure_date': ['exact', 'lte', 'gte'],\n+        }\n+\n+    def filter_by_month_name(self, queryset, name, value):\n         \"\"\"\n-        Custom filter for filtering Departures by the name of the month.\n-        Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n+        Custom filter method to filter by month name.\n+        Validates and converts the month name to its corresponding month number.\n         \"\"\"\n-        departure_month_name = filters.CharFilter(\n-            method='filter_by_month_name',\n-            label='Month Name',\n-            help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n-        )\n-\n-        class Meta:\n-            model = Departure\n-            fields = {\n-                'id': ['exact'],\n-                'upcoming_departure_date': ['exact', 'lte', 'gte'],\n-            }\n-\n-        def filter_by_month_name(self, queryset, name, value):\n-            \"\"\"\n-            Custom filter method to filter by month name.\n-            Validates and converts the month name to its corresponding month number.\n-            \"\"\"\n-            month_number = MONTHS_MAPPING.get(value.lower())\n-            if month_number:\n-                # Filter the queryset by the month number\n-                return queryset.filter(upcoming_departure_date__month=month_number)\n-            else:\n-                raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n+        month_number = MONTHS_MAPPING.get(value.lower())\n+        if month_number:\n+            # Filter the queryset by the month number\n+            return queryset.filter(upcoming_departure_date__month=month_number)\n+        else:\n+            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725950251364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,8 @@\n import django_filters\n import re\n from django.db.models import Q\n from ..models import Destination\n-import django_filters\n-from django_filters import rest_framework as filters\n-from ..models import Departure\n-from rest_framework.exceptions import ValidationError\n \n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n@@ -92,42 +88,4 @@\n             except ValueError:\n                 pass  # Ignore invalid values and don't filter\n \n         return queryset\n-\n-\n-\n-\n-# Mapping month names to their corresponding numbers\n-MONTHS_MAPPING = {\n-    'january': 1, 'february': 2, 'march': 3, 'april': 4, \n-    'may': 5, 'june': 6, 'july': 7, 'august': 8, \n-    'september': 9, 'october': 10, 'november': 11, 'december': 12\n-}\n-    \"\"\"\n-    Custom filter for filtering Departures by the name of the month.\n-    Use full month names (e.g., 'January', 'February') in the 'departure_month_name' filter.\n-    \"\"\"\n-    departure_month_name = filters.CharFilter(\n-        method='filter_by_month_name',\n-        label='Month Name',\n-        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n-    )\n-\n-    class Meta:\n-        model = Departure\n-        fields = {\n-            'id': ['exact'],\n-            'upcoming_departure_date': ['exact', 'lte', 'gte'],\n-        }\n-\n-    def filter_by_month_name(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter method to filter by month name.\n-        Validates and converts the month name to its corresponding month number.\n-        \"\"\"\n-        month_number = MONTHS_MAPPING.get(value.lower())\n-        if month_number:\n-            # Filter the queryset by the month number\n-            return queryset.filter(upcoming_departure_date__month=month_number)\n-        else:\n-            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725951078157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,4 +88,16 @@\n             except ValueError:\n                 pass  # Ignore invalid values and don't filter\n \n         return queryset\n+    \n+    def filter_by_departure_month_name(self, queryset, name, value):\n+        \"\"\"\n+        Custom filter method to filter Destinations by the month name of upcoming departures.\n+        Converts the month name to its corresponding month number.\n+        \"\"\"\n+        month_number = MONTHS_MAPPING.get(value.lower())\n+        if month_number:\n+            # Filter destinations where associated departures have upcoming_departure_date in the specified month\n+            return queryset.filter(destination_departures__upcoming_departure_date__month=month_number)\n+        else:\n+            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725951091995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,16 @@\n import re\n from django.db.models import Q\n from ..models import Destination\n \n+\n+# Mapping month names to their corresponding numbers\n+MONTHS_MAPPING = {\n+    'january': 1, 'february': 2, 'march': 3, 'april': 4,\n+    'may': 5, 'june': 6, 'july': 7, 'august': 8,\n+    'september': 9, 'october': 10, 'november': 11, 'december': 12\n+}\n+\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n"
                },
                {
                    "date": 1725951108244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import django_filters\n+import re\n+from django.db.models import Q\n+from ..models import Destination\n+\n+\n+# Mapping month names to their corresponding numbers\n+MONTHS_MAPPING = {\n+    'january': 1, 'february': 2, 'march': 3, 'april': 4,\n+    'may': 5, 'june': 6, 'july': 7, 'august': 8,\n+    'september': 9, 'october': 10, 'november': 11, 'december': 12\n+}\n+\n+class DestinationFilter(django_filters.FilterSet):\n+    activities = django_filters.CharFilter(method='filter_by_activities')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_packages')\n+    departure_month_name = filters.CharFilter(\n+        method='filter_by_departure_month_name',\n+        label='Departure Month (Name)',\n+        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n+    )\n+    duration_gte = django_filters.NumberFilter(label='Duration (Greater than or equal to)', method='filter_by_duration_gte')\n+    duration_lte = django_filters.NumberFilter(label='Duration (Less than or equal to)', method='filter_by_duration_lte')\n+\n+    class Meta:\n+        model = Destination\n+        fields = {\n+            'destination_title': ['exact', 'icontains'],\n+            'nature_of_trip': ['exact', 'icontains'],\n+            'created_date': ['exact', 'gte', 'lte'],\n+        }\n+\n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n+    def extract_min_max_duration(self, duration_str):\n+        \"\"\"\n+        Extracts the minimum and maximum duration from the duration string.\n+        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n+        \"\"\"\n+        numbers = re.findall(r'\\d+', duration_str)\n+        if len(numbers) == 1:\n+            return int(numbers[0]), int(numbers[0])\n+        elif len(numbers) == 2:\n+            return int(numbers[0]), int(numbers[1])\n+        return None, None\n+\n+    def filter_by_duration_gte(self, queryset, name, value):\n+        \"\"\"\n+        Custom method to handle gte (greater than or equal to) duration filtering.\n+        \"\"\"\n+        if value is not None:\n+            return queryset.filter(id__in=[\n+                obj.id for obj in queryset\n+                if self.extract_min_max_duration(obj.duration)[1] >= value\n+            ])\n+        return queryset\n+\n+    def filter_by_duration_lte(self, queryset, name, value):\n+        \"\"\"\n+        Custom method to handle lte (less than or equal to) duration filtering.\n+        \"\"\"\n+        if value is not None:\n+            return queryset.filter(id__in=[\n+                obj.id for obj in queryset\n+                if self.extract_min_max_duration(obj.duration)[0] <= value\n+            ])\n+        return queryset\n+\n+    def filter_queryset(self, queryset):\n+        \"\"\"\n+        Override the filter_queryset method to handle both gte and lte filters together.\n+        \"\"\"\n+        queryset = super().filter_queryset(queryset)\n+\n+        # Custom duration range handling\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_gte(self.filter_by_duration_lte(queryset, None, lte_value), None, gte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n+        return queryset\n+    \n+    def filter_by_departure_month_name(self, queryset, name, value):\n+        \"\"\"\n+        Custom filter method to filter Destinations by the month name of upcoming departures.\n+        Converts the month name to its corresponding month number.\n+        \"\"\"\n+        month_number = MONTHS_MAPPING.get(value.lower())\n+        if month_number:\n+            # Filter destinations where associated departures have upcoming_departure_date in the specified month\n+            return queryset.filter(destination_departures__upcoming_departure_date__month=month_number)\n+        else:\n+            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725951128458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    departure_month_name = filters.CharFilter(\n+    departure_month_name = filter.CharFilter(\n         method='filter_by_departure_month_name',\n         label='Departure Month (Name)',\n         help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n     )\n@@ -113,115 +113,4 @@\n             # Filter destinations where associated departures have upcoming_departure_date in the specified month\n             return queryset.filter(destination_departures__upcoming_departure_date__month=month_number)\n         else:\n             raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n-import django_filters\n-import re\n-from django.db.models import Q\n-from ..models import Destination\n-\n-\n-# Mapping month names to their corresponding numbers\n-MONTHS_MAPPING = {\n-    'january': 1, 'february': 2, 'march': 3, 'april': 4,\n-    'may': 5, 'june': 6, 'july': 7, 'august': 8,\n-    'september': 9, 'october': 10, 'november': 11, 'december': 12\n-}\n-\n-class DestinationFilter(django_filters.FilterSet):\n-    activities = django_filters.CharFilter(method='filter_by_activities')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n-    packages = django_filters.CharFilter(method='filter_by_packages')\n-    duration_gte = django_filters.NumberFilter(label='Duration (Greater than or equal to)', method='filter_by_duration_gte')\n-    duration_lte = django_filters.NumberFilter(label='Duration (Less than or equal to)', method='filter_by_duration_lte')\n-\n-    class Meta:\n-        model = Destination\n-        fields = {\n-            'destination_title': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n-            'created_date': ['exact', 'gte', 'lte'],\n-        }\n-\n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n-    def filter_by_packages(self, queryset, name, value):\n-        if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n-        return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n-\n-    def extract_min_max_duration(self, duration_str):\n-        \"\"\"\n-        Extracts the minimum and maximum duration from the duration string.\n-        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n-        \"\"\"\n-        numbers = re.findall(r'\\d+', duration_str)\n-        if len(numbers) == 1:\n-            return int(numbers[0]), int(numbers[0])\n-        elif len(numbers) == 2:\n-            return int(numbers[0]), int(numbers[1])\n-        return None, None\n-\n-    def filter_by_duration_gte(self, queryset, name, value):\n-        \"\"\"\n-        Custom method to handle gte (greater than or equal to) duration filtering.\n-        \"\"\"\n-        if value is not None:\n-            return queryset.filter(id__in=[\n-                obj.id for obj in queryset\n-                if self.extract_min_max_duration(obj.duration)[1] >= value\n-            ])\n-        return queryset\n-\n-    def filter_by_duration_lte(self, queryset, name, value):\n-        \"\"\"\n-        Custom method to handle lte (less than or equal to) duration filtering.\n-        \"\"\"\n-        if value is not None:\n-            return queryset.filter(id__in=[\n-                obj.id for obj in queryset\n-                if self.extract_min_max_duration(obj.duration)[0] <= value\n-            ])\n-        return queryset\n-\n-    def filter_queryset(self, queryset):\n-        \"\"\"\n-        Override the filter_queryset method to handle both gte and lte filters together.\n-        \"\"\"\n-        queryset = super().filter_queryset(queryset)\n-\n-        # Custom duration range handling\n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n-\n-        if duration_gte and duration_lte:\n-            try:\n-                gte_value = int(duration_gte)\n-                lte_value = int(duration_lte)\n-                return self.filter_by_duration_gte(self.filter_by_duration_lte(queryset, None, lte_value), None, gte_value)\n-            except ValueError:\n-                pass  # Ignore invalid values and don't filter\n-\n-        return queryset\n-    \n-    def filter_by_departure_month_name(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter method to filter Destinations by the month name of upcoming departures.\n-        Converts the month name to its corresponding month number.\n-        \"\"\"\n-        month_number = MONTHS_MAPPING.get(value.lower())\n-        if month_number:\n-            # Filter destinations where associated departures have upcoming_departure_date in the specified month\n-            return queryset.filter(destination_departures__upcoming_departure_date__month=month_number)\n-        else:\n-            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                },
                {
                    "date": 1725951158119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n class DestinationFilter(django_filters.FilterSet):\n     activities = django_filters.CharFilter(method='filter_by_activities')\n     collections = django_filters.CharFilter(method='filter_by_collections')\n     packages = django_filters.CharFilter(method='filter_by_packages')\n-    departure_month_name = filter.CharFilter(\n+    departure_month_name = django_filters.CharFilter(\n         method='filter_by_departure_month_name',\n         label='Departure Month (Name)',\n         help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n     )\n"
                },
                {
                    "date": 1725951702545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,12 @@\n import django_filters\n import re\n from django.db.models import Q\n from ..models import Destination\n+import django_filters\n+from django_filters import rest_framework as filters\n+from ..models import Departure\n+from rest_framework.exceptions import ValidationError\n \n \n # Mapping month names to their corresponding numbers\n MONTHS_MAPPING = {\n"
                },
                {
                    "date": 1726203365279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n-\n+('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n             collections = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(collections__id__in=collections)\n"
                },
                {
                    "date": 1726203402847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,12 @@\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n+            'nature_of_trip': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n-('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n+# ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n             collections = value.split(',') if ',' in value else [value]\n             queryset = queryset.filter(collections__id__in=collections)\n"
                },
                {
                    "date": 1726203417882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n+            'accommodation': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n"
                },
                {
                    "date": 1726203430153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'accommodation': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n+            'created_date': ['exact', 'gte', 'lte'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726203459183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'accommodation': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n-            'created_date': ['exact', 'gte', 'lte'],\n+            'best_season': ['exact', 'gte', 'lte'],\n+            'best_season': ['exact', 'gte', 'lte'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726203473681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'accommodation': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n-            'best_season': ['exact', 'gte', 'lte'],\n-            'best_season': ['exact', 'gte', 'lte'],\n+            'best_season': ['exact', 'icontains'],\n+            'trip_grade': ['exact', 'gte', 'lte'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226586941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,10 @@\n             'nature_of_trip': ['exact', 'icontains'],\n             'accommodation': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n             'best_season': ['exact', 'icontains'],\n-            'trip_grade': ['exact', 'gte', 'lte'],\n+            'trip_grade': ['exact', 'icontains'],\n+            'trip_grade': ['exact', 'icontains'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226593532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             'accommodation': ['exact', 'icontains'],\n             'created_date': ['exact', 'gte', 'lte'],\n             'best_season': ['exact', 'icontains'],\n             'trip_grade': ['exact', 'icontains'],\n-            'trip_grade': ['exact', 'icontains'],\n+            'price': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226607806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n             'created_date': ['exact', 'gte', 'lte'],\n             'best_season': ['exact', 'icontains'],\n             'trip_grade': ['exact', 'icontains'],\n             'price': ['exact'],\n+            'trip_grade': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226621392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n             'best_season': ['exact', 'icontains'],\n             'trip_grade': ['exact', 'icontains'],\n             'price': ['exact'],\n             'trip_grade': ['exact'],\n+            'trip_grade': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226639527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n             'best_season': ['exact', 'icontains'],\n             'trip_grade': ['exact', 'icontains'],\n             'price': ['exact'],\n             'trip_grade': ['exact'],\n-            'trip_grade': ['exact'],\n+            'max_altitude': ['exact'],\n+            'max_altbest_seasonitude': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226648860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n             'trip_grade': ['exact', 'icontains'],\n             'price': ['exact'],\n             'trip_grade': ['exact'],\n             'max_altitude': ['exact'],\n-            'max_altbest_seasonitude': ['exact'],\n+            'best_season': ['exact'],\n+            'best_season': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226654022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n             'price': ['exact'],\n             'trip_grade': ['exact'],\n             'max_altitude': ['exact'],\n             'best_season': ['exact'],\n-            'best_season': ['exact'],\n+            'price_type': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726226659595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,8 @@\n             'price': ['exact'],\n             'trip_grade': ['exact'],\n             'max_altitude': ['exact'],\n             'best_season': ['exact'],\n-            'price_type': ['exact'],\n         }\n # ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     def filter_by_collections(self, queryset, name, value):\n         if value:\n"
                },
                {
                    "date": 1726229502403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import django_filters\n+import re\n+from django.db.models import Q\n+from ..models import Destination\n+import django_filters\n+from django_filters import rest_framework as filters\n+from ..models import Departure\n+from rest_framework.exceptions import ValidationError\n+\n+\n+# Mapping month names to their corresponding numbers\n+MONTHS_MAPPING = {\n+    'january': 1, 'february': 2, 'march': 3, 'april': 4,\n+    'may': 5, 'june': 6, 'july': 7, 'august': 8,\n+    'september': 9, 'october': 10, 'november': 11, 'december': 12\n+}\n+\n+class DestinationFilter(django_filters.FilterSet):\n+    activities = django_filters.CharFilter(method='filter_by_activities')\n+    collections = django_filters.CharFilter(method='filter_by_collections')\n+    packages = django_filters.CharFilter(method='filter_by_packages')\n+    departure_month_name = django_filters.CharFilter(\n+        method='filter_by_departure_month_name',\n+        label='Departure Month (Name)',\n+        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n+    )\n+    duration_gte = django_filters.NumberFilter(label='Duration (Greater than or equal to)', method='filter_by_duration_gte')\n+    duration_lte = django_filters.NumberFilter(label='Duration (Less than or equal to)', method='filter_by_duration_lte')\n+\n+    class Meta:\n+        model = Destination\n+        fields = {\n+            'destination_title': ['exact', 'icontains'],\n+            'nature_of_trip': ['exact', 'icontains'],\n+            'accommodation': ['exact', 'icontains'],\n+            'created_date': ['exact', 'gte', 'lte'],\n+            'best_season': ['exact', 'icontains'],\n+            'trip_grade': ['exact', 'icontains'],\n+            'price': ['exact'],\n+            'trip_grade': ['exact'],\n+            'max_altitude': ['exact'],\n+            'best_season': ['exact'],\n+        }\n+# ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n+    def filter_by_collections(self, queryset, name, value):\n+        if value:\n+            collections = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(collections__id__in=collections)\n+        return queryset\n+\n+    def filter_by_packages(self, queryset, name, value):\n+        if value:\n+            packages = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(packages__id__in=packages)\n+        return queryset\n+\n+    def filter_by_activities(self, queryset, name, value):\n+        if value:\n+            activities = value.split(',') if ',' in value else [value]\n+            queryset = queryset.filter(activities__id__in=activities).distinct()\n+        return queryset\n+\n+    def extract_min_max_duration(self, duration_str):\n+        \"\"\"\n+        Extracts the minimum and maximum duration from the duration string.\n+        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n+        \"\"\"\n+        numbers = re.findall(r'\\d+', duration_str)\n+        if len(numbers) == 1:\n+            return int(numbers[0]), int(numbers[0])\n+        elif len(numbers) == 2:\n+            return int(numbers[0]), int(numbers[1])\n+        return None, None\n+\n+    def filter_by_duration_gte(self, queryset, name, value):\n+        \"\"\"\n+        Custom method to handle gte (greater than or equal to) duration filtering.\n+        \"\"\"\n+        if value is not None:\n+            return queryset.filter(id__in=[\n+                obj.id for obj in queryset\n+                if self.extract_min_max_duration(obj.duration)[1] >= value\n+            ])\n+        return queryset\n+\n+    def filter_by_duration_lte(self, queryset, name, value):\n+        \"\"\"\n+        Custom method to handle lte (less than or equal to) duration filtering.\n+        \"\"\"\n+        if value is not None:\n+            return queryset.filter(id__in=[\n+                obj.id for obj in queryset\n+                if self.extract_min_max_duration(obj.duration)[0] <= value\n+            ])\n+        return queryset\n+\n+    def filter_queryset(self, queryset):\n+        \"\"\"\n+        Override the filter_queryset method to handle both gte and lte filters together.\n+        \"\"\"\n+        queryset = super().filter_queryset(queryset)\n+\n+        # Custom duration range handling\n+        duration_gte = self.data.get('duration_gte')\n+        duration_lte = self.data.get('duration_lte')\n+\n+        if duration_gte and duration_lte:\n+            try:\n+                gte_value = int(duration_gte)\n+                lte_value = int(duration_lte)\n+                return self.filter_by_duration_gte(self.filter_by_duration_lte(queryset, None, lte_value), None, gte_value)\n+            except ValueError:\n+                pass  # Ignore invalid values and don't filter\n+\n+        return queryset\n+    \n+   def filter_by_departure_month_name(self, queryset, name, value):\n+    \"\"\"\n+    Custom filter method to filter Destinations by the month name(s) of upcoming departures.\n+    Converts the month name(s) to their corresponding month numbers.\n+    \"\"\"\n+    if isinstance(value, str):\n+        value = [value]\n+\n+    # Convert each month name to its corresponding month number\n+    month_numbers = []\n+    for month in value:\n+        month_number = MONTHS_MAPPING.get(month.lower())\n+        if month_number:\n+            month_numbers.append(month_number)\n+        else:\n+            raise ValidationError(f\"Invalid month name '{month}'. Please provide valid month names.\")\n+    \n+    # Filter destinations where associated departures have upcoming_departure_date in the specified months\n+    return queryset.filter(destination_departures__upcoming_departure_date__month__in=month_numbers)\n+\n"
                },
                {
                    "date": 1726229510633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,151 +113,6 @@\n                 pass  # Ignore invalid values and don't filter\n \n         return queryset\n     \n-   def filter_by_departure_month_name(self, queryset, name, value):\n-    \"\"\"\n-    Custom filter method to filter Destinations by the month name(s) of upcoming departures.\n-    Converts the month name(s) to their corresponding month numbers.\n-    \"\"\"\n-    if isinstance(value, str):\n-        value = [value]\n-\n-    # Convert each month name to its corresponding month number\n-    month_numbers = []\n-    for month in value:\n-        month_number = MONTHS_MAPPING.get(month.lower())\n-        if month_number:\n-            month_numbers.append(month_number)\n-        else:\n-            raise ValidationError(f\"Invalid month name '{month}'. Please provide valid month names.\")\n     \n-    # Filter destinations where associated departures have upcoming_departure_date in the specified months\n-    return queryset.filter(destination_departures__upcoming_departure_date__month__in=month_numbers)\n \n-import django_filters\n-import re\n-from django.db.models import Q\n-from ..models import Destination\n-import django_filters\n-from django_filters import rest_framework as filters\n-from ..models import Departure\n-from rest_framework.exceptions import ValidationError\n-\n-\n-# Mapping month names to their corresponding numbers\n-MONTHS_MAPPING = {\n-    'january': 1, 'february': 2, 'march': 3, 'april': 4,\n-    'may': 5, 'june': 6, 'july': 7, 'august': 8,\n-    'september': 9, 'october': 10, 'november': 11, 'december': 12\n-}\n-\n-class DestinationFilter(django_filters.FilterSet):\n-    activities = django_filters.CharFilter(method='filter_by_activities')\n-    collections = django_filters.CharFilter(method='filter_by_collections')\n-    packages = django_filters.CharFilter(method='filter_by_packages')\n-    departure_month_name = django_filters.CharFilter(\n-        method='filter_by_departure_month_name',\n-        label='Departure Month (Name)',\n-        help_text='Filter by the name of the departure month. Use full month names like January, February, etc.'\n-    )\n-    duration_gte = django_filters.NumberFilter(label='Duration (Greater than or equal to)', method='filter_by_duration_gte')\n-    duration_lte = django_filters.NumberFilter(label='Duration (Less than or equal to)', method='filter_by_duration_lte')\n-\n-    class Meta:\n-        model = Destination\n-        fields = {\n-            'destination_title': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n-            'accommodation': ['exact', 'icontains'],\n-            'created_date': ['exact', 'gte', 'lte'],\n-            'best_season': ['exact', 'icontains'],\n-            'trip_grade': ['exact', 'icontains'],\n-            'price': ['exact'],\n-            'trip_grade': ['exact'],\n-            'max_altitude': ['exact'],\n-            'best_season': ['exact'],\n-        }\n-# ('public_id', 'slug', 'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n-    def filter_by_collections(self, queryset, name, value):\n-        if value:\n-            collections = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(collections__id__in=collections)\n-        return queryset\n-\n-    def filter_by_packages(self, queryset, name, value):\n-        if value:\n-            packages = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(packages__id__in=packages)\n-        return queryset\n-\n-    def filter_by_activities(self, queryset, name, value):\n-        if value:\n-            activities = value.split(',') if ',' in value else [value]\n-            queryset = queryset.filter(activities__id__in=activities).distinct()\n-        return queryset\n-\n-    def extract_min_max_duration(self, duration_str):\n-        \"\"\"\n-        Extracts the minimum and maximum duration from the duration string.\n-        Example: \"5-10 Days\" -> (5, 10), \"7 Days\" -> (7, 7)\n-        \"\"\"\n-        numbers = re.findall(r'\\d+', duration_str)\n-        if len(numbers) == 1:\n-            return int(numbers[0]), int(numbers[0])\n-        elif len(numbers) == 2:\n-            return int(numbers[0]), int(numbers[1])\n-        return None, None\n-\n-    def filter_by_duration_gte(self, queryset, name, value):\n-        \"\"\"\n-        Custom method to handle gte (greater than or equal to) duration filtering.\n-        \"\"\"\n-        if value is not None:\n-            return queryset.filter(id__in=[\n-                obj.id for obj in queryset\n-                if self.extract_min_max_duration(obj.duration)[1] >= value\n-            ])\n-        return queryset\n-\n-    def filter_by_duration_lte(self, queryset, name, value):\n-        \"\"\"\n-        Custom method to handle lte (less than or equal to) duration filtering.\n-        \"\"\"\n-        if value is not None:\n-            return queryset.filter(id__in=[\n-                obj.id for obj in queryset\n-                if self.extract_min_max_duration(obj.duration)[0] <= value\n-            ])\n-        return queryset\n-\n-    def filter_queryset(self, queryset):\n-        \"\"\"\n-        Override the filter_queryset method to handle both gte and lte filters together.\n-        \"\"\"\n-        queryset = super().filter_queryset(queryset)\n-\n-        # Custom duration range handling\n-        duration_gte = self.data.get('duration_gte')\n-        duration_lte = self.data.get('duration_lte')\n-\n-        if duration_gte and duration_lte:\n-            try:\n-                gte_value = int(duration_gte)\n-                lte_value = int(duration_lte)\n-                return self.filter_by_duration_gte(self.filter_by_duration_lte(queryset, None, lte_value), None, gte_value)\n-            except ValueError:\n-                pass  # Ignore invalid values and don't filter\n-\n-        return queryset\n-    \n-    def filter_by_departure_month_name(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter method to filter Destinations by the month name of upcoming departures.\n-        Converts the month name to its corresponding month number.\n-        \"\"\"\n-        month_number = MONTHS_MAPPING.get(value.lower())\n-        if month_number:\n-            # Filter destinations where associated departures have upcoming_departure_date in the specified month\n-            return queryset.filter(destination_departures__upcoming_departure_date__month=month_number)\n-        else:\n-            raise ValidationError(f\"Invalid month name '{value}'. Please provide a valid month name.\")\n"
                }
            ],
            "date": 1724821555571,
            "name": "Commit-0",
            "content": "import django_filters\nfrom ..models import Destination\nimport ast\n\nclass DestinationFilter(django_filters.FilterSet):\n    activities = django_filters.CharFilter(method='filter_by_activities')\n    collections = django_filters.CharFilter(method='filter_by_collections')\n    \n    package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n    min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n    max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n    class Meta:\n        model = Destination\n        fields = {\n            'destination_title': ['exact', 'icontains'],\n            'nature_of_trip': ['exact', 'icontains'],\n            'duration': ['exact'],\n        }\n\n    def filter_by_collections(self, queryset, name, value):\n        try:\n            collections = self.request.GET.get('collections')\n            collections = collections.split(',')\n            queryset = queryset.filter(collections_id__in=collections)\n        except:\n            pass\n        return queryset\n    \n    \n    def filter_by_activities(self, queryset, name, value):\n        try:\n            activities = self.request.GET.get('activities')\n            activities = activities.split(',')\n            queryset = queryset.filter(activities_id__in=activities)\n        except:\n            pass\n        return queryset\n\n"
        }
    ]
}