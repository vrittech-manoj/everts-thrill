{
    "sourceFile": "destination/viewsets/destination_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1724818676603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724818727853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'activities': ['exact'],\n+            'activities': ['exact'],\n             'collections': ['exact'],\n         }\n \n class DestinationViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1724820027827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,16 @@\n from rest_framework import viewsets, permissions, filters\n from ..models import Destination\n+\n from django.shortcuts import get_object_or_404\n from ..serializers.destination_serializers import (\n     DestinationlistUserSerializers,\n     DestinationlistAdminSerializers,\n     DestinationRetrieveUserSerializers,\n     DestinationRetrieveAdminSerializers,\n     DestinationWriteSerializers\n+    \n+\n )\n from ..utilities.importbase import *\n from ..utilities.permissions import destinationPermission\n from accounts import roles\n@@ -18,18 +21,15 @@\n \n # Custom filter set for Destination model\n class DestinationFilter(django_filters.FilterSet):\n     package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n-    min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n-    max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n \n     class Meta:\n         model = Destination\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'activities': ['exact'],\n-            'activities': ['exact'],\n             'collections': ['exact'],\n         }\n \n class DestinationViewsets(viewsets.ModelViewSet):\n@@ -38,22 +38,22 @@\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['destination_title']\n-    ordering_fields = ['destination_title', 'id', 'duration']\n+    ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter  # Use the custom filter set here\n     lookup_field = \"slug\"\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return DestinationWriteSerializers\n         elif self.action == \"list\":\n-            if self.request.user.is_authenticated and her.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n                 return DestinationlistAdminSerializers\n             else:\n                 return DestinationlistUserSerializers\n         elif self.action == \"retrieve\":\n-            if self.request.user.is_authenticated and her.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n                 return DestinationRetrieveAdminSerializers\n             else:\n                 return DestinationRetrieveUserSerializers\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1724820056024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n \n # Custom filter set for Destination model\n class DestinationFilter(django_filters.FilterSet):\n     package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n+    min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n+    max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n \n     class Meta:\n         model = Destination\n         fields = {\n"
                },
                {
                    "date": 1724820103819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'activities': ['exact'],\n+            'activities': ['exact'],\n             'collections': ['exact'],\n         }\n \n class DestinationViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1724820993023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,13 @@\n         fields = {\n             'destination_title': ['exact', 'icontains'],\n             'nature_of_trip': ['exact', 'icontains'],\n             'activities': ['exact'],\n-            'activities': ['exact'],\n+            'duration': ['exact'],\n             'collections': ['exact'],\n         }\n+        \n+        \n \n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n"
                },
                {
                    "date": 1724821462294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,25 +19,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n import django_filters\n \n # Custom filter set for Destination model\n-class DestinationFilter(django_filters.FilterSet):\n-    package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n-    min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n-    max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n \n-    class Meta:\n-        model = Destination\n-        fields = {\n-            'destination_title': ['exact', 'icontains'],\n-            'nature_of_trip': ['exact', 'icontains'],\n-            'activities': ['exact'],\n-            'duration': ['exact'],\n-            'collections': ['exact'],\n-        }\n-        \n-        \n-\n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n"
                },
                {
                    "date": 1724821469622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,10 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n import django_filters\n+from ut\n \n-# Custom filter set for Destination model\n-\n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n"
                },
                {
                    "date": 1724821499591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n import django_filters\n-from ut\n+from utilities.\n \n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n@@ -27,9 +27,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['destination_title']\n     ordering_fields = ['destination_title', 'id','duration']\n-    filterset_class = DestinationFilter  # Use the custom filter set here\n+    filterset_class = \n     lookup_field = \"slug\"\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1724821508484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n import django_filters\n-from utilities.\n+from utilities.destination_filter import Des\n \n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n@@ -27,9 +27,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['destination_title']\n     ordering_fields = ['destination_title', 'id','duration']\n-    filterset_class = \n+    filterset_class = De\n     lookup_field = \"slug\"\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1724821513639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n import django_filters\n-from utilities.destination_filter import Des\n+from utilities.destination_filter import DestinationFilter\n \n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n@@ -27,9 +27,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['destination_title']\n     ordering_fields = ['destination_title', 'id','duration']\n-    filterset_class = De\n+    filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1724821544260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n from rest_framework_simplejwt.authentication import JWTAuthentication\n from django_filters.rest_framework import DjangoFilterBackend\n from rest_framework.filters import SearchFilter, OrderingFilter\n import django_filters\n-from utilities.destination_filter import DestinationFilter\n+from ..utilities.destination_filter import DestinationFilter\n \n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n"
                },
                {
                    "date": 1725791044421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+from rest_framework import viewsets, permissions, filters\n+from ..models import Destination\n+\n+from django.shortcuts import get_object_or_404\n+from ..serializers.destination_serializers import (\n+    DestinationlistUserSerializers,\n+    DestinationlistAdminSerializers,\n+    DestinationRetrieveUserSerializers,\n+    DestinationRetrieveAdminSerializers,\n+    DestinationWriteSerializers\n+    \n+\n+)\n+from ..utilities.importbase import *\n+from ..utilities.permissions import destinationPermission\n+from accounts import roles\n+from rest_framework_simplejwt.authentication import JWTAuthentication\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+import django_filters\n+from ..utilities.destination_filter import DestinationFilter\n+\n+class DestinationViewsets(viewsets.ModelViewSet):\n+    permission_classes = [destinationPermission]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Destination.objects.all().order_by(\"-destination_title\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['destination_title']\n+    ordering_fields = ['destination_title', 'id','duration']\n+    filterset_class = DestinationFilter\n+    lookup_field = \"slug\"\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return DestinationWriteSerializers\n+        elif self.action == \"list\":\n+            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+                return DestinationlistAdminSerializers\n+            else:\n+                return DestinationlistUserSerializers\n+        elif self.action == \"retrieve\":\n+            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+                return DestinationRetrieveAdminSerializers\n+            else:\n+                return DestinationRetrieveUserSerializers\n+        return super().get_serializer_class()\n+    \n+    def get_object(self):\n+        slug = self.kwargs.get('slug')\n+        return get_object_or_404(Destination, slug=slug)\n+    \n"
                },
                {
                    "date": 1725791062010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n from rest_framework import viewsets, permissions, filters\n from ..models import Destination\n+from rest_framework.response import Response\n+from rest_framework import status\n \n from django.shortcuts import get_object_or_404\n from ..serializers.destination_serializers import (\n     DestinationlistUserSerializers,\n@@ -49,55 +51,12 @@\n     def get_object(self):\n         slug = self.kwargs.get('slug')\n         return get_object_or_404(Destination, slug=slug)\n     \n-from rest_framework import viewsets, permissions, filters\n-from ..models import Destination\n-\n-from django.shortcuts import get_object_or_404\n-from ..serializers.destination_serializers import (\n-    DestinationlistUserSerializers,\n-    DestinationlistAdminSerializers,\n-    DestinationRetrieveUserSerializers,\n-    DestinationRetrieveAdminSerializers,\n-    DestinationWriteSerializers\n-    \n-\n-)\n-from ..utilities.importbase import *\n-from ..utilities.permissions import destinationPermission\n-from accounts import roles\n-from rest_framework_simplejwt.authentication import JWTAuthentication\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-import django_filters\n-from ..utilities.destination_filter import DestinationFilter\n-\n-class DestinationViewsets(viewsets.ModelViewSet):\n-    permission_classes = [destinationPermission]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Destination.objects.all().order_by(\"-destination_title\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['destination_title']\n-    ordering_fields = ['destination_title', 'id','duration']\n-    filterset_class = DestinationFilter\n-    lookup_field = \"slug\"\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return DestinationWriteSerializers\n-        elif self.action == \"list\":\n-            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n-                return DestinationlistAdminSerializers\n-            else:\n-                return DestinationlistUserSerializers\n-        elif self.action == \"retrieve\":\n-            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n-                return DestinationRetrieveAdminSerializers\n-            else:\n-                return DestinationRetrieveUserSerializers\n-        return super().get_serializer_class()\n-    \n-    def get_object(self):\n-        slug = self.kwargs.get('slug')\n-        return get_object_or_404(Destination, slug=slug)\n+    def destroy(self, request, *args, **kwargs):\n+        instance = self.get_object()\n+        self.perform_destroy(instance)\n+        \n+        return Response(\n+            {\"detail\": \"Item/s successfully deleted.\"}, \n+            status=status.HTTP_200_OK\n+        )\n"
                },
                {
                    "date": 1725791068969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,11 @@\n     \n     def get_object(self):\n         slug = self.kwargs.get('slug')\n         return get_object_or_404(Destination, slug=slug)\n-    \n+    from rest_framework.response import Response\n+from rest_framework import status\n+\n     def destroy(self, request, *args, **kwargs):\n         instance = self.get_object()\n         self.perform_destroy(instance)\n         \n"
                },
                {
                    "date": 1725791234633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+from rest_framework import viewsets, permissions, filters\n+from ..models import Destination\n+from rest_framework.response import Response\n+from rest_framework import status\n+\n+from django.shortcuts import get_object_or_404\n+from ..serializers.destination_serializers import (\n+    DestinationlistUserSerializers,\n+    DestinationlistAdminSerializers,\n+    DestinationRetrieveUserSerializers,\n+    DestinationRetrieveAdminSerializers,\n+    DestinationWriteSerializers\n+    \n+\n+)\n+from ..utilities.importbase import *\n+from ..utilities.permissions import destinationPermission\n+from accounts import roles\n+from rest_framework_simplejwt.authentication import JWTAuthentication\n+from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+import django_filters\n+from ..utilities.destination_filter import DestinationFilter\n+\n+class DestinationViewsets(viewsets.ModelViewSet):\n+    permission_classes = [destinationPermission]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Destination.objects.all().order_by(\"-destination_title\")\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['destination_title']\n+    ordering_fields = ['destination_title', 'id','duration']\n+    filterset_class = DestinationFilter\n+    lookup_field = \"slug\"\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return DestinationWriteSerializers\n+        elif self.action == \"list\":\n+            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+                return DestinationlistAdminSerializers\n+            else:\n+                return DestinationlistUserSerializers\n+        elif self.action == \"retrieve\":\n+            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+                return DestinationRetrieveAdminSerializers\n+            else:\n+                return DestinationRetrieveUserSerializers\n+        return super().get_serializer_class()\n+    \n+    def get_object(self):\n+        slug = self.kwargs.get('slug')\n+        return get_object_or_404(Destination, slug=slug)\n+\n+    def destroy(self, request, *args, **kwargs):\n+        instance = self.get_object()\n+        self.perform_destroy(instance)\n+        \n+        return Response(\n+            {\"detail\": \"Item/s successfully deleted.\"}, \n+            status=status.HTTP_200_OK\n+        )\n"
                },
                {
                    "date": 1725863262019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['destination_title']\n+    search_fields = \n     ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n@@ -59,68 +59,4 @@\n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n             status=status.HTTP_200_OK\n         )\n-from rest_framework import viewsets, permissions, filters\n-from ..models import Destination\n-from rest_framework.response import Response\n-from rest_framework import status\n-\n-from django.shortcuts import get_object_or_404\n-from ..serializers.destination_serializers import (\n-    DestinationlistUserSerializers,\n-    DestinationlistAdminSerializers,\n-    DestinationRetrieveUserSerializers,\n-    DestinationRetrieveAdminSerializers,\n-    DestinationWriteSerializers\n-    \n-\n-)\n-from ..utilities.importbase import *\n-from ..utilities.permissions import destinationPermission\n-from accounts import roles\n-from rest_framework_simplejwt.authentication import JWTAuthentication\n-from django_filters.rest_framework import DjangoFilterBackend\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-import django_filters\n-from ..utilities.destination_filter import DestinationFilter\n-\n-class DestinationViewsets(viewsets.ModelViewSet):\n-    permission_classes = [destinationPermission]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Destination.objects.all().order_by(\"-destination_title\")\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['destination_title']\n-    ordering_fields = ['destination_title', 'id','duration']\n-    filterset_class = DestinationFilter\n-    lookup_field = \"slug\"\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return DestinationWriteSerializers\n-        elif self.action == \"list\":\n-            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n-                return DestinationlistAdminSerializers\n-            else:\n-                return DestinationlistUserSerializers\n-        elif self.action == \"retrieve\":\n-            if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n-                return DestinationRetrieveAdminSerializers\n-            else:\n-                return DestinationRetrieveUserSerializers\n-        return super().get_serializer_class()\n-    \n-    def get_object(self):\n-        slug = self.kwargs.get('slug')\n-        return get_object_or_404(Destination, slug=slug)\n-    from rest_framework.response import Response\n-from rest_framework import status\n-\n-    def destroy(self, request, *args, **kwargs):\n-        instance = self.get_object()\n-        self.perform_destroy(instance)\n-        \n-        return Response(\n-            {\"detail\": \"Item/s successfully deleted.\"}, \n-            status=status.HTTP_200_OK\n-        )\n"
                },
                {
                    "date": 1725863269521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = \n+    search_fields = []'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n     ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n"
                },
                {
                    "date": 1725863276243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = []'destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', )\n+    search_fields = ['destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n     ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n"
                },
                {
                    "date": 1725863284127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['destination_title', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n+    search_fields = ['destination_title','id' 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n     ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n"
                },
                {
                    "date": 1725953220232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"-destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['destination_title','id' 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n+    search_fields = ['destination_title','id', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n     ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n@@ -57,6 +57,7 @@\n         self.perform_destroy(instance)\n         \n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n-            status=status.HTTP_200_OK\n+            status=st\n+            atus.HTTP_200_OK\n         )\n"
                },
                {
                    "date": 1725953228174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,7 +57,7 @@\n         self.perform_destroy(instance)\n         \n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n-            status=st\n-            atus.HTTP_200_OK\n+            status=status.HTTP_200_OK\n         )\n+    \n"
                },
                {
                    "date": 1725953357456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,5 +59,11 @@\n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n             status=status.HTTP_200_OK\n         )\n-    \n+    def get_serializer_context(self):\n+        \"\"\"\n+        Ensure the request context is passed to the serializer.\n+        \"\"\"\n+        context = super().get_serializer_context()\n+        context['request'] = self.request  \n+        return context\n"
                },
                {
                    "date": 1725958423138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,13 @@\n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n             status=status.HTTP_200_OK\n         )\n+    def get_serializer_class(self):\n+        if self.action == \"retrieve\":\n+            return DestinationRetrieveAdminSerializers\n+        return super().get_serializer_class()\n+\n     def get_serializer_context(self):\n-        \"\"\"\n-        Ensure the request context is passed to the serializer.\n-        \"\"\"\n         context = super().get_serializer_context()\n-        context['request'] = self.request  \n+        context['request'] = self.request  # Ensure the request context is passed to the serializer\n         return context\n"
                },
                {
                    "date": 1725958450420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n             status=status.HTTP_200_OK\n         )\n     def get_serializer_class(self):\n         if self.action == \"retrieve\":\n+            \n             return DestinationRetrieveAdminSerializers\n         return super().get_serializer_class()\n \n     def get_serializer_context(self):\n"
                },
                {
                    "date": 1725958455525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             status=status.HTTP_200_OK\n         )\n     def get_serializer_class(self):\n         if self.action == \"retrieve\":\n-            \n+           if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n             return DestinationRetrieveAdminSerializers\n         return super().get_serializer_class()\n \n     def get_serializer_context(self):\n"
                },
                {
                    "date": 1725958460858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,10 @@\n             status=status.HTTP_200_OK\n         )\n     def get_serializer_class(self):\n         if self.action == \"retrieve\":\n-           if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n-            return DestinationRetrieveAdminSerializers\n+             if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n+                return DestinationRetrieveAdminSerializers\n         return super().get_serializer_class()\n \n     def get_serializer_context(self):\n         context = super().get_serializer_context()\n"
                },
                {
                    "date": 1725958535181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,8 @@\n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n             status=status.HTTP_200_OK\n         )\n-    def get_serializer_class(self):\n-        if self.action == \"retrieve\":\n-             if self.request.user.is_authenticated and self.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n-                return DestinationRetrieveAdminSerializers\n-        return super().get_serializer_class()\n \n     def get_serializer_context(self):\n         context = super().get_serializer_context()\n         context['request'] = self.request  # Ensure the request context is passed to the serializer\n"
                },
                {
                    "date": 1725958665638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,4 @@\n         return Response(\n             {\"detail\": \"Item/s successfully deleted.\"}, \n             status=status.HTTP_200_OK\n         )\n-\n-    def get_serializer_context(self):\n-        context = super().get_serializer_context()\n-        context['request'] = self.request  # Ensure the request context is passed to the serializer\n-        return context\n"
                },
                {
                    "date": 1726656211346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n class DestinationViewsets(viewsets.ModelViewSet):\n     permission_classes = [destinationPermission]\n     pagination_class = MyPageNumberPagination\n-    queryset = Destination.objects.all().order_by(\"-destination_title\")\n+    queryset = Destination.objects.all().order_by(\"destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['destination_title','id', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n     ordering_fields = ['destination_title', 'id','duration']\n"
                },
                {
                    "date": 1726660391376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Destination.objects.all().order_by(\"destination_title\")\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['destination_title','id', 'packages', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n+    search_fields = ['destination_title','id', 'price', 'price_type', 'is_price', 'featured_image', 'overview', 'inclusion_and_exclusion', 'ltinerary', 'trip_map_url', 'trip_map_image', 'gear_and_equipment', 'useful_information', 'duration', 'trip_grade', 'best_season', 'max_altitude', 'meals', 'nature_of_trip', 'accommodation', 'group_size', ]\n     ordering_fields = ['destination_title', 'id','duration']\n     filterset_class = DestinationFilter\n     lookup_field = \"slug\"\n \n"
                }
            ],
            "date": 1724818676603,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets, permissions, filters\nfrom ..models import Destination\nfrom django.shortcuts import get_object_or_404\nfrom ..serializers.destination_serializers import (\n    DestinationlistUserSerializers,\n    DestinationlistAdminSerializers,\n    DestinationRetrieveUserSerializers,\n    DestinationRetrieveAdminSerializers,\n    DestinationWriteSerializers\n)\nfrom ..utilities.importbase import *\nfrom ..utilities.permissions import destinationPermission\nfrom accounts import roles\nfrom rest_framework_simplejwt.authentication import JWTAuthentication\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nimport django_filters\n\n# Custom filter set for Destination model\nclass DestinationFilter(django_filters.FilterSet):\n    package_id = django_filters.CharFilter(field_name='packages__id', lookup_expr='exact')\n    min_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='gte')\n    max_duration = django_filters.NumberFilter(field_name='duration', lookup_expr='lte')\n\n    class Meta:\n        model = Destination\n        fields = {\n            'destination_title': ['exact', 'icontains'],\n            'nature_of_trip': ['exact', 'icontains'],\n            'activities': ['exact'],\n            'collections': ['exact'],\n        }\n\nclass DestinationViewsets(viewsets.ModelViewSet):\n    permission_classes = [destinationPermission]\n    pagination_class = MyPageNumberPagination\n    queryset = Destination.objects.all().order_by(\"-destination_title\")\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['destination_title']\n    ordering_fields = ['destination_title', 'id', 'duration']\n    filterset_class = DestinationFilter  # Use the custom filter set here\n    lookup_field = \"slug\"\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return DestinationWriteSerializers\n        elif self.action == \"list\":\n            if self.request.user.is_authenticated and her.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n                return DestinationlistAdminSerializers\n            else:\n                return DestinationlistUserSerializers\n        elif self.action == \"retrieve\":\n            if self.request.user.is_authenticated and her.request.user.role in [roles.ADMIN, roles.SUPER_ADMIN]:\n                return DestinationRetrieveAdminSerializers\n            else:\n                return DestinationRetrieveUserSerializers\n        return super().get_serializer_class()\n    \n    def get_object(self):\n        slug = self.kwargs.get('slug')\n        return get_object_or_404(Destination, slug=slug)\n"
        }
    ]
}